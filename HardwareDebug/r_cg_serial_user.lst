   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	MDUC	=	0xf00e8
  26                             	MDAL	=	0xffff0
  27                             	MDAH	=	0xffff2
  28                             	MDBL	=	0xffff6
  29                             	MDBH	=	0xffff4
  30                             	MDCL	=	0xf00e0
  31                             	MDCH	=	0xf00e2
  32                             	.text
  33                             	.Ltext0:
  34                             		.global	_r_uart0_interrupt_send
  36                             	_r_uart0_interrupt_send:
  37                             	.LFB0:
  38                             		.file 1 "../src/r_cg_serial_user.c"
   1:../src/r_cg_serial_user.c **** /**************************************************************************************************
   2:../src/r_cg_serial_user.c **** * DISCLAIMER
   3:../src/r_cg_serial_user.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_serial_user.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_serial_user.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_serial_user.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_serial_user.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_serial_user.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_serial_user.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_serial_user.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_serial_user.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_serial_user.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_serial_user.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_serial_user.c **** * following link:
  15:../src/r_cg_serial_user.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_serial_user.c **** *
  17:../src/r_cg_serial_user.c **** * Copyright (C) 2011, 2016 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_serial_user.c **** ***************************************************************************************************
  19:../src/r_cg_serial_user.c **** 
  20:../src/r_cg_serial_user.c **** /**************************************************************************************************
  21:../src/r_cg_serial_user.c **** * File Name    : r_cg_serial_user.c
  22:../src/r_cg_serial_user.c **** * Version      : CodeGenerator for RL78/G13 V2.03.04.01 [11 Nov 2016]
  23:../src/r_cg_serial_user.c **** * Device(s)    : R5F1006C
  24:../src/r_cg_serial_user.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_serial_user.c **** * Description  : This file implements device driver for Serial module.
  26:../src/r_cg_serial_user.c **** * Creation Date: 8/7/2018
  27:../src/r_cg_serial_user.c **** ***************************************************************************************************
  28:../src/r_cg_serial_user.c **** 
  29:../src/r_cg_serial_user.c **** /**************************************************************************************************
  30:../src/r_cg_serial_user.c **** Includes
  31:../src/r_cg_serial_user.c **** ***************************************************************************************************
  32:../src/r_cg_serial_user.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_serial_user.c **** #include "r_cg_serial.h"
  34:../src/r_cg_serial_user.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_serial_user.c **** #include "GSM.h"
  36:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  37:../src/r_cg_serial_user.c **** #include "r_cg_userdefine.h"
  38:../src/r_cg_serial_user.c **** 
  39:../src/r_cg_serial_user.c **** /**************************************************************************************************
  40:../src/r_cg_serial_user.c **** Global variables and functions
  41:../src/r_cg_serial_user.c **** ***************************************************************************************************
  42:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart0_tx_address;         /* uart0 send buffer address */
  43:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart0_tx_count;            /* uart0 send data number */
  44:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart0_rx_address;         /* uart0 receive buffer address */
  45:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart0_rx_count;            /* uart0 receive data number */
  46:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart0_rx_length;           /* uart0 receive data length */
  47:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_tx_address;         /* uart1 send buffer address */
  48:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_tx_count;            /* uart1 send data number */
  49:../src/r_cg_serial_user.c **** extern volatile uint8_t * gp_uart1_rx_address;         /* uart1 receive buffer address */
  50:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_count;            /* uart1 receive data number */
  51:../src/r_cg_serial_user.c **** extern volatile uint16_t  g_uart1_rx_length;           /* uart1 receive data length */
  52:../src/r_cg_serial_user.c **** /* Start user code for global. Do not edit comment generated here */
  53:../src/r_cg_serial_user.c **** /* End user code. Do not edit comment generated here */
  54:../src/r_cg_serial_user.c **** 
  55:../src/r_cg_serial_user.c **** /**************************************************************************************************
  56:../src/r_cg_serial_user.c **** * Function Name: r_uart0_interrupt_send
  57:../src/r_cg_serial_user.c **** * Description  : This function is INTST0 interrupt service routine.
  58:../src/r_cg_serial_user.c **** * Arguments    : None
  59:../src/r_cg_serial_user.c **** * Return Value : None
  60:../src/r_cg_serial_user.c **** ***************************************************************************************************
  61:../src/r_cg_serial_user.c **** void r_uart0_interrupt_send(void)
  62:../src/r_cg_serial_user.c **** {
  39                             		.loc 1 62 0
  40                             		; start of function
  41                             		; push 16: ax bc de hl r8 r10 r12 r14
  42 0000 61 CF                   		sel	rb0
  43 0002 C1                      		push	ax
  44                             	.LCFI0:
  45 0003 C3                      		push	bc
  46                             	.LCFI1:
  47 0004 C5                      		push	de
  48                             	.LCFI2:
  49 0005 C7                      		push	hl
  50                             	.LCFI3:
  51 0006 61 DF                   		sel	rb1
  52 0008 C1                      		push	ax ; r8
  53                             	.LCFI4:
  54 0009 C3                      		push	bc ; r10
  55                             	.LCFI5:
  56 000a C5                      		push	de ; r12
  57                             	.LCFI6:
  58 000b C7                      		push	hl ; r14
  59                             	.LCFI7:
  60 000c 61 CF                   		sel	rb0
  63:../src/r_cg_serial_user.c **** 	tx0Done();
  61                             		.loc 1 63 0
  62 000e FC 00 00 00             		call	!!%code(_tx0Done)
  64:../src/r_cg_serial_user.c **** 	if (g_uart0_tx_count > 0U)
  63                             		.loc 1 64 0
  64 0012 AF 00 00                		movw	ax, !_g_uart0_tx_count
  65 0015 BD F0                   		movw	r8, ax
  66 0017 44 00 00                		cmpw	ax, #0
  67 001a 61 F8                   		 sknz
  68 001c EC 55 00 00             		 br	!!.L2
  65:../src/r_cg_serial_user.c ****     {
  66:../src/r_cg_serial_user.c ****         TXD0 = *gp_uart0_tx_address;
  69                             		.loc 1 66 0
  70 0020 C9 F2 10 FF             		movw	r10, #-240
  71 0024 AF 00 00                		movw	ax, !_gp_uart0_tx_address
  72 0027 BD F0                   		movw	r8, ax
  73 0029 BD F4                   		movw	r12, ax
  74 002b FA F4                   		movw	hl, r12
  75 002d 8B                      		mov	a, [hl]
  76 002e 9D F0                   		mov	r8, a
  77 0030 AD F2                   		movw	ax, r10
  78 0032 BD F4                   		movw	r12, ax
  79 0034 EA F4                   		movw	de, r12
  80 0036 8D F0                   		mov	a, r8
  81 0038 99                      		mov	[de], a
  67:../src/r_cg_serial_user.c ****         gp_uart0_tx_address++;
  82                             		.loc 1 67 0
  83 0039 AF 00 00                		movw	ax, !_gp_uart0_tx_address
  84 003c BD F0                   		movw	r8, ax
  85 003e A6 F0                   		incw	r8
  86 0040 AD F0                   		movw	ax, r8
  87 0042 BF 00 00                		movw	!_gp_uart0_tx_address, ax
  68:../src/r_cg_serial_user.c ****         g_uart0_tx_count--;
  88                             		.loc 1 68 0
  89 0045 AF 00 00                		movw	ax, !_g_uart0_tx_count
  90 0048 BD F0                   		movw	r8, ax
  91 004a B6 F0                   		decw	r8
  92 004c AD F0                   		movw	ax, r8
  93 004e BF 00 00                		movw	!_g_uart0_tx_count, ax
  94 0051 EC 59 00 00             		br	!!.L1
  95                             	.L2:
  69:../src/r_cg_serial_user.c ****     }
  70:../src/r_cg_serial_user.c ****     else
  71:../src/r_cg_serial_user.c ****     {
  72:../src/r_cg_serial_user.c ****         r_uart0_callback_sendend();
  96                             		.loc 1 72 0
  97 0055 FC 67 00 00             		call	!!%code(_r_uart0_callback_sendend)
  98                             	.L1:
  73:../src/r_cg_serial_user.c ****     }
  74:../src/r_cg_serial_user.c **** }
  99                             		.loc 1 74 0
 100 0059 61 DF                   		sel	rb1
 101 005b C6                      		pop	hl ; r14
 102 005c C4                      		pop	de ; r12
 103 005d C2                      		pop	bc ; r10
 104 005e C0                      		pop	ax ; r8
 105 005f 61 CF                   		sel	rb0
 106 0061 C6                      		pop	hl
 107 0062 C4                      		pop	de
 108 0063 C2                      		pop	bc
 109 0064 C0                      		pop	ax
 110 0065 61 FC                   		reti
 111                             	.LFE0:
 114                             	_r_uart0_callback_sendend:
 115                             	.LFB1:
  75:../src/r_cg_serial_user.c **** 
  76:../src/r_cg_serial_user.c **** /**************************************************************************************************
  77:../src/r_cg_serial_user.c **** * Function Name: r_uart0_callback_sendend
  78:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART0 finishes transmission.
  79:../src/r_cg_serial_user.c **** * Arguments    : None
  80:../src/r_cg_serial_user.c **** * Return Value : None
  81:../src/r_cg_serial_user.c **** ***************************************************************************************************
  82:../src/r_cg_serial_user.c **** static void r_uart0_callback_sendend(void)
  83:../src/r_cg_serial_user.c **** {
 116                             		.loc 1 83 0
  84:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
  85:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
  86:../src/r_cg_serial_user.c **** }
 117                             		.loc 1 86 0
 118 0067 D7                      		ret
 119                             	.LFE1:
 121                             		.global	_r_uart1_interrupt_receive
 123                             	_r_uart1_interrupt_receive:
 124                             	.LFB2:
  87:../src/r_cg_serial_user.c **** 
  88:../src/r_cg_serial_user.c **** /**************************************************************************************************
  89:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_receive
  90:../src/r_cg_serial_user.c **** * Description  : This function is INTSR1 interrupt service routine.
  91:../src/r_cg_serial_user.c **** * Arguments    : None
  92:../src/r_cg_serial_user.c **** * Return Value : None
  93:../src/r_cg_serial_user.c **** ***************************************************************************************************
  94:../src/r_cg_serial_user.c **** void r_uart1_interrupt_receive(void)
  95:../src/r_cg_serial_user.c **** {
 125                             		.loc 1 95 0
 126                             		; start of function
 127                             		; push 16: ax bc de hl r8 r10 r12 r14
 128                             		; locals: 2 bytes
 129                             		; outgoing: 2 bytes
 130 0068 61 CF                   		sel	rb0
 131 006a C1                      		push	ax
 132                             	.LCFI8:
 133 006b C3                      		push	bc
 134                             	.LCFI9:
 135 006c C5                      		push	de
 136                             	.LCFI10:
 137 006d C7                      		push	hl
 138                             	.LCFI11:
 139 006e 61 DF                   		sel	rb1
 140 0070 C1                      		push	ax ; r8
 141                             	.LCFI12:
 142 0071 C3                      		push	bc ; r10
 143                             	.LCFI13:
 144 0072 C5                      		push	de ; r12
 145                             	.LCFI14:
 146 0073 C7                      		push	hl ; r14
 147                             	.LCFI15:
 148 0074 61 CF                   		sel	rb0
 149 0076 20 04                   		subw	sp, #4
 150                             	.LCFI16:
  96:../src/r_cg_serial_user.c ****     volatile uint8_t rx_data;
  97:../src/r_cg_serial_user.c ****     volatile uint8_t err_type;
  98:../src/r_cg_serial_user.c ****     
  99:../src/r_cg_serial_user.c ****     err_type = (uint8_t)(SSR03 & 0x0007U);
 151                             		.loc 1 99 0
 152 0078 C9 F0 06 01             		movw	r8, #262
 153 007c AD F0                   		movw	ax, r8
 154 007e BD F2                   		movw	r10, ax
 155 0080 FA F2                   		movw	hl, r10
 156 0082 AB                      		movw	ax, [hl]
 157 0083 BD F0                   		movw	r8, ax
 158 0085 5A F0 07                		and	r8, #7
 159 0088 8D F0                   		mov	a, r8
 160 008a 98 02                   		mov	[sp+2], a
 100:../src/r_cg_serial_user.c ****     SIR03 = (uint16_t)err_type;
 161                             		.loc 1 100 0
 162 008c C9 F2 0E 01             		movw	r10, #270
 163 0090 88 02                   		mov	a, [sp+2]
 164 0092 9D F0                   		mov	r8, a
 165 0094 F4 F1                   		clrb	r9
 166 0096 AD F2                   		movw	ax, r10
 167 0098 BD F4                   		movw	r12, ax
 168 009a EA F4                   		movw	de, r12
 169 009c AD F0                   		movw	ax, r8
 170 009e B9                      		movw	[de], ax
 101:../src/r_cg_serial_user.c **** 
 102:../src/r_cg_serial_user.c ****     if (err_type != 0U)
 171                             		.loc 1 102 0
 172 009f 88 02                   		mov	a, [sp+2]
 173 00a1 9D F0                   		mov	r8, a
 174 00a3 D4 F0                   		cmp0	r8
 175 00a5 61 F8                   		 sknz
 176 00a7 EC B5 00 00             		 br	!!.L6
 103:../src/r_cg_serial_user.c ****     {
 104:../src/r_cg_serial_user.c ****         r_uart1_callback_error(err_type);
 177                             		.loc 1 104 0
 178 00ab 88 02                   		mov	a, [sp+2]
 179 00ad 9D F0                   		mov	r8, a
 180 00af 98 00                   		mov	[sp], a
 181 00b1 FC B0 01 00             		call	!!%code(_r_uart1_callback_error)
 182                             	.L6:
 105:../src/r_cg_serial_user.c ****     }
 106:../src/r_cg_serial_user.c ****     
 107:../src/r_cg_serial_user.c ****     rx_data = RXD1;
 183                             		.loc 1 107 0
 184 00b5 C9 F0 46 FF             		movw	r8, #-186
 185 00b9 AD F0                   		movw	ax, r8
 186 00bb BD F2                   		movw	r10, ax
 187 00bd FA F2                   		movw	hl, r10
 188 00bf 8B                      		mov	a, [hl]
 189 00c0 9D F0                   		mov	r8, a
 190 00c2 98 03                   		mov	[sp+3], a
 108:../src/r_cg_serial_user.c ****     recByte(rx_data);
 191                             		.loc 1 108 0
 192 00c4 88 03                   		mov	a, [sp+3]
 193 00c6 9D F0                   		mov	r8, a
 194 00c8 98 00                   		mov	[sp], a
 195 00ca FC 00 00 00             		call	!!%code(_recByte)
 109:../src/r_cg_serial_user.c ****     if (g_uart1_rx_length > g_uart1_rx_count)
 196                             		.loc 1 109 0
 197 00ce AF 00 00                		movw	ax, !_g_uart1_rx_length
 198 00d1 BD F2                   		movw	r10, ax
 199 00d3 AF 00 00                		movw	ax, !_g_uart1_rx_count
 200 00d6 BD F0                   		movw	r8, ax
 201 00d8 AD F2                   		movw	ax, r10
 202 00da 46 F0                   		cmpw	ax, r8
 203 00dc 61 E3                   		 skh
 204 00de EC 28 01 00             		 br	!!.L7
 110:../src/r_cg_serial_user.c ****     {
 111:../src/r_cg_serial_user.c ****         *gp_uart1_rx_address = rx_data;
 205                             		.loc 1 111 0
 206 00e2 AF 00 00                		movw	ax, !_gp_uart1_rx_address
 207 00e5 BD F0                   		movw	r8, ax
 208 00e7 88 03                   		mov	a, [sp+3]
 209 00e9 9D F2                   		mov	r10, a
 210 00eb AD F0                   		movw	ax, r8
 211 00ed BD F4                   		movw	r12, ax
 212 00ef EA F4                   		movw	de, r12
 213 00f1 8D F2                   		mov	a, r10
 214 00f3 99                      		mov	[de], a
 112:../src/r_cg_serial_user.c ****         gp_uart1_rx_address++;
 215                             		.loc 1 112 0
 216 00f4 AF 00 00                		movw	ax, !_gp_uart1_rx_address
 217 00f7 BD F0                   		movw	r8, ax
 218 00f9 A6 F0                   		incw	r8
 219 00fb AD F0                   		movw	ax, r8
 220 00fd BF 00 00                		movw	!_gp_uart1_rx_address, ax
 113:../src/r_cg_serial_user.c ****         g_uart1_rx_count++;
 221                             		.loc 1 113 0
 222 0100 AF 00 00                		movw	ax, !_g_uart1_rx_count
 223 0103 BD F0                   		movw	r8, ax
 224 0105 A6 F0                   		incw	r8
 225 0107 AD F0                   		movw	ax, r8
 226 0109 BF 00 00                		movw	!_g_uart1_rx_count, ax
 114:../src/r_cg_serial_user.c **** 
 115:../src/r_cg_serial_user.c ****         if (g_uart1_rx_length == g_uart1_rx_count)
 227                             		.loc 1 115 0
 228 010c AF 00 00                		movw	ax, !_g_uart1_rx_length
 229 010f BD F2                   		movw	r10, ax
 230 0111 AF 00 00                		movw	ax, !_g_uart1_rx_count
 231 0114 BD F0                   		movw	r8, ax
 232 0116 AD F2                   		movw	ax, r10
 233 0118 46 F0                   		cmpw	ax, r8
 234 011a 61 E8                   		 skz
 235 011c EC 36 01 00             		 br	!!.L5
 116:../src/r_cg_serial_user.c ****         {
 117:../src/r_cg_serial_user.c ****             r_uart1_callback_receiveend();
 236                             		.loc 1 117 0
 237 0120 FC AD 01 00             		call	!!%code(_r_uart1_callback_receiveend)
 238 0124 EC 36 01 00             		br	!!.L5
 239                             	.L7:
 118:../src/r_cg_serial_user.c ****         }
 119:../src/r_cg_serial_user.c ****     }
 120:../src/r_cg_serial_user.c ****     else
 121:../src/r_cg_serial_user.c ****     {
 122:../src/r_cg_serial_user.c ****         r_uart1_callback_softwareoverrun(rx_data);
 240                             		.loc 1 122 0
 241 0128 88 03                   		mov	a, [sp+3]
 242 012a 9D F0                   		mov	r8, a
 243 012c F4 F1                   		clrb	r9
 244 012e AD F0                   		movw	ax, r8
 245 0130 B8 00                   		movw	[sp], ax
 246 0132 FC AE 01 00             		call	!!%code(_r_uart1_callback_softwareoverrun)
 247                             	.L5:
 123:../src/r_cg_serial_user.c ****     }
 124:../src/r_cg_serial_user.c **** }
 248                             		.loc 1 124 0
 249 0136 10 04                   		addw	sp, #4
 250 0138 61 DF                   		sel	rb1
 251 013a C6                      		pop	hl ; r14
 252 013b C4                      		pop	de ; r12
 253 013c C2                      		pop	bc ; r10
 254 013d C0                      		pop	ax ; r8
 255 013e 61 CF                   		sel	rb0
 256 0140 C6                      		pop	hl
 257 0141 C4                      		pop	de
 258 0142 C2                      		pop	bc
 259 0143 C0                      		pop	ax
 260 0144 61 FC                   		reti
 261                             	.LFE2:
 263                             		.global	_r_uart1_interrupt_send
 265                             	_r_uart1_interrupt_send:
 266                             	.LFB3:
 125:../src/r_cg_serial_user.c **** 
 126:../src/r_cg_serial_user.c **** /**************************************************************************************************
 127:../src/r_cg_serial_user.c **** * Function Name: r_uart1_interrupt_send
 128:../src/r_cg_serial_user.c **** * Description  : This function is INTST1 interrupt service routine.
 129:../src/r_cg_serial_user.c **** * Arguments    : None
 130:../src/r_cg_serial_user.c **** * Return Value : None
 131:../src/r_cg_serial_user.c **** ***************************************************************************************************
 132:../src/r_cg_serial_user.c **** void r_uart1_interrupt_send(void)
 133:../src/r_cg_serial_user.c **** {
 267                             		.loc 1 133 0
 268                             		; start of function
 269                             		; push 16: ax bc de hl r8 r10 r12 r14
 270 0146 61 CF                   		sel	rb0
 271 0148 C1                      		push	ax
 272                             	.LCFI17:
 273 0149 C3                      		push	bc
 274                             	.LCFI18:
 275 014a C5                      		push	de
 276                             	.LCFI19:
 277 014b C7                      		push	hl
 278                             	.LCFI20:
 279 014c 61 DF                   		sel	rb1
 280 014e C1                      		push	ax ; r8
 281                             	.LCFI21:
 282 014f C3                      		push	bc ; r10
 283                             	.LCFI22:
 284 0150 C5                      		push	de ; r12
 285                             	.LCFI23:
 286 0151 C7                      		push	hl ; r14
 287                             	.LCFI24:
 288 0152 61 CF                   		sel	rb0
 134:../src/r_cg_serial_user.c **** 	tx1Done();
 289                             		.loc 1 134 0
 290 0154 FC 00 00 00             		call	!!%code(_tx1Done)
 135:../src/r_cg_serial_user.c **** 	if (g_uart1_tx_count > 0U)
 291                             		.loc 1 135 0
 292 0158 AF 00 00                		movw	ax, !_g_uart1_tx_count
 293 015b BD F0                   		movw	r8, ax
 294 015d 44 00 00                		cmpw	ax, #0
 295 0160 61 F8                   		 sknz
 296 0162 EC 9B 01 00             		 br	!!.L11
 136:../src/r_cg_serial_user.c ****     {
 137:../src/r_cg_serial_user.c ****         TXD1 = *gp_uart1_tx_address;
 297                             		.loc 1 137 0
 298 0166 C9 F2 44 FF             		movw	r10, #-188
 299 016a AF 00 00                		movw	ax, !_gp_uart1_tx_address
 300 016d BD F0                   		movw	r8, ax
 301 016f BD F4                   		movw	r12, ax
 302 0171 FA F4                   		movw	hl, r12
 303 0173 8B                      		mov	a, [hl]
 304 0174 9D F0                   		mov	r8, a
 305 0176 AD F2                   		movw	ax, r10
 306 0178 BD F4                   		movw	r12, ax
 307 017a EA F4                   		movw	de, r12
 308 017c 8D F0                   		mov	a, r8
 309 017e 99                      		mov	[de], a
 138:../src/r_cg_serial_user.c ****         gp_uart1_tx_address++;
 310                             		.loc 1 138 0
 311 017f AF 00 00                		movw	ax, !_gp_uart1_tx_address
 312 0182 BD F0                   		movw	r8, ax
 313 0184 A6 F0                   		incw	r8
 314 0186 AD F0                   		movw	ax, r8
 315 0188 BF 00 00                		movw	!_gp_uart1_tx_address, ax
 139:../src/r_cg_serial_user.c ****         g_uart1_tx_count--;
 316                             		.loc 1 139 0
 317 018b AF 00 00                		movw	ax, !_g_uart1_tx_count
 318 018e BD F0                   		movw	r8, ax
 319 0190 B6 F0                   		decw	r8
 320 0192 AD F0                   		movw	ax, r8
 321 0194 BF 00 00                		movw	!_g_uart1_tx_count, ax
 322 0197 EC 9F 01 00             		br	!!.L10
 323                             	.L11:
 140:../src/r_cg_serial_user.c ****     }
 141:../src/r_cg_serial_user.c ****     else
 142:../src/r_cg_serial_user.c ****     {
 143:../src/r_cg_serial_user.c ****         r_uart1_callback_sendend();
 324                             		.loc 1 143 0
 325 019b FC AF 01 00             		call	!!%code(_r_uart1_callback_sendend)
 326                             	.L10:
 144:../src/r_cg_serial_user.c ****     }
 145:../src/r_cg_serial_user.c **** }
 327                             		.loc 1 145 0
 328 019f 61 DF                   		sel	rb1
 329 01a1 C6                      		pop	hl ; r14
 330 01a2 C4                      		pop	de ; r12
 331 01a3 C2                      		pop	bc ; r10
 332 01a4 C0                      		pop	ax ; r8
 333 01a5 61 CF                   		sel	rb0
 334 01a7 C6                      		pop	hl
 335 01a8 C4                      		pop	de
 336 01a9 C2                      		pop	bc
 337 01aa C0                      		pop	ax
 338 01ab 61 FC                   		reti
 339                             	.LFE3:
 342                             	_r_uart1_callback_receiveend:
 343                             	.LFB4:
 146:../src/r_cg_serial_user.c **** 
 147:../src/r_cg_serial_user.c **** /**************************************************************************************************
 148:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_receiveend
 149:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes reception.
 150:../src/r_cg_serial_user.c **** * Arguments    : None
 151:../src/r_cg_serial_user.c **** * Return Value : None
 152:../src/r_cg_serial_user.c **** ***************************************************************************************************
 153:../src/r_cg_serial_user.c **** static void r_uart1_callback_receiveend(void)
 154:../src/r_cg_serial_user.c **** {
 344                             		.loc 1 154 0
 155:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 156:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 157:../src/r_cg_serial_user.c **** }
 345                             		.loc 1 157 0
 346 01ad D7                      		ret
 347                             	.LFE4:
 350                             	_r_uart1_callback_softwareoverrun:
 351                             	.LFB5:
 158:../src/r_cg_serial_user.c **** 
 159:../src/r_cg_serial_user.c **** /**************************************************************************************************
 160:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_softwareoverrun
 161:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 receives an overflow data.
 162:../src/r_cg_serial_user.c **** * Arguments    : rx_data -
 163:../src/r_cg_serial_user.c **** *                    receive data
 164:../src/r_cg_serial_user.c **** * Return Value : None
 165:../src/r_cg_serial_user.c **** ***************************************************************************************************
 166:../src/r_cg_serial_user.c **** static void r_uart1_callback_softwareoverrun(uint16_t rx_data)
 167:../src/r_cg_serial_user.c **** {
 352                             		.loc 1 167 0
 168:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 169:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 170:../src/r_cg_serial_user.c **** }
 353                             		.loc 1 170 0
 354 01ae D7                      		ret
 355                             	.LFE5:
 358                             	_r_uart1_callback_sendend:
 359                             	.LFB6:
 171:../src/r_cg_serial_user.c **** 
 172:../src/r_cg_serial_user.c **** /**************************************************************************************************
 173:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_sendend
 174:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 finishes transmission.
 175:../src/r_cg_serial_user.c **** * Arguments    : None
 176:../src/r_cg_serial_user.c **** * Return Value : None
 177:../src/r_cg_serial_user.c **** ***************************************************************************************************
 178:../src/r_cg_serial_user.c **** static void r_uart1_callback_sendend(void)
 179:../src/r_cg_serial_user.c **** {
 360                             		.loc 1 179 0
 180:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 181:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 182:../src/r_cg_serial_user.c **** }
 361                             		.loc 1 182 0
 362 01af D7                      		ret
 363                             	.LFE6:
 366                             	_r_uart1_callback_error:
 367                             	.LFB7:
 183:../src/r_cg_serial_user.c **** 
 184:../src/r_cg_serial_user.c **** /**************************************************************************************************
 185:../src/r_cg_serial_user.c **** * Function Name: r_uart1_callback_error
 186:../src/r_cg_serial_user.c **** * Description  : This function is a callback function when UART1 reception error occurs.
 187:../src/r_cg_serial_user.c **** * Arguments    : err_type -
 188:../src/r_cg_serial_user.c **** *                    error type value
 189:../src/r_cg_serial_user.c **** * Return Value : None
 190:../src/r_cg_serial_user.c **** ***************************************************************************************************
 191:../src/r_cg_serial_user.c **** static void r_uart1_callback_error(uint8_t err_type)
 192:../src/r_cg_serial_user.c **** {
 368                             		.loc 1 192 0
 193:../src/r_cg_serial_user.c ****     /* Start user code. Do not edit comment generated here */
 194:../src/r_cg_serial_user.c ****     /* End user code. Do not edit comment generated here */
 195:../src/r_cg_serial_user.c **** }
 369                             		.loc 1 195 0
 370 01b0 D7                      		ret
 371                             	.LFE7:
 603                             	.Letext0:
 604                             		.file 2 "../src/r_cg_macrodriver.h"
