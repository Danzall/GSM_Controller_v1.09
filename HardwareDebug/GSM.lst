   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	MDUC	=	0xf00e8
  26                             	MDAL	=	0xffff0
  27                             	MDAH	=	0xffff2
  28                             	MDBL	=	0xffff6
  29                             	MDBH	=	0xffff4
  30                             	MDCL	=	0xf00e0
  31                             	MDCH	=	0xf00e2
  32                             	.text
  33                             	.Ltext0:
  34                             		.comm	_recBuff,250,1
  35                             		.comm	_procBuff,170,1
  36                             		.global	_recBuffPointerWrite
  37                             	.bss
  38                             		.balign 2
  41                             	_recBuffPointerWrite:
  42 0000 00 00                   		.zero	2
  43                             		.global	_recBuffPointerRead
  44                             		.balign 2
  47                             	_recBuffPointerRead:
  48 0002 00 00                   		.zero	2
  49                             		.global	_procBuffpointer
  50                             		.balign 2
  53                             	_procBuffpointer:
  54 0004 00 00                   		.zero	2
  55                             		.global	_intFlag0
  56                             		.balign 2
  59                             	_intFlag0:
  60 0006 00 00                   		.zero	2
  61                             		.global	_intFlag1
  62                             		.balign 2
  65                             	_intFlag1:
  66 0008 00 00                   		.zero	2
  67                             		.global	_gsmState
  68                             	.data
  69                             		.balign 2
  72                             	_gsmState:
  73 0000 14 00                   		.short	20
  74                             		.comm	_smsFlags,24,2
  75                             		.comm	_smsInfo,334,2
  76                             		.comm	_gsmInfo,44,2
  77                             		.comm	_SMScontent,160,1
  78                             		.comm	_GPRSresult,40,1
  79                             		.comm	_quality,10,1
  80                             		.comm	_gsmTimer,2,2
  81                             		.comm	_gprsTimer,2,2
  82                             		.global	_errorTimer
  83                             	.bss
  84                             		.balign 2
  87                             	_errorTimer:
  88 000a 00 00                   		.zero	2
  89                             		.global	_errorCounter
  90                             		.balign 2
  93                             	_errorCounter:
  94 000c 00 00                   		.zero	2
  95                             		.global	_restart
  96                             	.data
  97                             		.balign 2
 100                             	_restart:
 101 0002 01 00                   		.short	1
 102                             		.global	_restartTimer
 103                             	.bss
 104                             		.balign 2
 107                             	_restartTimer:
 108 000e 00 00                   		.zero	2
 109                             	.text
 110                             		.global	_pec_Update
 112                             	_pec_Update:
 113                             	.LFB0:
 114                             		.file 1 "../src/GSM.c"
   1:../src/GSM.c  **** /*
   2:../src/GSM.c  ****  * GSM.c
   3:../src/GSM.c  ****  *
   4:../src/GSM.c  ****  *  Created on: Feb 22, 2018
   5:../src/GSM.c  ****  *      Author: Jeefo
   6:../src/GSM.c  ****  */
   7:../src/GSM.c  **** /**************************************************************************************************
   8:../src/GSM.c  **** Includes
   9:../src/GSM.c  **** ***************************************************************************************************
  10:../src/GSM.c  **** #include "r_cg_macrodriver.h"
  11:../src/GSM.c  **** #include "r_cg_cgc.h"
  12:../src/GSM.c  **** #include "r_cg_port.h"
  13:../src/GSM.c  **** #include "r_cg_serial.h"
  14:../src/GSM.c  **** //#include "r_cg_adc.h"
  15:../src/GSM.c  **** #include "r_cg_timer.h"
  16:../src/GSM.c  **** #include "r_cg_wdt.h"
  17:../src/GSM.c  **** /* Start user code for include. Do not edit comment generated here */
  18:../src/GSM.c  **** #include "GSM.h"
  19:../src/GSM.c  **** #include "stdio.h"
  20:../src/GSM.c  **** #include "RTC.h"
  21:../src/GSM.c  **** #include "board.h"
  22:../src/GSM.c  **** /* End user code. Do not edit comment generated here */
  23:../src/GSM.c  **** #include "r_cg_userdefine.h"
  24:../src/GSM.c  **** 
  25:../src/GSM.c  **** #define recBuffSize 250
  26:../src/GSM.c  **** #define procBuffSize 170
  27:../src/GSM.c  **** char recBuff[recBuffSize];
  28:../src/GSM.c  **** char procBuff[procBuffSize];
  29:../src/GSM.c  **** int recBuffPointerWrite = 0;
  30:../src/GSM.c  **** int recBuffPointerRead = 0;
  31:../src/GSM.c  **** int procBuffpointer = 0;
  32:../src/GSM.c  **** int intFlag0 = 0;
  33:../src/GSM.c  **** int intFlag1 = 0;
  34:../src/GSM.c  **** //int gsmState = 1;		// no restart
  35:../src/GSM.c  **** int gsmState = 20;	//restart
  36:../src/GSM.c  **** SMSflags smsFlags;
  37:../src/GSM.c  **** SMSinfo smsInfo;
  38:../src/GSM.c  **** GSMinfo gsmInfo;
  39:../src/GSM.c  **** char SMScontent[160];
  40:../src/GSM.c  **** char GPRSresult[40];
  41:../src/GSM.c  **** char quality[10];
  42:../src/GSM.c  **** int gsmTimer;
  43:../src/GSM.c  **** int gprsTimer;
  44:../src/GSM.c  **** int errorTimer = 0;
  45:../src/GSM.c  **** int errorCounter = 0;
  46:../src/GSM.c  **** int restart = 1;
  47:../src/GSM.c  **** int restartTimer = 0;
  48:../src/GSM.c  **** 
  49:../src/GSM.c  **** void pec_Update(uint8_t* pec, uint8_t index)
  50:../src/GSM.c  **** {
 115                             		.loc 1 50 0
 116                             		; start of function
 117                             		; locals: 2 bytes
 118 0000 20 02                   		subw	sp, #2
 119                             	.LCFI0:
  51:../src/GSM.c  **** 	char index1;
  52:../src/GSM.c  **** static const  uint8_t lookup[256][3] =		//256 rows each having 3 columns
  53:../src/GSM.c  **** {
  54:../src/GSM.c  **** "21", "22", "23", "24", "25", "26", "27", "28",
  55:../src/GSM.c  **** "29", "2A", "2B", "2C", "2D", "2E", "2F",
  56:../src/GSM.c  **** "30", "31", "32", "33", "34", "35", "36", "37",
  57:../src/GSM.c  **** "38", "39", "3A", "3B", "3C", "3D", "3E", "3F",
  58:../src/GSM.c  **** "40", "41", "42", "43", "44", "45", "46", "47",
  59:../src/GSM.c  **** "48", "49", "4A", "4B", "4C", "4D", "4E", "4F",
  60:../src/GSM.c  **** "50", "51", "52", "53", "54", "55", "56", "57",
  61:../src/GSM.c  **** "58", "59", "5A", "5B", "5C", "5D", "5E", "5F",
  62:../src/GSM.c  **** "60", "61", "62", "63", "64", "65", "66", "67",
  63:../src/GSM.c  **** "68", "69", "6A", "6B", "6C", "6D", "6E", "6F",
  64:../src/GSM.c  **** "70", "71", "72", "73", "74", "75", "76", "77",
  65:../src/GSM.c  **** "78", "79", "7A", "7B", "7C", "7D", "7E", "7F"
  66:../src/GSM.c  **** 
  67:../src/GSM.c  **** };
  68:../src/GSM.c  **** //pec = lookup[pec];
  69:../src/GSM.c  **** index1 = index - 33;
 120                             		.loc 1 69 0
 121 0002 88 08                   		mov	a, [sp+8]
 122 0004 0C DF                   		add	a, #-33
 123 0006 98 01                   		mov	[sp+1], a
  70:../src/GSM.c  **** 
  71:../src/GSM.c  **** *pec = lookup[index1][0] ;
 124                             		.loc 1 71 0
 125 0008 31 8E                   		shrw	ax, 8
 126 000a BD F2                   		movw	r10, ax
 127 000c BD F0                   		movw	r8, ax
 128 000e 01                      		addw	ax, ax
 129 000f BD F0                   		movw	r8, ax
 130 0011 06 F2                   		addw	ax, r10
 131 0013 BD F0                   		movw	r8, ax
 132 0015 04 B9 03                		addw	ax, #_lookup.1902
 133 0018 BD F0                   		movw	r8, ax
 134 001a BD F4                   		movw	r12, ax
 135 001c FA F4                   		movw	hl, r12
 136 001e 8B                      		mov	a, [hl]
 137 001f 9D F2                   		mov	r10, a
 138 0021 A8 06                   		movw	ax, [sp+6]
 139 0023 BD F0                   		movw	r8, ax
 140 0025 BD F4                   		movw	r12, ax
 141 0027 EA F4                   		movw	de, r12
 142 0029 8D F2                   		mov	a, r10
 143 002b 99                      		mov	[de], a
  72:../src/GSM.c  **** //sendByte(* pec, UART0);
  73:../src/GSM.c  **** pec++;
 144                             		.loc 1 73 0
 145 002c A8 06                   		movw	ax, [sp+6]
 146 002e A1                      		incw	ax
 147 002f B8 06                   		movw	[sp+6], ax
  74:../src/GSM.c  **** *pec = lookup[index1][1] ;
 148                             		.loc 1 74 0
 149 0031 88 01                   		mov	a, [sp+1]
 150 0033 31 8E                   		shrw	ax, 8
 151 0035 BD F2                   		movw	r10, ax
 152 0037 BD F0                   		movw	r8, ax
 153 0039 01                      		addw	ax, ax
 154 003a BD F0                   		movw	r8, ax
 155 003c 06 F2                   		addw	ax, r10
 156 003e BD F0                   		movw	r8, ax
 157 0040 04 BA 03                		addw	ax, #_lookup.1902+1
 158 0043 BD F0                   		movw	r8, ax
 159 0045 BD F4                   		movw	r12, ax
 160 0047 FA F4                   		movw	hl, r12
 161 0049 8B                      		mov	a, [hl]
 162 004a 9D F2                   		mov	r10, a
 163 004c A8 06                   		movw	ax, [sp+6]
 164 004e BD F0                   		movw	r8, ax
 165 0050 BD F4                   		movw	r12, ax
 166 0052 EA F4                   		movw	de, r12
 167 0054 8D F2                   		mov	a, r10
 168 0056 99                      		mov	[de], a
  75:../src/GSM.c  **** //sendByte(* pec, UART0);
  76:../src/GSM.c  **** pec++;
 169                             		.loc 1 76 0
 170 0057 A8 06                   		movw	ax, [sp+6]
 171 0059 A1                      		incw	ax
 172 005a B8 06                   		movw	[sp+6], ax
  77:../src/GSM.c  **** *pec = 0 ;
 173                             		.loc 1 77 0
 174 005c BD F0                   		movw	r8, ax
 175 005e BD F2                   		movw	r10, ax
 176 0060 EA F2                   		movw	de, r10
 177 0062 F1                      		clrb	a
 178 0063 99                      		mov	[de], a
  78:../src/GSM.c  **** //strcpy(pec,lookup[index1]);
  79:../src/GSM.c  **** /*char temp[15];
  80:../src/GSM.c  **** sprintf (temp,"\nIndex:%i\r\n", index1);
  81:../src/GSM.c  **** sendData(temp,UART0);*/
  82:../src/GSM.c  **** //sendData(pec,UART0);
  83:../src/GSM.c  **** //sendData("\r\n",UART0);
  84:../src/GSM.c  **** //return pec;
  85:../src/GSM.c  **** }
 179                             		.loc 1 85 0
 180 0064 10 02                   		addw	sp, #2
 181 0066 D7                      		ret
 182                             	.LFE0:
 184                             		.section	.rodata
 185                             	.LC0:
 186 0000 25 64 00                		.string	"%d"
 187                             	.LC1:
 188 0003 53 65 61 72 63 68 0D 0A 		.string	"Search\r\n"
 188      00 
 189                             	.LC2:
 190 000c 41 54 2B 43 52 45 47 3F 		.string	"AT+CREG?\r\n"
 190      0D 0A 00 
 191                             	.LC3:
 192 0017 53 4D 53 20 63 6F 6E 66 		.string	"SMS config\r\n"
 192      69 67 0D 0A 00 
 193                             	.LC4:
 194 0024 41 54 2B 43 4D 47 46 3D 		.string	"AT+CMGF=1\r\n"
 194      31 0D 0A 00 
 195                             	.LC5:
 196 0030 41 54 2B 43 47 44 43 4F 		.string	"AT+CGDCONT=1,\"IP\",\"INTERNET\"\r\n"
 196      4E 54 3D 31 2C 22 49 50 
 196      22 2C 22 49 4E 54 45 52 
 196      4E 45 54 22 0D 0A 00 
 197                             	.LC6:
 198 004f 41 54 2B 43 47 44 43 4F 		.string	"AT+CGDCONT?\r\n"
 198      4E 54 3F 0D 0A 00 
 199                             	.LC7:
 200 005d 41 54 2B 43 4D 47 4C 3D 		.string	"AT+CMGL=\"ALL\"\r\n"
 200      22 41 4C 4C 22 0D 0A 00 
 201                             	.LC8:
 202 006d 49 6E 73 65 72 74 20 53 		.string	"Insert SMS text\r\n"
 202      4D 53 20 74 65 78 74 0D 
 202      0A 00 
 203                             	.LC9:
 204 007f 1A 0D 00                		.string	"\032\r"
 205                             	.LC10:
 206 0082 41 54 2B 4D 49 50 43 41 		.string	"AT+MIPCALL=1\r\n"
 206      4C 4C 3D 31 0D 0A 00 
 207                             	.LC11:
 208 0091 41 54 2B 4D 49 50 43 41 		.string	"AT+MIPCALL=0\r\n"
 208      4C 4C 3D 30 0D 0A 00 
 209                             	.LC12:
 210 00a0 41 54 2B 4D 49 50 4F 50 		.string	"AT+MIPOPEN=1,10,\"216.58.223.4\",80,0\r\n"
 210      45 4E 3D 31 2C 31 30 2C 
 210      22 32 31 36 2E 35 38 2E 
 210      32 32 33 2E 34 22 2C 38 
 210      30 2C 30 0D 0A 00 
 211                             	.LC13:
 212 00c6 53 6F 63 6B 65 74 20 6F 		.string	"Socket open\r\n"
 212      70 65 6E 0D 0A 00 
 213                             	.LC14:
 214 00d4 41 54 2B 4D 49 50 43 4C 		.string	"AT+MIPCLOSE=1\r\n"
 214      4F 53 45 3D 31 0D 0A 00 
 215                             	.LC15:
 216 00e4 41 54 2B 43 4D 47 44 3D 		.string	"AT+CMGD="
 216      00 
 217                             	.LC16:
 218 00ed 0D 0A 00                		.string	"\r\n"
 219                             	.LC17:
 220 00f0 41 54 2B 43 53 51 3F 0D 		.string	"AT+CSQ?\r\n"
 220      0A 00 
 221                             	.LC18:
 222 00fa 41 54 2B 4D 49 50 4F 50 		.string	"AT+MIPOPEN=1,1100,\"0.0.0.0\",0,1\r\n"
 222      45 4E 3D 31 2C 31 31 30 
 222      30 2C 22 30 2E 30 2E 30 
 222      2E 30 22 2C 30 2C 31 0D 
 222      0A 00 
 223                             	.LC19:
 224 011c 41 54 2B 4D 49 50 53 45 		.string	"AT+MIPSETS=1,200\r\n"
 224      54 53 3D 31 2C 32 30 30 
 224      0D 0A 00 
 225                             	.LC20:
 226 012f 41 54 2B 4D 49 50 4F 50 		.string	"AT+MIPOPEN?\r\n"
 226      45 4E 3F 0D 0A 00 
 227                             	.LC21:
 228 013d 41 54 2B 4D 49 50 53 45 		.string	"AT+MIPSEND=1,\""
 228      4E 44 3D 31 2C 22 00 
 229                             	.LC22:
 230 014c 47 45 54 20 2F 20 48 54 		.string	"GET / HTTP/1.1"
 230      54 50 2F 31 2E 31 00 
 231                             	.LC23:
 232 015b 22 0D 0A 00             		.string	"\"\r\n"
 233                             	.LC24:
 234 015f 41 54 2B 4D 49 50 50 55 		.string	"AT+MIPPUSH=1\r\n"
 234      53 48 3D 31 0D 0A 00 
 235                             	.LC25:
 236 016e 47 53 4D 20 70 6F 77 65 		.string	"GSM power off\r\n"
 236      72 20 6F 66 66 0D 0A 00 
 237                             	.LC26:
 238 017e 52 65 73 74 61 72 74 2D 		.string	"Restart-%d"
 238      25 64 00 
 239                             	.LC27:
 240 0189 47 53 4D 20 70 6F 77 65 		.string	"GSM power on\r\n"
 240      72 20 6F 6E 0D 0A 00 
 241                             	.LC28:
 242 0198 47 53 4D 20 65 6E 61 62 		.string	"GSM enable\r\n"
 242      6C 65 0D 0A 00 
 243                             	.text
 244                             		.global	_GSM_Service
 246                             	_GSM_Service:
 247                             	.LFB1:
  86:../src/GSM.c  **** 
  87:../src/GSM.c  **** void GSM_Service(){
 248                             		.loc 1 87 0
 249                             		; start of function
 250                             		; locals: 16 bytes
 251                             		; outgoing: 6 bytes
 252 0067 20 16                   		subw	sp, #22
 253                             	.LCFI1:
  88:../src/GSM.c  **** 	char count[15];
  89:../src/GSM.c  **** 
  90:../src/GSM.c  **** 	sprintf(count, "%d", gsmTimer);
 254                             		.loc 1 90 0
 255 0069 AF 00 00                		movw	ax, !_gsmTimer
 256 006c BD F0                   		movw	r8, ax
 257 006e C9 F2 16 00             		movw	r10, #22
 258 0072 AE F8                   		movw	ax, sp
 259 0074 BD F2                   		movw	r10, ax
 260 0076 04 16 00                		addw	ax, #22
 261 0079 BD F2                   		movw	r10, ax
 262 007b 04 F1 FF                		addw	ax, #-15
 263 007e B8 00                   		movw	[sp], ax
 264 0080 30 00 00                		movw	ax, #.LC0
 265 0083 B8 02                   		movw	[sp+2], ax
 266 0085 AD F0                   		movw	ax, r8
 267 0087 B8 04                   		movw	[sp+4], ax
 268 0089 FC 00 00 00             		call	!!%code(_sprintf)
  91:../src/GSM.c  **** 	sprintf(count, "%d", gsmState);
 269                             		.loc 1 91 0
 270 008d AF 00 00                		movw	ax, !_gsmState
 271 0090 BD F0                   		movw	r8, ax
 272 0092 C9 F2 16 00             		movw	r10, #22
 273 0096 AE F8                   		movw	ax, sp
 274 0098 BD F2                   		movw	r10, ax
 275 009a 04 16 00                		addw	ax, #22
 276 009d BD F2                   		movw	r10, ax
 277 009f 04 F1 FF                		addw	ax, #-15
 278 00a2 B8 00                   		movw	[sp], ax
 279 00a4 30 00 00                		movw	ax, #.LC0
 280 00a7 B8 02                   		movw	[sp+2], ax
 281 00a9 AD F0                   		movw	ax, r8
 282 00ab B8 04                   		movw	[sp+4], ax
 283 00ad FC 00 00 00             		call	!!%code(_sprintf)
  92:../src/GSM.c  **** 	//sendData(count,UART0);
  93:../src/GSM.c  **** 	//sendData("\r\n",UART0);
  94:../src/GSM.c  **** 	/*if (smsFlags.context == 1) gprsTimer++;
  95:../src/GSM.c  **** 	if (gprsTimer >= 10) {
  96:../src/GSM.c  **** 
  97:../src/GSM.c  **** 		sprintf(count, "GPRS:%d\r\n", gprsTimer);
  98:../src/GSM.c  **** 		sendData(count,UART0);
  99:../src/GSM.c  **** 		if ((smsFlags.gprsPending == 0)&&(smsFlags.gprsActive == 0)&&(smsFlags.context == 1)){
 100:../src/GSM.c  **** 			sendData("Open context\r\n",UART0);
 101:../src/GSM.c  **** 			gsmState = 8;	//open context
 102:../src/GSM.c  **** 		}
 103:../src/GSM.c  **** 		//else gsmState = 9;		//close conext
 104:../src/GSM.c  **** 		gprsTimer = 0;
 105:../src/GSM.c  **** 	}*/
 106:../src/GSM.c  **** 
 107:../src/GSM.c  **** 	/*if (gsmTimer >= 10){
 108:../src/GSM.c  **** 
 109:../src/GSM.c  **** 		gsmTimer = 0;
 110:../src/GSM.c  **** 
 111:../src/GSM.c  **** 		gsmState = 5;
 112:../src/GSM.c  **** 	}*/
 113:../src/GSM.c  **** 	/*if (restart == 1){
 114:../src/GSM.c  **** 		sprintf(count, "Restart-%d", restartTimer);
 115:../src/GSM.c  **** 		sendData(count,UART0);
 116:../src/GSM.c  **** 		sendData("\r\n",UART0);
 117:../src/GSM.c  **** 
 118:../src/GSM.c  **** 		if (restartTimer <= 4) restartTimer++;
 119:../src/GSM.c  **** 		else restart = 0;
 120:../src/GSM.c  **** 		GSM_ON = 1;
 121:../src/GSM.c  **** 	}
 122:../src/GSM.c  **** 	else{
 123:../src/GSM.c  **** 		GSM_ON = 0;
 124:../src/GSM.c  **** 		//gsmState = 1;
 125:../src/GSM.c  **** 	}*/
 126:../src/GSM.c  **** 	errorTimer++;
 284                             		.loc 1 126 0
 285 00b1 AF 00 00                		movw	ax, !_errorTimer
 286 00b4 BD F0                   		movw	r8, ax
 287 00b6 A6 F0                   		incw	r8
 288 00b8 AD F0                   		movw	ax, r8
 289 00ba BF 00 00                		movw	!_errorTimer, ax
 127:../src/GSM.c  **** 	switch (gsmState){
 290                             		.loc 1 127 0
 291 00bd AF 00 00                		movw	ax, !_gsmState
 292 00c0 BD F0                   		movw	r8, ax
 293 00c2 B6 F0                   		decw	r8
 294 00c4 AD F0                   		movw	ax, r8
 295 00c6 44 15 00                		cmpw	ax, #21
 296 00c9 61 F3                   		 sknh
 297 00cb EC 53 04 00             		 br	!!.L37
 298 00cf AD F0                   		movw	ax, r8
 299 00d1 01                      		addw	ax, ax
 300 00d2 04 A6 01                		addw	ax, #.L5
 301 00d5 16                      		movw	hl, ax
 302 00d6 AB                      		movw	ax, [hl]
 303 00d7 61 CB                   		br	ax
 304                             		.section	.rodata
 305 01a5 00                      		.balign 2
 306                             		; Jump Table Begin
 307                             	.L5:
 308 01a6 D9 00                   		.hword	%code(.L4)
 309 01a8 F5 00                   		.hword	%code(.L6)
 310 01aa 1F 01                   		.hword	%code(.L7)
 311 01ac 6B 01                   		.hword	%code(.L8)
 312 01ae 81 01                   		.hword	%code(.L9)
 313 01b0 9B 01                   		.hword	%code(.L10)
 314 01b2 B1 01                   		.hword	%code(.L11)
 315 01b4 E1 01                   		.hword	%code(.L12)
 316 01b6 FD 01                   		.hword	%code(.L13)
 317 01b8 15 02                   		.hword	%code(.L14)
 318 01ba 4D 02                   		.hword	%code(.L15)
 319 01bc 61 02                   		.hword	%code(.L16)
 320 01be 95 02                   		.hword	%code(.L17)
 321 01c0 C3 02                   		.hword	%code(.L18)
 322 01c2 D7 02                   		.hword	%code(.L19)
 323 01c4 ED 02                   		.hword	%code(.L20)
 324 01c6 01 03                   		.hword	%code(.L21)
 325 01c8 2C 03                   		.hword	%code(.L22)
 326 01ca 53 04                   		.hword	%code(.L37)
 327 01cc 40 03                   		.hword	%code(.L23)
 328 01ce E2 03                   		.hword	%code(.L24)
 329 01d0 16 04                   		.hword	%code(.L25)
 330                             		; Jump Table End
 331                             	.text
 332                             	.L4:
 333                             	.LBB2:
 128:../src/GSM.c  **** 
 129:../src/GSM.c  **** 	case 1:
 130:../src/GSM.c  **** 		//smsFlags.send = 1;	//test sms function
 131:../src/GSM.c  **** 		sendData("Search\r\n",UART0);
 334                             		.loc 1 131 0
 335 00d9 30 03 00                		movw	ax, #.LC1
 336 00dc B8 00                   		movw	[sp], ax
 337 00de F6                      		clrw	ax
 338 00df B8 02                   		movw	[sp+2], ax
 339 00e1 FC 00 00 00             		call	!!%code(_sendData)
 132:../src/GSM.c  **** 		sendData("AT+CREG?\r\n",UART1);
 340                             		.loc 1 132 0
 341 00e5 30 0C 00                		movw	ax, #.LC2
 342 00e8 B8 00                   		movw	[sp], ax
 343 00ea E6                      		onew	ax
 344 00eb B8 02                   		movw	[sp+2], ax
 345 00ed FC 00 00 00             		call	!!%code(_sendData)
 133:../src/GSM.c  **** 
 134:../src/GSM.c  **** 		break;
 346                             		.loc 1 134 0
 347 00f1 EC 54 04 00             		br	!!.L26
 348                             	.L6:
 135:../src/GSM.c  **** 	case 2:
 136:../src/GSM.c  **** 		sendData("SMS config\r\n",UART0);
 349                             		.loc 1 136 0
 350 00f5 30 17 00                		movw	ax, #.LC3
 351 00f8 B8 00                   		movw	[sp], ax
 352 00fa F6                      		clrw	ax
 353 00fb B8 02                   		movw	[sp+2], ax
 354 00fd FC 00 00 00             		call	!!%code(_sendData)
 137:../src/GSM.c  **** 		sendData("AT+CMGF=1\r\n",UART1);
 355                             		.loc 1 137 0
 356 0101 30 24 00                		movw	ax, #.LC4
 357 0104 B8 00                   		movw	[sp], ax
 358 0106 E6                      		onew	ax
 359 0107 B8 02                   		movw	[sp+2], ax
 360 0109 FC 00 00 00             		call	!!%code(_sendData)
 138:../src/GSM.c  **** 		smsFlags.config = 1;
 361                             		.loc 1 138 0
 362 010d E6                      		onew	ax
 363 010e BF 00 00                		movw	!_smsFlags+2, ax
 139:../src/GSM.c  **** 		smsFlags.signal = 1;
 364                             		.loc 1 139 0
 365 0111 E6                      		onew	ax
 366 0112 BF 00 00                		movw	!_smsFlags, ax
 140:../src/GSM.c  **** 		gsmState = 3;
 367                             		.loc 1 140 0
 368 0115 30 03 00                		movw	ax, #3
 369 0118 BF 00 00                		movw	!_gsmState, ax
 141:../src/GSM.c  **** 		break;
 370                             		.loc 1 141 0
 371 011b EC 54 04 00             		br	!!.L26
 372                             	.L7:
 142:../src/GSM.c  **** 	case 3:
 143:../src/GSM.c  **** 		sendData("AT+CGDCONT=1,\"IP\",\"INTERNET\"\r\n",UART1);
 373                             		.loc 1 143 0
 374 011f 30 30 00                		movw	ax, #.LC5
 375 0122 B8 00                   		movw	[sp], ax
 376 0124 E6                      		onew	ax
 377 0125 B8 02                   		movw	[sp+2], ax
 378 0127 FC 00 00 00             		call	!!%code(_sendData)
 144:../src/GSM.c  **** 		strcpy(gsmInfo.url,"www.google.com");
 379                             		.loc 1 144 0
 380 012b 30 77 77                		movw	ax, #30583
 381 012e BF 00 00                		movw	!_gsmInfo, ax
 382 0131 30 77 2E                		movw	ax, #11895
 383 0134 BF 00 00                		movw	!_gsmInfo+2, ax
 384 0137 30 67 6F                		movw	ax, #28519
 385 013a BF 00 00                		movw	!_gsmInfo+4, ax
 386 013d 30 6F 67                		movw	ax, #26479
 387 0140 BF 00 00                		movw	!_gsmInfo+6, ax
 388 0143 30 6C 65                		movw	ax, #25964
 389 0146 BF 00 00                		movw	!_gsmInfo+8, ax
 390 0149 30 2E 63                		movw	ax, #25390
 391 014c BF 00 00                		movw	!_gsmInfo+10, ax
 392 014f 30 6F 6D                		movw	ax, #28015
 393 0152 BF 00 00                		movw	!_gsmInfo+12, ax
 394 0155 F5 00 00                		clrb	!_gsmInfo+14
 145:../src/GSM.c  **** 		strcpy(gsmInfo.urlport,"80");
 395                             		.loc 1 145 0
 396 0158 30 38 30                		movw	ax, #12344
 397 015b BF 00 00                		movw	!_gsmInfo+30, ax
 398 015e F5 00 00                		clrb	!_gsmInfo+32
 146:../src/GSM.c  **** 		gsmState = 4;
 399                             		.loc 1 146 0
 400 0161 30 04 00                		movw	ax, #4
 401 0164 BF 00 00                		movw	!_gsmState, ax
 147:../src/GSM.c  **** 		break;
 402                             		.loc 1 147 0
 403 0167 EC 54 04 00             		br	!!.L26
 404                             	.L8:
 148:../src/GSM.c  **** 
 149:../src/GSM.c  **** 	case 4:
 150:../src/GSM.c  **** 		sendData("AT+CGDCONT?\r\n",UART1);
 405                             		.loc 1 150 0
 406 016b 30 4F 00                		movw	ax, #.LC6
 407 016e B8 00                   		movw	[sp], ax
 408 0170 E6                      		onew	ax
 409 0171 B8 02                   		movw	[sp+2], ax
 410 0173 FC 00 00 00             		call	!!%code(_sendData)
 151:../src/GSM.c  **** 		gsmState = 5;
 411                             		.loc 1 151 0
 412 0177 30 05 00                		movw	ax, #5
 413 017a BF 00 00                		movw	!_gsmState, ax
 152:../src/GSM.c  **** 		break;
 414                             		.loc 1 152 0
 415 017d EC 54 04 00             		br	!!.L26
 416                             	.L9:
 153:../src/GSM.c  **** 	case 5:
 154:../src/GSM.c  **** 		sendData("AT+CMGL=\"ALL\"\r\n",UART1);
 417                             		.loc 1 154 0
 418 0181 30 5D 00                		movw	ax, #.LC7
 419 0184 B8 00                   		movw	[sp], ax
 420 0186 E6                      		onew	ax
 421 0187 B8 02                   		movw	[sp+2], ax
 422 0189 FC 00 00 00             		call	!!%code(_sendData)
 155:../src/GSM.c  **** 		smsInfo.count = 0;
 423                             		.loc 1 155 0
 424 018d F6                      		clrw	ax
 425 018e BF 00 00                		movw	!_smsInfo+172, ax
 156:../src/GSM.c  **** 		gsmState = 13;		//check signal
 426                             		.loc 1 156 0
 427 0191 30 0D 00                		movw	ax, #13
 428 0194 BF 00 00                		movw	!_gsmState, ax
 157:../src/GSM.c  **** 		break;
 429                             		.loc 1 157 0
 430 0197 EC 54 04 00             		br	!!.L26
 431                             	.L10:
 158:../src/GSM.c  **** 	case 6:
 159:../src/GSM.c  **** 		sendSMS(smsInfo.recMSISDN, smsInfo.build);
 432                             		.loc 1 159 0
 433 019b 30 00 00                		movw	ax, #_smsInfo+4
 434 019e B8 00                   		movw	[sp], ax
 435 01a0 30 00 00                		movw	ax, #_smsInfo+174
 436 01a3 B8 02                   		movw	[sp+2], ax
 437 01a5 FC 00 00 00             		call	!!%code(_sendSMS)
 160:../src/GSM.c  **** 		//sendSMS("0720631005", "TEST");
 161:../src/GSM.c  **** 		gsmState = 0;
 438                             		.loc 1 161 0
 439 01a9 F6                      		clrw	ax
 440 01aa BF 00 00                		movw	!_gsmState, ax
 162:../src/GSM.c  **** 		break;
 441                             		.loc 1 162 0
 442 01ad EC 54 04 00             		br	!!.L26
 443                             	.L11:
 163:../src/GSM.c  **** 	case 7:
 164:../src/GSM.c  **** 		sendData("Insert SMS text\r\n",UART0);
 444                             		.loc 1 164 0
 445 01b1 30 6D 00                		movw	ax, #.LC8
 446 01b4 B8 00                   		movw	[sp], ax
 447 01b6 F6                      		clrw	ax
 448 01b7 B8 02                   		movw	[sp+2], ax
 449 01b9 FC 00 00 00             		call	!!%code(_sendData)
 165:../src/GSM.c  **** 		sendData(SMScontent,UART1);
 450                             		.loc 1 165 0
 451 01bd 30 00 00                		movw	ax, #_SMScontent
 452 01c0 B8 00                   		movw	[sp], ax
 453 01c2 E6                      		onew	ax
 454 01c3 B8 02                   		movw	[sp+2], ax
 455 01c5 FC 00 00 00             		call	!!%code(_sendData)
 166:../src/GSM.c  **** 		//sendByte('1A', UART1);
 167:../src/GSM.c  **** 		sendData("\032\r", UART1);		//1A HEX
 456                             		.loc 1 167 0
 457 01c9 30 7F 00                		movw	ax, #.LC9
 458 01cc B8 00                   		movw	[sp], ax
 459 01ce E6                      		onew	ax
 460 01cf B8 02                   		movw	[sp+2], ax
 461 01d1 FC 00 00 00             		call	!!%code(_sendData)
 168:../src/GSM.c  **** 		smsFlags.reply = 0;
 462                             		.loc 1 168 0
 463 01d5 F6                      		clrw	ax
 464 01d6 BF 00 00                		movw	!_smsFlags+18, ax
 169:../src/GSM.c  **** 		gsmState = 0;
 465                             		.loc 1 169 0
 466 01d9 F6                      		clrw	ax
 467 01da BF 00 00                		movw	!_gsmState, ax
 170:../src/GSM.c  **** 		break;
 468                             		.loc 1 170 0
 469 01dd EC 54 04 00             		br	!!.L26
 470                             	.L12:
 171:../src/GSM.c  **** 	case 8:
 172:../src/GSM.c  **** 		sendData("AT+MIPCALL=1\r\n",UART1);
 471                             		.loc 1 172 0
 472 01e1 30 82 00                		movw	ax, #.LC10
 473 01e4 B8 00                   		movw	[sp], ax
 474 01e6 E6                      		onew	ax
 475 01e7 B8 02                   		movw	[sp+2], ax
 476 01e9 FC 00 00 00             		call	!!%code(_sendData)
 173:../src/GSM.c  **** 		smsFlags.gprsPending = 1;
 477                             		.loc 1 173 0
 478 01ed E6                      		onew	ax
 479 01ee BF 00 00                		movw	!_smsFlags+12, ax
 174:../src/GSM.c  **** 		gsmInfo.socket = 0;
 480                             		.loc 1 174 0
 481 01f1 F6                      		clrw	ax
 482 01f2 BF 00 00                		movw	!_gsmInfo+42, ax
 175:../src/GSM.c  **** 		gsmState = 0;
 483                             		.loc 1 175 0
 484 01f5 F6                      		clrw	ax
 485 01f6 BF 00 00                		movw	!_gsmState, ax
 176:../src/GSM.c  **** 		//gsmState = 10;
 177:../src/GSM.c  **** 		break;
 486                             		.loc 1 177 0
 487 01f9 EC 54 04 00             		br	!!.L26
 488                             	.L13:
 178:../src/GSM.c  **** 	case 9:
 179:../src/GSM.c  **** 		sendData("AT+MIPCALL=0\r\n",UART1);
 489                             		.loc 1 179 0
 490 01fd 30 91 00                		movw	ax, #.LC11
 491 0200 B8 00                   		movw	[sp], ax
 492 0202 E6                      		onew	ax
 493 0203 B8 02                   		movw	[sp+2], ax
 494 0205 FC 00 00 00             		call	!!%code(_sendData)
 180:../src/GSM.c  **** 		smsFlags.gprsActive = 0;
 495                             		.loc 1 180 0
 496 0209 F6                      		clrw	ax
 497 020a BF 00 00                		movw	!_smsFlags+14, ax
 181:../src/GSM.c  **** 		gsmState = 0;
 498                             		.loc 1 181 0
 499 020d F6                      		clrw	ax
 500 020e BF 00 00                		movw	!_gsmState, ax
 182:../src/GSM.c  **** 		break;
 501                             		.loc 1 182 0
 502 0211 EC 54 04 00             		br	!!.L26
 503                             	.L14:
 183:../src/GSM.c  **** 	case 10:
 184:../src/GSM.c  **** 		//sendData("AT+MIPOPEN=1,10,\"139.130.4.5\",80,0\r\n",UART1);		//connect to remote server
 185:../src/GSM.c  **** 		if (gsmInfo.socket == 0) sendData("AT+MIPOPEN=1,10,\"216.58.223.4\",80,0\r\n",UART1);		//connect 
 504                             		.loc 1 185 0
 505 0215 AF 00 00                		movw	ax, !_gsmInfo+42
 506 0218 BD F0                   		movw	r8, ax
 507 021a 44 00 00                		cmpw	ax, #0
 508 021d 61 E8                   		 skz
 509 021f EC 33 02 00             		 br	!!.L27
 510                             		.loc 1 185 0 is_stmt 0 discriminator 1
 511 0223 30 A0 00                		movw	ax, #.LC12
 512 0226 B8 00                   		movw	[sp], ax
 513 0228 E6                      		onew	ax
 514 0229 B8 02                   		movw	[sp+2], ax
 515 022b FC 00 00 00             		call	!!%code(_sendData)
 516 022f EC 3F 02 00             		br	!!.L28
 517                             	.L27:
 186:../src/GSM.c  **** 		else sendData("Socket open\r\n",UART1);
 518                             		.loc 1 186 0 is_stmt 1
 519 0233 30 C6 00                		movw	ax, #.LC13
 520 0236 B8 00                   		movw	[sp], ax
 521 0238 E6                      		onew	ax
 522 0239 B8 02                   		movw	[sp+2], ax
 523 023b FC 00 00 00             		call	!!%code(_sendData)
 524                             	.L28:
 187:../src/GSM.c  **** 		//sendData("AT+MIPOPEN=?\r\n",UART1);
 188:../src/GSM.c  **** 		//gsmState = 11;
 189:../src/GSM.c  **** 		gsmState = 16;
 525                             		.loc 1 189 0
 526 023f 30 10 00                		movw	ax, #16
 527 0242 BF 00 00                		movw	!_gsmState, ax
 190:../src/GSM.c  **** 		gsmState = 0;
 528                             		.loc 1 190 0
 529 0245 F6                      		clrw	ax
 530 0246 BF 00 00                		movw	!_gsmState, ax
 191:../src/GSM.c  **** 		break;
 531                             		.loc 1 191 0
 532 0249 EC 54 04 00             		br	!!.L26
 533                             	.L15:
 192:../src/GSM.c  **** 	case 11:
 193:../src/GSM.c  **** 		sendData("AT+MIPCLOSE=1\r\n",UART1);
 534                             		.loc 1 193 0
 535 024d 30 D4 00                		movw	ax, #.LC14
 536 0250 B8 00                   		movw	[sp], ax
 537 0252 E6                      		onew	ax
 538 0253 B8 02                   		movw	[sp+2], ax
 539 0255 FC 00 00 00             		call	!!%code(_sendData)
 194:../src/GSM.c  **** 		gsmState = 0;
 540                             		.loc 1 194 0
 541 0259 F6                      		clrw	ax
 542 025a BF 00 00                		movw	!_gsmState, ax
 195:../src/GSM.c  **** 		break;
 543                             		.loc 1 195 0
 544 025d EC 54 04 00             		br	!!.L26
 545                             	.L16:
 196:../src/GSM.c  **** 	case 12:
 197:../src/GSM.c  **** 		smsFlags.send = 1;
 546                             		.loc 1 197 0
 547 0261 E6                      		onew	ax
 548 0262 BF 00 00                		movw	!_smsFlags+4, ax
 198:../src/GSM.c  **** 		sendData("AT+CMGD=",UART1);
 549                             		.loc 1 198 0
 550 0265 30 E4 00                		movw	ax, #.LC15
 551 0268 B8 00                   		movw	[sp], ax
 552 026a E6                      		onew	ax
 553 026b B8 02                   		movw	[sp+2], ax
 554 026d FC 00 00 00             		call	!!%code(_sendData)
 199:../src/GSM.c  **** 		sendData(smsInfo.index,UART1);
 555                             		.loc 1 199 0
 556 0271 30 00 00                		movw	ax, #_smsInfo
 557 0274 B8 00                   		movw	[sp], ax
 558 0276 E6                      		onew	ax
 559 0277 B8 02                   		movw	[sp+2], ax
 560 0279 FC 00 00 00             		call	!!%code(_sendData)
 200:../src/GSM.c  **** 		//sendData("4",UART1);
 201:../src/GSM.c  **** 		sendData("\r\n",UART1);
 561                             		.loc 1 201 0
 562 027d 30 ED 00                		movw	ax, #.LC16
 563 0280 B8 00                   		movw	[sp], ax
 564 0282 E6                      		onew	ax
 565 0283 B8 02                   		movw	[sp+2], ax
 566 0285 FC 00 00 00             		call	!!%code(_sendData)
 202:../src/GSM.c  **** 		smsFlags.del = 0;
 567                             		.loc 1 202 0
 568 0289 F6                      		clrw	ax
 569 028a BF 00 00                		movw	!_smsFlags+16, ax
 203:../src/GSM.c  **** 		gsmState = 0;
 570                             		.loc 1 203 0
 571 028d F6                      		clrw	ax
 572 028e BF 00 00                		movw	!_gsmState, ax
 204:../src/GSM.c  **** 		break;
 573                             		.loc 1 204 0
 574 0291 EC 54 04 00             		br	!!.L26
 575                             	.L17:
 205:../src/GSM.c  **** 	case 13:
 206:../src/GSM.c  **** 		sendData("AT+CSQ?\r\n",UART1);
 576                             		.loc 1 206 0
 577 0295 30 F0 00                		movw	ax, #.LC17
 578 0298 B8 00                   		movw	[sp], ax
 579 029a E6                      		onew	ax
 580 029b B8 02                   		movw	[sp+2], ax
 581 029d FC 00 00 00             		call	!!%code(_sendData)
 207:../src/GSM.c  **** 		if (smsFlags.gprsActive == 0) gsmState = 8;
 582                             		.loc 1 207 0
 583 02a1 AF 00 00                		movw	ax, !_smsFlags+14
 584 02a4 BD F0                   		movw	r8, ax
 585 02a6 44 00 00                		cmpw	ax, #0
 586 02a9 61 E8                   		 skz
 587 02ab EC B9 02 00             		 br	!!.L29
 588                             		.loc 1 207 0 is_stmt 0 discriminator 1
 589 02af 30 08 00                		movw	ax, #8
 590 02b2 BF 00 00                		movw	!_gsmState, ax
 208:../src/GSM.c  **** 		else gsmState = 10;
 209:../src/GSM.c  **** 		//buildInfo();
 210:../src/GSM.c  **** 		break;
 591                             		.loc 1 210 0 is_stmt 1 discriminator 1
 592 02b5 EC 54 04 00             		br	!!.L26
 593                             	.L29:
 208:../src/GSM.c  **** 		else gsmState = 10;
 594                             		.loc 1 208 0
 595 02b9 30 0A 00                		movw	ax, #10
 596 02bc BF 00 00                		movw	!_gsmState, ax
 597                             		.loc 1 210 0
 598 02bf EC 54 04 00             		br	!!.L26
 599                             	.L18:
 211:../src/GSM.c  **** 	case 14:
 212:../src/GSM.c  **** 		sendData("AT+MIPOPEN=1,1100,\"0.0.0.0\",0,1\r\n",UART1);	//listen for incoming connections
 600                             		.loc 1 212 0
 601 02c3 30 FA 00                		movw	ax, #.LC18
 602 02c6 B8 00                   		movw	[sp], ax
 603 02c8 E6                      		onew	ax
 604 02c9 B8 02                   		movw	[sp+2], ax
 605 02cb FC 00 00 00             		call	!!%code(_sendData)
 213:../src/GSM.c  **** 		//sendData("AT+MIPOPEN=?\r\n",UART1);
 214:../src/GSM.c  **** 		gsmState = 0;
 606                             		.loc 1 214 0
 607 02cf F6                      		clrw	ax
 608 02d0 BF 00 00                		movw	!_gsmState, ax
 215:../src/GSM.c  **** 		break;
 609                             		.loc 1 215 0
 610 02d3 EC 54 04 00             		br	!!.L26
 611                             	.L19:
 216:../src/GSM.c  **** 	case 15:
 217:../src/GSM.c  **** 		sendData("AT+MIPSETS=1,200\r\n",UART1);	//listen for incoming connections
 612                             		.loc 1 217 0
 613 02d7 30 1C 01                		movw	ax, #.LC19
 614 02da B8 00                   		movw	[sp], ax
 615 02dc E6                      		onew	ax
 616 02dd B8 02                   		movw	[sp+2], ax
 617 02df FC 00 00 00             		call	!!%code(_sendData)
 218:../src/GSM.c  **** 		//sendData("AT+MIPOPEN=?\r\n",UART1);
 219:../src/GSM.c  **** 		gsmState = 16;
 618                             		.loc 1 219 0
 619 02e3 30 10 00                		movw	ax, #16
 620 02e6 BF 00 00                		movw	!_gsmState, ax
 220:../src/GSM.c  **** 		break;
 621                             		.loc 1 220 0
 622 02e9 EC 54 04 00             		br	!!.L26
 623                             	.L20:
 221:../src/GSM.c  **** 	case 16:
 222:../src/GSM.c  **** 		sendData("AT+MIPOPEN?\r\n",UART1);	//listen for incoming connections
 624                             		.loc 1 222 0
 625 02ed 30 2F 01                		movw	ax, #.LC20
 626 02f0 B8 00                   		movw	[sp], ax
 627 02f2 E6                      		onew	ax
 628 02f3 B8 02                   		movw	[sp+2], ax
 629 02f5 FC 00 00 00             		call	!!%code(_sendData)
 223:../src/GSM.c  **** 		//sendData("AT+MIPOPEN=?\r\n",UART1);
 224:../src/GSM.c  **** 		gsmState = 0;
 630                             		.loc 1 224 0
 631 02f9 F6                      		clrw	ax
 632 02fa BF 00 00                		movw	!_gsmState, ax
 225:../src/GSM.c  **** 		break;
 633                             		.loc 1 225 0
 634 02fd EC 54 04 00             		br	!!.L26
 635                             	.L21:
 226:../src/GSM.c  **** 	case 17:
 227:../src/GSM.c  **** 		//sendData("AT+MIPSEND=1,\"HEAD / HTTP/1.1\"\r\n",UART1);	//listen for incoming connections
 228:../src/GSM.c  **** 		//sendData("AT+MIPSEND=1,\"444456\"\r\n",UART1);	//listen for incoming connections
 229:../src/GSM.c  **** 
 230:../src/GSM.c  **** 		//char temp[60];
 231:../src/GSM.c  **** 		//strcpy(sendGPRS,"AT+MIPSEND=1,\"");
 232:../src/GSM.c  **** 		//strcat(sendGPRS,(char*)GPRSresult);
 233:../src/GSM.c  **** 		//strcat(sendGPRS,"\"\r\n");
 234:../src/GSM.c  **** 		//sendData(sendGPRS,UART1);
 235:../src/GSM.c  **** 		sendData("AT+MIPSEND=1,\"",UART1);
 636                             		.loc 1 235 0
 637 0301 30 3D 01                		movw	ax, #.LC21
 638 0304 B8 00                   		movw	[sp], ax
 639 0306 E6                      		onew	ax
 640 0307 B8 02                   		movw	[sp+2], ax
 641 0309 FC 00 00 00             		call	!!%code(_sendData)
 236:../src/GSM.c  **** 		//sendData(GPRSresult,UART1);
 237:../src/GSM.c  **** 		GPRS_Send("GET / HTTP/1.1");
 642                             		.loc 1 237 0
 643 030d 30 4C 01                		movw	ax, #.LC22
 644 0310 B8 00                   		movw	[sp], ax
 645 0312 FC 00 00 00             		call	!!%code(_GPRS_Send)
 238:../src/GSM.c  **** 		sendData("\"\r\n",UART1);
 646                             		.loc 1 238 0
 647 0316 30 5B 01                		movw	ax, #.LC23
 648 0319 B8 00                   		movw	[sp], ax
 649 031b E6                      		onew	ax
 650 031c B8 02                   		movw	[sp+2], ax
 651 031e FC 00 00 00             		call	!!%code(_sendData)
 239:../src/GSM.c  **** 		//sendData("AT+MIPOPEN=?\r\n",UART1);
 240:../src/GSM.c  **** 		gsmState = 18;
 652                             		.loc 1 240 0
 653 0322 30 12 00                		movw	ax, #18
 654 0325 BF 00 00                		movw	!_gsmState, ax
 241:../src/GSM.c  **** 		break;
 655                             		.loc 1 241 0
 656 0328 EC 54 04 00             		br	!!.L26
 657                             	.L22:
 242:../src/GSM.c  **** 	case 18:
 243:../src/GSM.c  **** 		sendData("AT+MIPPUSH=1\r\n",UART1);	//listen for incoming connections
 658                             		.loc 1 243 0
 659 032c 30 5F 01                		movw	ax, #.LC24
 660 032f B8 00                   		movw	[sp], ax
 661 0331 E6                      		onew	ax
 662 0332 B8 02                   		movw	[sp+2], ax
 663 0334 FC 00 00 00             		call	!!%code(_sendData)
 244:../src/GSM.c  **** 		//sendData("AT+MIPOPEN=?\r\n",UART1);
 245:../src/GSM.c  **** 		gsmState = 0;
 664                             		.loc 1 245 0
 665 0338 F6                      		clrw	ax
 666 0339 BF 00 00                		movw	!_gsmState, ax
 246:../src/GSM.c  **** 		break;
 667                             		.loc 1 246 0
 668 033c EC 54 04 00             		br	!!.L26
 669                             	.L23:
 247:../src/GSM.c  **** 	case 20:
 248:../src/GSM.c  **** 		sendData("GSM power off\r\n",UART0);
 670                             		.loc 1 248 0
 671 0340 30 6E 01                		movw	ax, #.LC25
 672 0343 B8 00                   		movw	[sp], ax
 673 0345 F6                      		clrw	ax
 674 0346 B8 02                   		movw	[sp+2], ax
 675 0348 FC 00 00 00             		call	!!%code(_sendData)
 249:../src/GSM.c  **** 		GSM_PWR = 0;
 676                             		.loc 1 249 0
 677 034c C9 F0 0E FF             		movw	r8, #-242
 678 0350 AD F0                   		movw	ax, r8
 679 0352 BD F2                   		movw	r10, ax
 680 0354 FA F2                   		movw	hl, r10
 681 0356 71 F3                   		clr1	[hl].7 ;insvmisalignqi [hl],#1,#7,#0 {0}
 250:../src/GSM.c  **** 		GSM_ON = 1;
 682                             		.loc 1 250 0
 683 0358 C9 F0 02 FF             		movw	r8, #-254
 684 035c AD F0                   		movw	ax, r8
 685 035e BD F2                   		movw	r10, ax
 686 0360 FA F2                   		movw	hl, r10
 687 0362 71 92                   		set1	[hl].1 ;insvmisalignqi [hl],#1,#1,#1 {0}
 251:../src/GSM.c  **** 		smsFlags.config = 0;
 688                             		.loc 1 251 0
 689 0364 F6                      		clrw	ax
 690 0365 BF 00 00                		movw	!_smsFlags+2, ax
 252:../src/GSM.c  **** 		sprintf(count, "Restart-%d", restartTimer);
 691                             		.loc 1 252 0
 692 0368 AF 00 00                		movw	ax, !_restartTimer
 693 036b BD F0                   		movw	r8, ax
 694 036d C9 F2 16 00             		movw	r10, #22
 695 0371 AE F8                   		movw	ax, sp
 696 0373 BD F2                   		movw	r10, ax
 697 0375 04 16 00                		addw	ax, #22
 698 0378 BD F2                   		movw	r10, ax
 699 037a 04 F1 FF                		addw	ax, #-15
 700 037d B8 00                   		movw	[sp], ax
 701 037f 30 7E 01                		movw	ax, #.LC26
 702 0382 B8 02                   		movw	[sp+2], ax
 703 0384 AD F0                   		movw	ax, r8
 704 0386 B8 04                   		movw	[sp+4], ax
 705 0388 FC 00 00 00             		call	!!%code(_sprintf)
 253:../src/GSM.c  **** 		sendData(count,UART0);
 706                             		.loc 1 253 0
 707 038c C9 F0 16 00             		movw	r8, #22
 708 0390 AE F8                   		movw	ax, sp
 709 0392 BD F0                   		movw	r8, ax
 710 0394 04 16 00                		addw	ax, #22
 711 0397 BD F0                   		movw	r8, ax
 712 0399 04 F1 FF                		addw	ax, #-15
 713 039c B8 00                   		movw	[sp], ax
 714 039e F6                      		clrw	ax
 715 039f B8 02                   		movw	[sp+2], ax
 716 03a1 FC 00 00 00             		call	!!%code(_sendData)
 254:../src/GSM.c  **** 		sendData("\r\n",UART0);
 717                             		.loc 1 254 0
 718 03a5 30 ED 00                		movw	ax, #.LC16
 719 03a8 B8 00                   		movw	[sp], ax
 720 03aa F6                      		clrw	ax
 721 03ab B8 02                   		movw	[sp+2], ax
 722 03ad FC 00 00 00             		call	!!%code(_sendData)
 255:../src/GSM.c  **** 		restartTimer++;
 723                             		.loc 1 255 0
 724 03b1 AF 00 00                		movw	ax, !_restartTimer
 725 03b4 BD F0                   		movw	r8, ax
 726 03b6 A6 F0                   		incw	r8
 727 03b8 AD F0                   		movw	ax, r8
 728 03ba BF 00 00                		movw	!_restartTimer, ax
 256:../src/GSM.c  **** 		if (restartTimer >= 4){
 729                             		.loc 1 256 0
 730 03bd BD F0                   		movw	r8, ax
 731 03bf 44 03 00                		cmpw	ax, #3
 732 03c2 71 FF                   		 xor1	CY, a.7
 733 03c4 61 E3                   		 skh
 734 03c6 EC DE 03 00             		 br	!!.L31
 257:../src/GSM.c  **** 			restartTimer = 0;
 735                             		.loc 1 257 0
 736 03ca F6                      		clrw	ax
 737 03cb BF 00 00                		movw	!_restartTimer, ax
 258:../src/GSM.c  **** 			gsmState++;
 738                             		.loc 1 258 0
 739 03ce AF 00 00                		movw	ax, !_gsmState
 740 03d1 BD F0                   		movw	r8, ax
 741 03d3 A6 F0                   		incw	r8
 742 03d5 AD F0                   		movw	ax, r8
 743 03d7 BF 00 00                		movw	!_gsmState, ax
 259:../src/GSM.c  **** 		}
 260:../src/GSM.c  **** 		break;
 744                             		.loc 1 260 0
 745 03da EC 54 04 00             		br	!!.L26
 746                             	.L31:
 747 03de EC 54 04 00             		br	!!.L26
 748                             	.L24:
 261:../src/GSM.c  **** 	case 21:
 262:../src/GSM.c  **** 		sendData("GSM power on\r\n",UART0);
 749                             		.loc 1 262 0
 750 03e2 30 89 01                		movw	ax, #.LC27
 751 03e5 B8 00                   		movw	[sp], ax
 752 03e7 F6                      		clrw	ax
 753 03e8 B8 02                   		movw	[sp+2], ax
 754 03ea FC 00 00 00             		call	!!%code(_sendData)
 263:../src/GSM.c  **** 		GSM_PWR = 1;
 755                             		.loc 1 263 0
 756 03ee C9 F0 0E FF             		movw	r8, #-242
 757 03f2 AD F0                   		movw	ax, r8
 758 03f4 BD F2                   		movw	r10, ax
 759 03f6 FA F2                   		movw	hl, r10
 760 03f8 71 F2                   		set1	[hl].7 ;insvmisalignqi [hl],#1,#7,#1 {0}
 264:../src/GSM.c  **** 		gsmState++;
 761                             		.loc 1 264 0
 762 03fa AF 00 00                		movw	ax, !_gsmState
 763 03fd BD F0                   		movw	r8, ax
 764 03ff A6 F0                   		incw	r8
 765 0401 AD F0                   		movw	ax, r8
 766 0403 BF 00 00                		movw	!_gsmState, ax
 265:../src/GSM.c  **** 		smsFlags.restartCount++;
 767                             		.loc 1 265 0
 768 0406 AF 00 00                		movw	ax, !_smsFlags+20
 769 0409 BD F0                   		movw	r8, ax
 770 040b A6 F0                   		incw	r8
 771 040d AD F0                   		movw	ax, r8
 772 040f BF 00 00                		movw	!_smsFlags+20, ax
 266:../src/GSM.c  **** 		break;
 773                             		.loc 1 266 0
 774 0412 EC 54 04 00             		br	!!.L26
 775                             	.L25:
 267:../src/GSM.c  **** 	case 22:
 268:../src/GSM.c  **** 		sendData("GSM enable\r\n",UART0);
 776                             		.loc 1 268 0
 777 0416 30 98 01                		movw	ax, #.LC28
 778 0419 B8 00                   		movw	[sp], ax
 779 041b F6                      		clrw	ax
 780 041c B8 02                   		movw	[sp+2], ax
 781 041e FC 00 00 00             		call	!!%code(_sendData)
 269:../src/GSM.c  **** 		restartTimer++;
 782                             		.loc 1 269 0
 783 0422 AF 00 00                		movw	ax, !_restartTimer
 784 0425 BD F0                   		movw	r8, ax
 785 0427 A6 F0                   		incw	r8
 786 0429 AD F0                   		movw	ax, r8
 787 042b BF 00 00                		movw	!_restartTimer, ax
 270:../src/GSM.c  **** 		if (restartTimer >= 3){
 788                             		.loc 1 270 0
 789 042e BD F0                   		movw	r8, ax
 790 0430 44 02 00                		cmpw	ax, #2
 791 0433 71 FF                   		 xor1	CY, a.7
 792 0435 61 E3                   		 skh
 793 0437 EC 4F 04 00             		 br	!!.L32
 271:../src/GSM.c  **** 			gsmState = 1;
 794                             		.loc 1 271 0
 795 043b E6                      		onew	ax
 796 043c BF 00 00                		movw	!_gsmState, ax
 272:../src/GSM.c  **** 			GSM_ON = 0;
 797                             		.loc 1 272 0
 798 043f C9 F0 02 FF             		movw	r8, #-254
 799 0443 AD F0                   		movw	ax, r8
 800 0445 BD F2                   		movw	r10, ax
 801 0447 FA F2                   		movw	hl, r10
 802 0449 71 93                   		clr1	[hl].1 ;insvmisalignqi [hl],#1,#1,#0 {0}
 273:../src/GSM.c  **** 		}
 274:../src/GSM.c  **** 		break;
 803                             		.loc 1 274 0
 804 044b EC 54 04 00             		br	!!.L26
 805                             	.L32:
 806 044f EC 54 04 00             		br	!!.L26
 807                             	.L37:
 275:../src/GSM.c  **** 	default:
 276:../src/GSM.c  **** 
 277:../src/GSM.c  **** 		break;
 808                             		.loc 1 277 0
 809 0453 00                      		nop
 810                             	.L26:
 811                             	.LBE2:
 278:../src/GSM.c  **** 	}
 279:../src/GSM.c  **** 	//if (gsmInfo.socket == 1) gsmState = 17;		//if context is open send gprs data
 280:../src/GSM.c  **** 
 281:../src/GSM.c  **** 	if (smsFlags.prompt == 1){
 812                             		.loc 1 281 0
 813 0454 AF 00 00                		movw	ax, !_smsFlags+6
 814 0457 BD F0                   		movw	r8, ax
 815 0459 44 01 00                		cmpw	ax, #1
 816 045c 61 E8                   		 skz
 817 045e EC 66 04 00             		 br	!!.L33
 282:../src/GSM.c  **** 
 283:../src/GSM.c  **** 		smsFlags.prompt = 0;
 818                             		.loc 1 283 0
 819 0462 F6                      		clrw	ax
 820 0463 BF 00 00                		movw	!_smsFlags+6, ax
 821                             	.L33:
 284:../src/GSM.c  **** 	}
 285:../src/GSM.c  **** 	if ((gsmTimer < 20)&&(smsFlags.signal == 1)){			//restarts cycle
 822                             		.loc 1 285 0
 823 0466 AF 00 00                		movw	ax, !_gsmTimer
 824 0469 BD F0                   		movw	r8, ax
 825 046b 44 13 00                		cmpw	ax, #19
 826 046e 71 FF                   		 xor1	CY, a.7
 827 0470 61 F3                   		 sknh
 828 0472 EC 94 04 00             		 br	!!.L34
 829                             		.loc 1 285 0 is_stmt 0 discriminator 1
 830 0476 AF 00 00                		movw	ax, !_smsFlags
 831 0479 BD F0                   		movw	r8, ax
 832 047b 44 01 00                		cmpw	ax, #1
 833 047e 61 E8                   		 skz
 834 0480 EC 94 04 00             		 br	!!.L34
 286:../src/GSM.c  **** 		gsmTimer++;
 835                             		.loc 1 286 0 is_stmt 1
 836 0484 AF 00 00                		movw	ax, !_gsmTimer
 837 0487 BD F0                   		movw	r8, ax
 838 0489 A6 F0                   		incw	r8
 839 048b AD F0                   		movw	ax, r8
 840 048d BF 00 00                		movw	!_gsmTimer, ax
 841 0490 EC AC 04 00             		br	!!.L35
 842                             	.L34:
 287:../src/GSM.c  **** 	}
 288:../src/GSM.c  **** 	else {
 289:../src/GSM.c  **** 		gsmTimer = 0;
 843                             		.loc 1 289 0
 844 0494 F6                      		clrw	ax
 845 0495 BF 00 00                		movw	!_gsmTimer, ax
 290:../src/GSM.c  **** 		if (smsFlags.config == 1) gsmState = 5;
 846                             		.loc 1 290 0
 847 0498 AF 00 00                		movw	ax, !_smsFlags+2
 848 049b BD F0                   		movw	r8, ax
 849 049d 44 01 00                		cmpw	ax, #1
 850 04a0 61 E8                   		 skz
 851 04a2 EC AC 04 00             		 br	!!.L35
 852                             		.loc 1 290 0 is_stmt 0 discriminator 1
 853 04a6 30 05 00                		movw	ax, #5
 854 04a9 BF 00 00                		movw	!_gsmState, ax
 855                             	.L35:
 291:../src/GSM.c  **** 	}
 292:../src/GSM.c  **** 	if (errorTimer >= 55){
 856                             		.loc 1 292 0 is_stmt 1
 857 04ac AF 00 00                		movw	ax, !_errorTimer
 858 04af BD F0                   		movw	r8, ax
 859 04b1 44 36 00                		cmpw	ax, #54
 860 04b4 71 FF                   		 xor1	CY, a.7
 861 04b6 61 E3                   		 skh
 862 04b8 EC C6 04 00             		 br	!!.L2
 293:../src/GSM.c  **** 		errorTimer = 0;
 863                             		.loc 1 293 0
 864 04bc F6                      		clrw	ax
 865 04bd BF 00 00                		movw	!_errorTimer, ax
 294:../src/GSM.c  **** 		//strcpy(smsInfo.recMSISDN,"0720631005");
 295:../src/GSM.c  **** 		//buildInfo();
 296:../src/GSM.c  **** 		//smsFlags.send = 1;
 297:../src/GSM.c  **** 		//restart = 1;
 298:../src/GSM.c  **** 		//restartTimer = 0;
 299:../src/GSM.c  **** 		gsmState = 20;
 866                             		.loc 1 299 0
 867 04c0 30 14 00                		movw	ax, #20
 868 04c3 BF 00 00                		movw	!_gsmState, ax
 869                             	.L2:
 300:../src/GSM.c  **** 	}
 301:../src/GSM.c  **** }
 870                             		.loc 1 301 0
 871 04c6 10 16                   		addw	sp, #22
 872 04c8 D7                      		ret
 873                             	.LFE1:
 875                             		.global	_sendData
 877                             	_sendData:
 878                             	.LFB2:
 302:../src/GSM.c  **** 
 303:../src/GSM.c  **** void sendData(char* str,Comms d){
 879                             		.loc 1 303 0
 880                             		; start of function
 881                             		; outgoing: 4 bytes
 882 04c9 20 04                   		subw	sp, #4
 883                             	.LCFI2:
 304:../src/GSM.c  **** 	//int length;
 305:../src/GSM.c  **** 	//length = strlen(str);
 306:../src/GSM.c  **** 	//R_UART1_Send(str, length);
 307:../src/GSM.c  **** 	while (* str != 0){
 884                             		.loc 1 307 0
 885 04cb EC EB 04 00             		br	!!.L39
 886                             	.L40:
 308:../src/GSM.c  **** 		sendByte(* str, d);
 887                             		.loc 1 308 0
 888 04cf A8 08                   		movw	ax, [sp+8]
 889 04d1 BD F0                   		movw	r8, ax
 890 04d3 BD F2                   		movw	r10, ax
 891 04d5 FA F2                   		movw	hl, r10
 892 04d7 8B                      		mov	a, [hl]
 893 04d8 9D F0                   		mov	r8, a
 894 04da 98 00                   		mov	[sp], a
 895 04dc A8 0A                   		movw	ax, [sp+10]
 896 04de BD F0                   		movw	r8, ax
 897 04e0 B8 02                   		movw	[sp+2], ax
 898 04e2 FC 00 00 00             		call	!!%code(_sendByte)
 309:../src/GSM.c  **** 		str++;
 899                             		.loc 1 309 0
 900 04e6 A8 08                   		movw	ax, [sp+8]
 901 04e8 A1                      		incw	ax
 902 04e9 B8 08                   		movw	[sp+8], ax
 903                             	.L39:
 307:../src/GSM.c  **** 		sendByte(* str, d);
 904                             		.loc 1 307 0
 905 04eb A8 08                   		movw	ax, [sp+8]
 906 04ed BD F0                   		movw	r8, ax
 907 04ef BD F2                   		movw	r10, ax
 908 04f1 FA F2                   		movw	hl, r10
 909 04f3 8B                      		mov	a, [hl]
 910 04f4 9D F0                   		mov	r8, a
 911 04f6 D4 F0                   		cmp0	r8
 912 04f8 61 E8                   		 skz
 913 04fa EC CF 04 00             		 br	!!.L40
 310:../src/GSM.c  **** 	}
 311:../src/GSM.c  **** }
 914                             		.loc 1 311 0
 915 04fe 10 04                   		addw	sp, #4
 916 0500 D7                      		ret
 917                             	.LFE2:
 919                             		.global	_tx0Done
 921                             	_tx0Done:
 922                             	.LFB3:
 312:../src/GSM.c  **** void tx0Done(){
 923                             		.loc 1 312 0
 313:../src/GSM.c  **** 	intFlag0 = 1;
 924                             		.loc 1 313 0
 925 0501 E6                      		onew	ax
 926 0502 BF 00 00                		movw	!_intFlag0, ax
 314:../src/GSM.c  **** }
 927                             		.loc 1 314 0
 928 0505 D7                      		ret
 929                             	.LFE3:
 931                             		.global	_tx1Done
 933                             	_tx1Done:
 934                             	.LFB4:
 315:../src/GSM.c  **** 
 316:../src/GSM.c  **** void tx1Done(){
 935                             		.loc 1 316 0
 317:../src/GSM.c  **** 	intFlag1 = 1;
 936                             		.loc 1 317 0
 937 0506 E6                      		onew	ax
 938 0507 BF 00 00                		movw	!_intFlag1, ax
 318:../src/GSM.c  **** }
 939                             		.loc 1 318 0
 940 050a D7                      		ret
 941                             	.LFE4:
 943                             		.global	_sendByte
 945                             	_sendByte:
 946                             	.LFB5:
 319:../src/GSM.c  **** 
 320:../src/GSM.c  **** void sendByte(char send, Comms in){
 947                             		.loc 1 320 0
 321:../src/GSM.c  **** 	if (in == UART0){
 948                             		.loc 1 321 0
 949 050b A8 06                   		movw	ax, [sp+6]
 950 050d 44 00 00                		cmpw	ax, #0
 951 0510 61 E8                   		 skz
 952 0512 EC 3E 05 00             		 br	!!.L44
 322:../src/GSM.c  **** 		TXD0 = send;
 953                             		.loc 1 322 0
 954 0516 C9 F0 10 FF             		movw	r8, #-240
 955 051a 88 04                   		mov	a, [sp+4]
 956 051c 9D F2                   		mov	r10, a
 957 051e AD F0                   		movw	ax, r8
 958 0520 BD F4                   		movw	r12, ax
 959 0522 EA F4                   		movw	de, r12
 960 0524 8D F2                   		mov	a, r10
 961 0526 99                      		mov	[de], a
 323:../src/GSM.c  **** 		while (intFlag0 != 1);
 962                             		.loc 1 323 0
 963 0527 00                      		nop
 964                             	.L45:
 965                             		.loc 1 323 0 is_stmt 0 discriminator 1
 966 0528 AF 00 00                		movw	ax, !_intFlag0
 967 052b BD F0                   		movw	r8, ax
 968 052d 44 01 00                		cmpw	ax, #1
 969 0530 61 E8                   		 skz
 970 0532 EC 28 05 00             		 br	!!.L45
 324:../src/GSM.c  **** 		intFlag0 = 0;
 971                             		.loc 1 324 0 is_stmt 1
 972 0536 F6                      		clrw	ax
 973 0537 BF 00 00                		movw	!_intFlag0, ax
 974 053a EC 6D 05 00             		br	!!.L43
 975                             	.L44:
 325:../src/GSM.c  **** 	}
 326:../src/GSM.c  **** 	else if (in == UART1){
 976                             		.loc 1 326 0
 977 053e A8 06                   		movw	ax, [sp+6]
 978 0540 44 01 00                		cmpw	ax, #1
 979 0543 61 E8                   		 skz
 980 0545 EC 6D 05 00             		 br	!!.L43
 327:../src/GSM.c  **** 		TXD1 = send;
 981                             		.loc 1 327 0
 982 0549 C9 F0 44 FF             		movw	r8, #-188
 983 054d 88 04                   		mov	a, [sp+4]
 984 054f 9D F2                   		mov	r10, a
 985 0551 AD F0                   		movw	ax, r8
 986 0553 BD F4                   		movw	r12, ax
 987 0555 EA F4                   		movw	de, r12
 988 0557 8D F2                   		mov	a, r10
 989 0559 99                      		mov	[de], a
 328:../src/GSM.c  **** 		while (intFlag1 != 1);
 990                             		.loc 1 328 0
 991 055a 00                      		nop
 992                             	.L47:
 993                             		.loc 1 328 0 is_stmt 0 discriminator 1
 994 055b AF 00 00                		movw	ax, !_intFlag1
 995 055e BD F0                   		movw	r8, ax
 996 0560 44 01 00                		cmpw	ax, #1
 997 0563 61 E8                   		 skz
 998 0565 EC 5B 05 00             		 br	!!.L47
 329:../src/GSM.c  **** 		intFlag1 = 0;
 999                             		.loc 1 329 0 is_stmt 1
 1000 0569 F6                      		clrw	ax
 1001 056a BF 00 00                		movw	!_intFlag1, ax
 1002                             	.L43:
 330:../src/GSM.c  **** 	}
 331:../src/GSM.c  **** }
 1003                             		.loc 1 331 0
 1004 056d D7                      		ret
 1005                             	.LFE5:
 1007                             		.section	.rodata
 1008                             	.LC29:
 1009 01d2 53 65 6E 64 20 53 4D 53 		.string	"Send SMS\r\n"
 1009      0D 0A 00 
 1010                             	.LC30:
 1011 01dd 41 54 2B 43 4D 47 53 3D 		.string	"AT+CMGS=\""
 1011      22 00 
 1012                             	.text
 1013                             		.global	_sendSMS
 1015                             	_sendSMS:
 1016                             	.LFB6:
 332:../src/GSM.c  **** 
 333:../src/GSM.c  **** void sendSMS(char* num, char* msg){
 1017                             		.loc 1 333 0
 1018                             		; start of function
 1019                             		; outgoing: 4 bytes
 1020 056e 20 04                   		subw	sp, #4
 1021                             	.LCFI3:
 334:../src/GSM.c  **** 	if (smsFlags.signal == 0) return;
 1022                             		.loc 1 334 0
 1023 0570 AF 00 00                		movw	ax, !_smsFlags
 1024 0573 BD F0                   		movw	r8, ax
 1025 0575 44 00 00                		cmpw	ax, #0
 1026 0578 61 E8                   		 skz
 1027 057a EC 82 05 00             		 br	!!.L49
 1028 057e EC D8 05 00             		br	!!.L48
 1029                             	.L49:
 335:../src/GSM.c  **** 	if (smsFlags.config == 0) return;
 1030                             		.loc 1 335 0
 1031 0582 AF 00 00                		movw	ax, !_smsFlags+2
 1032 0585 BD F0                   		movw	r8, ax
 1033 0587 44 00 00                		cmpw	ax, #0
 1034 058a 61 E8                   		 skz
 1035 058c EC 94 05 00             		 br	!!.L51
 1036                             		.loc 1 335 0 is_stmt 0 discriminator 2
 1037 0590 EC D8 05 00             		br	!!.L48
 1038                             	.L51:
 336:../src/GSM.c  **** 	//char sms
 337:../src/GSM.c  **** 	sendData("Send SMS\r\n",UART0);
 1039                             		.loc 1 337 0 is_stmt 1
 1040 0594 30 D2 01                		movw	ax, #.LC29
 1041 0597 B8 00                   		movw	[sp], ax
 1042 0599 F6                      		clrw	ax
 1043 059a B8 02                   		movw	[sp+2], ax
 1044 059c FC 00 00 00             		call	!!%code(_sendData)
 338:../src/GSM.c  **** 	sendData("AT+CMGS=\"",UART1);
 1045                             		.loc 1 338 0
 1046 05a0 30 DD 01                		movw	ax, #.LC30
 1047 05a3 B8 00                   		movw	[sp], ax
 1048 05a5 E6                      		onew	ax
 1049 05a6 B8 02                   		movw	[sp+2], ax
 1050 05a8 FC 00 00 00             		call	!!%code(_sendData)
 339:../src/GSM.c  **** 	sendData(num,UART1);
 1051                             		.loc 1 339 0
 1052 05ac A8 08                   		movw	ax, [sp+8]
 1053 05ae BD F0                   		movw	r8, ax
 1054 05b0 B8 00                   		movw	[sp], ax
 1055 05b2 E6                      		onew	ax
 1056 05b3 B8 02                   		movw	[sp+2], ax
 1057 05b5 FC 00 00 00             		call	!!%code(_sendData)
 340:../src/GSM.c  **** 	sendData("\"\r\n",UART1);
 1058                             		.loc 1 340 0
 1059 05b9 30 5B 01                		movw	ax, #.LC23
 1060 05bc B8 00                   		movw	[sp], ax
 1061 05be E6                      		onew	ax
 1062 05bf B8 02                   		movw	[sp+2], ax
 1063 05c1 FC 00 00 00             		call	!!%code(_sendData)
 341:../src/GSM.c  **** 	//sendData("AT+CMGS=\"0720631005\"\r\n",UART1);
 342:../src/GSM.c  **** 	strcpy(SMScontent,msg);
 1064                             		.loc 1 342 0
 1065 05c5 30 00 00                		movw	ax, #_SMScontent
 1066 05c8 B8 00                   		movw	[sp], ax
 1067 05ca A8 0A                   		movw	ax, [sp+10]
 1068 05cc BD F0                   		movw	r8, ax
 1069 05ce B8 02                   		movw	[sp+2], ax
 1070 05d0 FC 00 00 00             		call	!!%code(_strcpy)
 343:../src/GSM.c  **** 	smsFlags.send = 0;
 1071                             		.loc 1 343 0
 1072 05d4 F6                      		clrw	ax
 1073 05d5 BF 00 00                		movw	!_smsFlags+4, ax
 1074                             	.L48:
 344:../src/GSM.c  **** }
 1075                             		.loc 1 344 0
 1076 05d8 10 04                   		addw	sp, #4
 1077 05da D7                      		ret
 1078                             	.LFE6:
 1080                             		.global	_recData
 1082                             	_recData:
 1083                             	.LFB7:
 345:../src/GSM.c  **** 
 346:../src/GSM.c  **** void recData(){
 1084                             		.loc 1 346 0
 1085                             		; start of function
 1086                             		; outgoing: 4 bytes
 1087 05db 20 04                   		subw	sp, #4
 1088                             	.LCFI4:
 347:../src/GSM.c  **** 	P1_bit.no0 ^= 1;
 1089                             		.loc 1 347 0
 1090 05dd C9 F2 01 FF             		movw	r10, #-255
 1091 05e1 C9 F0 01 FF             		movw	r8, #-255
 1092 05e5 AD F0                   		movw	ax, r8
 1093 05e7 BD F4                   		movw	r12, ax
 1094 05e9 FA F4                   		movw	hl, r12
 1095 05eb 8B                      		mov	a, [hl]
 1096 05ec 5C 01                   		and	a, #1 ;extzvmisalignqi a,[hl],#1,#0
 1097 05ee 9D F0                   		mov	r8, a
 1098 05f0 7A F0 01                		xor	r8, #1
 1099 05f3 5A F0 01                		and	r8, #1
 1100 05f6 AD F2                   		movw	ax, r10
 1101 05f8 BD F4                   		movw	r12, ax
 1102 05fa FA F4                   		movw	hl, r12
 1103 05fc 71 04 F0                		mov1	CY, r8.0
 1104 05ff 71 81                   		mov1	[hl].0, CY ;insvmisalignqi [hl],#1,#0,r8 {0}
 348:../src/GSM.c  **** 	while (recBuffPointerWrite != recBuffPointerRead){
 1105                             		.loc 1 348 0
 1106 0601 EC F8 06 00             		br	!!.L53
 1107                             	.L58:
 349:../src/GSM.c  **** 		if (recBuffPointerWrite != recBuffPointerRead){
 1108                             		.loc 1 349 0
 1109 0605 AF 00 00                		movw	ax, !_recBuffPointerWrite
 1110 0608 BD F2                   		movw	r10, ax
 1111 060a AF 00 00                		movw	ax, !_recBuffPointerRead
 1112 060d BD F0                   		movw	r8, ax
 1113 060f AD F2                   		movw	ax, r10
 1114 0611 46 F0                   		cmpw	ax, r8
 1115 0613 61 F8                   		 sknz
 1116 0615 EC F8 06 00             		 br	!!.L53
 350:../src/GSM.c  **** 			procBuff[procBuffpointer] = recBuff[recBuffPointerRead];
 1117                             		.loc 1 350 0
 1118 0619 AF 00 00                		movw	ax, !_procBuffpointer
 1119 061c BD F0                   		movw	r8, ax
 1120 061e AF 00 00                		movw	ax, !_recBuffPointerRead
 1121 0621 BD F2                   		movw	r10, ax
 1122 0623 04 00 00                		addw	ax, #_recBuff
 1123 0626 16                      		movw	hl, ax
 1124 0627 8B                      		mov	a, [hl]
 1125 0628 9D F2                   		mov	r10, a
 1126 062a DA F0                   		movw	bc, r8
 1127 062c 48 00 00                		mov	_procBuff[bc], a
 351:../src/GSM.c  **** 			recBuffPointerRead++;
 1128                             		.loc 1 351 0
 1129 062f AF 00 00                		movw	ax, !_recBuffPointerRead
 1130 0632 BD F0                   		movw	r8, ax
 1131 0634 A6 F0                   		incw	r8
 1132 0636 AD F0                   		movw	ax, r8
 1133 0638 BF 00 00                		movw	!_recBuffPointerRead, ax
 352:../src/GSM.c  **** 			if (recBuffPointerRead > recBuffSize) recBuffPointerRead = 0;
 1134                             		.loc 1 352 0
 1135 063b BD F0                   		movw	r8, ax
 1136 063d 44 FA 00                		cmpw	ax, #250
 1137 0640 71 FF                   		 xor1	CY, a.7
 1138 0642 61 E3                   		 skh
 1139 0644 EC 4C 06 00             		 br	!!.L54
 1140                             		.loc 1 352 0 is_stmt 0 discriminator 1
 1141 0648 F6                      		clrw	ax
 1142 0649 BF 00 00                		movw	!_recBuffPointerRead, ax
 1143                             	.L54:
 353:../src/GSM.c  **** 
 354:../src/GSM.c  **** 			procBuffpointer++;
 1144                             		.loc 1 354 0 is_stmt 1
 1145 064c AF 00 00                		movw	ax, !_procBuffpointer
 1146 064f BD F0                   		movw	r8, ax
 1147 0651 A6 F0                   		incw	r8
 1148 0653 AD F0                   		movw	ax, r8
 1149 0655 BF 00 00                		movw	!_procBuffpointer, ax
 355:../src/GSM.c  **** 			if (procBuffpointer > procBuffSize) procBuffpointer = 0;
 1150                             		.loc 1 355 0
 1151 0658 BD F0                   		movw	r8, ax
 1152 065a 44 AA 00                		cmpw	ax, #170
 1153 065d 71 FF                   		 xor1	CY, a.7
 1154 065f 61 E3                   		 skh
 1155 0661 EC 69 06 00             		 br	!!.L55
 1156                             		.loc 1 355 0 is_stmt 0 discriminator 1
 1157 0665 F6                      		clrw	ax
 1158 0666 BF 00 00                		movw	!_procBuffpointer, ax
 1159                             	.L55:
 356:../src/GSM.c  **** 
 357:../src/GSM.c  **** 			if (procBuff[procBuffpointer - 1] == '>') gsmState = 7;
 1160                             		.loc 1 357 0 is_stmt 1
 1161 0669 AF 00 00                		movw	ax, !_procBuffpointer
 1162 066c BD F0                   		movw	r8, ax
 1163 066e B6 F0                   		decw	r8
 1164 0670 AD F0                   		movw	ax, r8
 1165 0672 04 00 00                		addw	ax, #_procBuff
 1166 0675 16                      		movw	hl, ax
 1167 0676 8B                      		mov	a, [hl]
 1168 0677 9D F0                   		mov	r8, a
 1169 0679 4A F0 3E                		cmp	r8, #62
 1170 067c 61 E8                   		 skz
 1171 067e EC 88 06 00             		 br	!!.L56
 1172                             		.loc 1 357 0 is_stmt 0 discriminator 1
 1173 0682 30 07 00                		movw	ax, #7
 1174 0685 BF 00 00                		movw	!_gsmState, ax
 1175                             	.L56:
 358:../src/GSM.c  **** 
 359:../src/GSM.c  **** 			if (procBuff[procBuffpointer - 1] == 0x0A){
 1176                             		.loc 1 359 0 is_stmt 1
 1177 0688 AF 00 00                		movw	ax, !_procBuffpointer
 1178 068b BD F0                   		movw	r8, ax
 1179 068d B6 F0                   		decw	r8
 1180 068f AD F0                   		movw	ax, r8
 1181 0691 04 00 00                		addw	ax, #_procBuff
 1182 0694 16                      		movw	hl, ax
 1183 0695 8B                      		mov	a, [hl]
 1184 0696 9D F0                   		mov	r8, a
 1185 0698 4A F0 0A                		cmp	r8, #10
 1186 069b 61 E8                   		 skz
 1187 069d EC B2 06 00             		 br	!!.L57
 360:../src/GSM.c  **** 				procBuff[procBuffpointer - 1] = 0;
 1188                             		.loc 1 360 0
 1189 06a1 AF 00 00                		movw	ax, !_procBuffpointer
 1190 06a4 BD F0                   		movw	r8, ax
 1191 06a6 B6 F0                   		decw	r8
 1192 06a8 DA F0                   		movw	bc, r8
 1193 06aa F1                      		clrb	a
 1194 06ab 48 00 00                		mov	_procBuff[bc], a
 361:../src/GSM.c  **** 				procBuffpointer = 0;
 1195                             		.loc 1 361 0
 1196 06ae F6                      		clrw	ax
 1197 06af BF 00 00                		movw	!_procBuffpointer, ax
 1198                             	.L57:
 362:../src/GSM.c  **** 				//sendData(procBuff,UART0);
 363:../src/GSM.c  **** 				//sendData("\r\n",UART0);
 364:../src/GSM.c  **** 				//sendData("0x0A\r\n",UART0);
 365:../src/GSM.c  **** 			}
 366:../src/GSM.c  **** 			if (procBuff[procBuffpointer - 1] == 0x0D){
 1199                             		.loc 1 366 0
 1200 06b2 AF 00 00                		movw	ax, !_procBuffpointer
 1201 06b5 BD F0                   		movw	r8, ax
 1202 06b7 B6 F0                   		decw	r8
 1203 06b9 AD F0                   		movw	ax, r8
 1204 06bb 04 00 00                		addw	ax, #_procBuff
 1205 06be 16                      		movw	hl, ax
 1206 06bf 8B                      		mov	a, [hl]
 1207 06c0 9D F0                   		mov	r8, a
 1208 06c2 4A F0 0D                		cmp	r8, #13
 1209 06c5 61 E8                   		 skz
 1210 06c7 EC F8 06 00             		 br	!!.L53
 367:../src/GSM.c  **** 				procBuff[procBuffpointer - 1] = 0;
 1211                             		.loc 1 367 0
 1212 06cb AF 00 00                		movw	ax, !_procBuffpointer
 1213 06ce BD F0                   		movw	r8, ax
 1214 06d0 B6 F0                   		decw	r8
 1215 06d2 DA F0                   		movw	bc, r8
 1216 06d4 F1                      		clrb	a
 1217 06d5 48 00 00                		mov	_procBuff[bc], a
 368:../src/GSM.c  **** 				procBuffpointer = 0;
 1218                             		.loc 1 368 0
 1219 06d8 F6                      		clrw	ax
 1220 06d9 BF 00 00                		movw	!_procBuffpointer, ax
 369:../src/GSM.c  **** 				sendData(procBuff,UART0);
 1221                             		.loc 1 369 0
 1222 06dc 30 00 00                		movw	ax, #_procBuff
 1223 06df B8 00                   		movw	[sp], ax
 1224 06e1 F6                      		clrw	ax
 1225 06e2 B8 02                   		movw	[sp+2], ax
 1226 06e4 FC 00 00 00             		call	!!%code(_sendData)
 370:../src/GSM.c  **** 				sendData("\r\n",UART0);
 1227                             		.loc 1 370 0
 1228 06e8 30 ED 00                		movw	ax, #.LC16
 1229 06eb B8 00                   		movw	[sp], ax
 1230 06ed F6                      		clrw	ax
 1231 06ee B8 02                   		movw	[sp+2], ax
 1232 06f0 FC 00 00 00             		call	!!%code(_sendData)
 371:../src/GSM.c  **** 				procData();
 1233                             		.loc 1 371 0
 1234 06f4 FC 00 00 00             		call	!!%code(_procData)
 1235                             	.L53:
 348:../src/GSM.c  **** 		if (recBuffPointerWrite != recBuffPointerRead){
 1236                             		.loc 1 348 0
 1237 06f8 AF 00 00                		movw	ax, !_recBuffPointerWrite
 1238 06fb BD F2                   		movw	r10, ax
 1239 06fd AF 00 00                		movw	ax, !_recBuffPointerRead
 1240 0700 BD F0                   		movw	r8, ax
 1241 0702 AD F2                   		movw	ax, r10
 1242 0704 46 F0                   		cmpw	ax, r8
 1243 0706 61 E8                   		 skz
 1244 0708 EC 05 06 00             		 br	!!.L58
 372:../src/GSM.c  **** 				//sendData("0x0D\r\n",UART0);
 373:../src/GSM.c  **** 				//sendData("0x0D\r\n",UART0);
 374:../src/GSM.c  **** 			}
 375:../src/GSM.c  **** 		}
 376:../src/GSM.c  **** 	}
 377:../src/GSM.c  **** }
 1245                             		.loc 1 377 0
 1246 070c 10 04                   		addw	sp, #4
 1247 070e D7                      		ret
 1248                             	.LFE7:
 1250                             		.section	.rodata
 1251                             	.LC31:
 1252 01e7 47 6F 74 20 69 6E 64 65 		.string	"Got index: "
 1252      78 3A 20 00 
 1253                             	.LC32:
 1254 01f3 47 6F 74 20 53 4D 53 20 		.string	"Got SMS content\r\n"
 1254      63 6F 6E 74 65 6E 74 0D 
 1254      0A 00 
 1255                             	.LC33:
 1256 0205 2B 43 52 45 47 3A 20 30 		.string	"+CREG: 0,1"
 1256      2C 31 00 
 1257                             	.LC34:
 1258 0210 2B 43 53 51 00          		.string	"+CSQ"
 1259                             	.LC35:
 1260 0215 4F 4B 00                		.string	"OK"
 1261                             	.LC36:
 1262 0218 2B 4D 49 50 43 41 4C 4C 		.string	"+MIPCALL"
 1262      00 
 1263                             	.LC37:
 1264 0221 2B 4D 49 50 4F 50 45 4E 		.string	"+MIPOPEN"
 1264      00 
 1265                             	.LC38:
 1266 022a 2B 4D 49 50 53 54 41 54 		.string	"+MIPSTAT"
 1266      00 
 1267                             	.LC39:
 1268 0233 36 00                   		.string	"6"
 1269                             	.LC40:
 1270 0235 2B 53 49 4D 20 52 45 41 		.string	"+SIM READY"
 1270      44 59 00 
 1271                             	.LC41:
 1272 0240 53 49 4D 20 69 73 20 72 		.string	"SIM is ready!!!\r\n"
 1272      65 61 64 79 21 21 21 0D 
 1272      0A 00 
 1273                             	.LC42:
 1274 0252 2B 43 4D 47 4C 00       		.string	"+CMGL"
 1275                             	.LC43:
 1276 0258 2B 43 47 44 43 4F 4E 54 		.string	"+CGDCONT"
 1276      00 
 1277                             	.LC44:
 1278 0261 45 52 52 4F 52 00       		.string	"ERROR"
 1279                             	.text
 1280                             		.global	_procData
 1282                             	_procData:
 1283                             	.LFB8:
 378:../src/GSM.c  **** 
 379:../src/GSM.c  **** void procData(){		//process line
 1284                             		.loc 1 379 0
 1285                             		; start of function
 1286                             		; outgoing: 6 bytes
 1287 070f 20 06                   		subw	sp, #6
 1288                             	.LCFI5:
 380:../src/GSM.c  **** 	if (smsFlags.content == 1){
 1289                             		.loc 1 380 0
 1290 0711 AF 00 00                		movw	ax, !_smsFlags+8
 1291 0714 BD F0                   		movw	r8, ax
 1292 0716 44 01 00                		cmpw	ax, #1
 1293 0719 61 E8                   		 skz
 1294 071b EC 69 07 00             		 br	!!.L60
 1295                             	.LBB3:
 381:../src/GSM.c  **** 		smsFlags.content = 0;
 1296                             		.loc 1 381 0
 1297 071f F6                      		clrw	ax
 1298 0720 BF 00 00                		movw	!_smsFlags+8, ax
 382:../src/GSM.c  **** 		smsFlags.del = 1;
 1299                             		.loc 1 382 0
 1300 0723 E6                      		onew	ax
 1301 0724 BF 00 00                		movw	!_smsFlags+16, ax
 383:../src/GSM.c  **** 		//if(strncmp((char*)smsInfo.index,"1",2)==0){
 384:../src/GSM.c  **** 			sendData("Got index: ",UART0);
 1302                             		.loc 1 384 0
 1303 0727 30 E7 01                		movw	ax, #.LC31
 1304 072a B8 00                   		movw	[sp], ax
 1305 072c F6                      		clrw	ax
 1306 072d B8 02                   		movw	[sp+2], ax
 1307 072f FC 00 00 00             		call	!!%code(_sendData)
 385:../src/GSM.c  **** 			sendData(smsInfo.index,UART0);
 1308                             		.loc 1 385 0
 1309 0733 30 00 00                		movw	ax, #_smsInfo
 1310 0736 B8 00                   		movw	[sp], ax
 1311 0738 F6                      		clrw	ax
 1312 0739 B8 02                   		movw	[sp+2], ax
 1313 073b FC 00 00 00             		call	!!%code(_sendData)
 386:../src/GSM.c  **** 			sendData("\r\n",UART0);
 1314                             		.loc 1 386 0
 1315 073f 30 ED 00                		movw	ax, #.LC16
 1316 0742 B8 00                   		movw	[sp], ax
 1317 0744 F6                      		clrw	ax
 1318 0745 B8 02                   		movw	[sp+2], ax
 1319 0747 FC 00 00 00             		call	!!%code(_sendData)
 387:../src/GSM.c  **** 			strcpy(smsInfo.content1,procBuff);	//store SMS content
 1320                             		.loc 1 387 0
 1321 074b 30 00 00                		movw	ax, #_smsInfo+82
 1322 074e B8 00                   		movw	[sp], ax
 1323 0750 30 00 00                		movw	ax, #_procBuff
 1324 0753 B8 02                   		movw	[sp+2], ax
 1325 0755 FC 00 00 00             		call	!!%code(_strcpy)
 388:../src/GSM.c  **** 			procSMS();
 1326                             		.loc 1 388 0
 1327 0759 FC 00 00 00             		call	!!%code(_procSMS)
 389:../src/GSM.c  **** 		/*}
 390:../src/GSM.c  **** 		if(strncmp((char*)smsInfo.index,"2",2)==0){
 391:../src/GSM.c  **** 			sendData("Got index2\r\n",UART0);
 392:../src/GSM.c  **** 			strcpy(smsInfo.content2,procBuff);
 393:../src/GSM.c  **** 			procSMS();
 394:../src/GSM.c  **** 		}*/
 395:../src/GSM.c  **** 		//sendData("SMS conent:",UART0);
 396:../src/GSM.c  **** 		//sendData(smsInfo.content,UART0);
 397:../src/GSM.c  **** 		//sendData("\r\n",UART0);
 398:../src/GSM.c  **** 		sendData("Got SMS content\r\n",UART0);
 1328                             		.loc 1 398 0
 1329 075d 30 F3 01                		movw	ax, #.LC32
 1330 0760 B8 00                   		movw	[sp], ax
 1331 0762 F6                      		clrw	ax
 1332 0763 B8 02                   		movw	[sp+2], ax
 1333 0765 FC 00 00 00             		call	!!%code(_sendData)
 1334                             	.L60:
 1335                             	.LBE3:
 399:../src/GSM.c  **** 	}
 400:../src/GSM.c  **** 	if(strncmp((char*)procBuff,"+CREG: 0,1",10)==0)gsmState = 2;
 1336                             		.loc 1 400 0
 1337 0769 30 00 00                		movw	ax, #_procBuff
 1338 076c B8 00                   		movw	[sp], ax
 1339 076e 30 05 02                		movw	ax, #.LC33
 1340 0771 B8 02                   		movw	[sp+2], ax
 1341 0773 30 0A 00                		movw	ax, #10
 1342 0776 B8 04                   		movw	[sp+4], ax
 1343 0778 FC 00 00 00             		call	!!%code(_strncmp)
 1344 077c AD F0                   		movw	ax, r8
 1345 077e 44 00 00                		cmpw	ax, #0
 1346 0781 61 E8                   		 skz
 1347 0783 EC 91 07 00             		 br	!!.L61
 1348                             		.loc 1 400 0 is_stmt 0 discriminator 1
 1349 0787 30 02 00                		movw	ax, #2
 1350 078a BF 00 00                		movw	!_gsmState, ax
 1351 078d EC 27 09 00             		br	!!.L59
 1352                             	.L61:
 401:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"+CSQ",4)==0)getSignal();
 1353                             		.loc 1 401 0 is_stmt 1
 1354 0791 30 00 00                		movw	ax, #_procBuff
 1355 0794 B8 00                   		movw	[sp], ax
 1356 0796 30 10 02                		movw	ax, #.LC34
 1357 0799 B8 02                   		movw	[sp+2], ax
 1358 079b 30 04 00                		movw	ax, #4
 1359 079e B8 04                   		movw	[sp+4], ax
 1360 07a0 FC 00 00 00             		call	!!%code(_strncmp)
 1361 07a4 AD F0                   		movw	ax, r8
 1362 07a6 44 00 00                		cmpw	ax, #0
 1363 07a9 61 E8                   		 skz
 1364 07ab EC B7 07 00             		 br	!!.L63
 1365                             		.loc 1 401 0 is_stmt 0 discriminator 1
 1366 07af FC 00 00 00             		call	!!%code(_getSignal)
 1367 07b3 EC 27 09 00             		br	!!.L59
 1368                             	.L63:
 402:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"OK",3)==0)	OK();
 1369                             		.loc 1 402 0 is_stmt 1
 1370 07b7 30 00 00                		movw	ax, #_procBuff
 1371 07ba B8 00                   		movw	[sp], ax
 1372 07bc 30 15 02                		movw	ax, #.LC35
 1373 07bf B8 02                   		movw	[sp+2], ax
 1374 07c1 30 03 00                		movw	ax, #3
 1375 07c4 B8 04                   		movw	[sp+4], ax
 1376 07c6 FC 00 00 00             		call	!!%code(_strncmp)
 1377 07ca AD F0                   		movw	ax, r8
 1378 07cc 44 00 00                		cmpw	ax, #0
 1379 07cf 61 E8                   		 skz
 1380 07d1 EC DD 07 00             		 br	!!.L64
 1381                             		.loc 1 402 0 is_stmt 0 discriminator 1
 1382 07d5 FC 00 00 00             		call	!!%code(_OK)
 1383 07d9 EC 27 09 00             		br	!!.L59
 1384                             	.L64:
 403:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"+MIPCALL",8)==0)Context();
 1385                             		.loc 1 403 0 is_stmt 1
 1386 07dd 30 00 00                		movw	ax, #_procBuff
 1387 07e0 B8 00                   		movw	[sp], ax
 1388 07e2 30 18 02                		movw	ax, #.LC36
 1389 07e5 B8 02                   		movw	[sp+2], ax
 1390 07e7 30 08 00                		movw	ax, #8
 1391 07ea B8 04                   		movw	[sp+4], ax
 1392 07ec FC 00 00 00             		call	!!%code(_strncmp)
 1393 07f0 AD F0                   		movw	ax, r8
 1394 07f2 44 00 00                		cmpw	ax, #0
 1395 07f5 61 E8                   		 skz
 1396 07f7 EC 03 08 00             		 br	!!.L65
 1397                             		.loc 1 403 0 is_stmt 0 discriminator 1
 1398 07fb FC 00 00 00             		call	!!%code(_Context)
 1399 07ff EC 27 09 00             		br	!!.L59
 1400                             	.L65:
 404:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"+MIPOPEN",8)==0)Socket1();
 1401                             		.loc 1 404 0 is_stmt 1
 1402 0803 30 00 00                		movw	ax, #_procBuff
 1403 0806 B8 00                   		movw	[sp], ax
 1404 0808 30 21 02                		movw	ax, #.LC37
 1405 080b B8 02                   		movw	[sp+2], ax
 1406 080d 30 08 00                		movw	ax, #8
 1407 0810 B8 04                   		movw	[sp+4], ax
 1408 0812 FC 00 00 00             		call	!!%code(_strncmp)
 1409 0816 AD F0                   		movw	ax, r8
 1410 0818 44 00 00                		cmpw	ax, #0
 1411 081b 61 E8                   		 skz
 1412 081d EC 29 08 00             		 br	!!.L66
 1413                             		.loc 1 404 0 is_stmt 0 discriminator 1
 1414 0821 FC 00 00 00             		call	!!%code(_Socket1)
 1415 0825 EC 27 09 00             		br	!!.L59
 1416                             	.L66:
 405:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"+MIPSTAT",8)==0)DataStatus();
 1417                             		.loc 1 405 0 is_stmt 1
 1418 0829 30 00 00                		movw	ax, #_procBuff
 1419 082c B8 00                   		movw	[sp], ax
 1420 082e 30 2A 02                		movw	ax, #.LC38
 1421 0831 B8 02                   		movw	[sp+2], ax
 1422 0833 30 08 00                		movw	ax, #8
 1423 0836 B8 04                   		movw	[sp+4], ax
 1424 0838 FC 00 00 00             		call	!!%code(_strncmp)
 1425 083c AD F0                   		movw	ax, r8
 1426 083e 44 00 00                		cmpw	ax, #0
 1427 0841 61 E8                   		 skz
 1428 0843 EC 4F 08 00             		 br	!!.L67
 1429                             		.loc 1 405 0 is_stmt 0 discriminator 1
 1430 0847 FC 00 00 00             		call	!!%code(_DataStatus)
 1431 084b EC 27 09 00             		br	!!.L59
 1432                             	.L67:
 406:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"6",1)==0)DataDecrypt();
 1433                             		.loc 1 406 0 is_stmt 1
 1434 084f C9 F0 00 00             		movw	r8, #_procBuff
 1435 0853 AD F0                   		movw	ax, r8
 1436 0855 BD F2                   		movw	r10, ax
 1437 0857 FA F2                   		movw	hl, r10
 1438 0859 8B                      		mov	a, [hl]
 1439 085a 9D F1                   		mov	r9, a
 1440 085c C9 F2 33 02             		movw	r10, #.LC39
 1441 0860 AD F2                   		movw	ax, r10
 1442 0862 BD F4                   		movw	r12, ax
 1443 0864 FA F4                   		movw	hl, r12
 1444 0866 8B                      		mov	a, [hl]
 1445 0867 9D F0                   		mov	r8, a
 1446 0869 8D F1                   		mov	a, r9
 1447 086b 4B F0                   		cmp	a, r8
 1448 086d 61 E8                   		 skz
 1449 086f EC 7B 08 00             		 br	!!.L68
 1450                             		.loc 1 406 0 is_stmt 0 discriminator 1
 1451 0873 FC 00 00 00             		call	!!%code(_DataDecrypt)
 1452 0877 EC 27 09 00             		br	!!.L59
 1453                             	.L68:
 407:../src/GSM.c  **** 	else if(strncmp(procBuff,"+SIM READY",10)==0)sendData("SIM is ready!!!\r\n",UART0);
 1454                             		.loc 1 407 0 is_stmt 1
 1455 087b 30 00 00                		movw	ax, #_procBuff
 1456 087e B8 00                   		movw	[sp], ax
 1457 0880 30 35 02                		movw	ax, #.LC40
 1458 0883 B8 02                   		movw	[sp+2], ax
 1459 0885 30 0A 00                		movw	ax, #10
 1460 0888 B8 04                   		movw	[sp+4], ax
 1461 088a FC 00 00 00             		call	!!%code(_strncmp)
 1462 088e AD F0                   		movw	ax, r8
 1463 0890 44 00 00                		cmpw	ax, #0
 1464 0893 61 E8                   		 skz
 1465 0895 EC A9 08 00             		 br	!!.L69
 1466                             		.loc 1 407 0 is_stmt 0 discriminator 1
 1467 0899 30 40 02                		movw	ax, #.LC41
 1468 089c B8 00                   		movw	[sp], ax
 1469 089e F6                      		clrw	ax
 1470 089f B8 02                   		movw	[sp+2], ax
 1471 08a1 FC 00 00 00             		call	!!%code(_sendData)
 1472 08a5 EC 27 09 00             		br	!!.L59
 1473                             	.L69:
 408:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"+CMGL",5)==0)	if (smsFlags.reply == 0) GotSMS();
 1474                             		.loc 1 408 0 is_stmt 1
 1475 08a9 30 00 00                		movw	ax, #_procBuff
 1476 08ac B8 00                   		movw	[sp], ax
 1477 08ae 30 52 02                		movw	ax, #.LC42
 1478 08b1 B8 02                   		movw	[sp+2], ax
 1479 08b3 30 05 00                		movw	ax, #5
 1480 08b6 B8 04                   		movw	[sp+4], ax
 1481 08b8 FC 00 00 00             		call	!!%code(_strncmp)
 1482 08bc AD F0                   		movw	ax, r8
 1483 08be 44 00 00                		cmpw	ax, #0
 1484 08c1 61 E8                   		 skz
 1485 08c3 EC 27 09 00             		 br	!!.L59
 1486                             		.loc 1 408 0 is_stmt 0 discriminator 1
 1487 08c7 AF 00 00                		movw	ax, !_smsFlags+18
 1488 08ca BD F0                   		movw	r8, ax
 1489 08cc 44 00 00                		cmpw	ax, #0
 1490 08cf 61 E8                   		 skz
 1491 08d1 EC DD 08 00             		 br	!!.L70
 1492                             		.loc 1 408 0 discriminator 2
 1493 08d5 FC 00 00 00             		call	!!%code(_GotSMS)
 1494 08d9 EC 27 09 00             		br	!!.L59
 1495                             	.L70:
 409:../src/GSM.c  **** 
 410:../src/GSM.c  **** 
 411:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"+CGDCONT",8)==0)checkGPRS();
 1496                             		.loc 1 411 0 is_stmt 1
 1497 08dd 30 00 00                		movw	ax, #_procBuff
 1498 08e0 B8 00                   		movw	[sp], ax
 1499 08e2 30 58 02                		movw	ax, #.LC43
 1500 08e5 B8 02                   		movw	[sp+2], ax
 1501 08e7 30 08 00                		movw	ax, #8
 1502 08ea B8 04                   		movw	[sp+4], ax
 1503 08ec FC 00 00 00             		call	!!%code(_strncmp)
 1504 08f0 AD F0                   		movw	ax, r8
 1505 08f2 44 00 00                		cmpw	ax, #0
 1506 08f5 61 E8                   		 skz
 1507 08f7 EC 03 09 00             		 br	!!.L71
 1508                             		.loc 1 411 0 is_stmt 0 discriminator 1
 1509 08fb FC 00 00 00             		call	!!%code(_checkGPRS)
 1510 08ff EC 27 09 00             		br	!!.L59
 1511                             	.L71:
 412:../src/GSM.c  **** 	else if(strncmp((char*)procBuff,"ERROR",5)==0)gsmState = 20;	//restart
 1512                             		.loc 1 412 0 is_stmt 1
 1513 0903 30 00 00                		movw	ax, #_procBuff
 1514 0906 B8 00                   		movw	[sp], ax
 1515 0908 30 61 02                		movw	ax, #.LC44
 1516 090b B8 02                   		movw	[sp+2], ax
 1517 090d 30 05 00                		movw	ax, #5
 1518 0910 B8 04                   		movw	[sp+4], ax
 1519 0912 FC 00 00 00             		call	!!%code(_strncmp)
 1520 0916 AD F0                   		movw	ax, r8
 1521 0918 44 00 00                		cmpw	ax, #0
 1522 091b 61 E8                   		 skz
 1523 091d EC 27 09 00             		 br	!!.L59
 1524                             		.loc 1 412 0 is_stmt 0 discriminator 1
 1525 0921 30 14 00                		movw	ax, #20
 1526 0924 BF 00 00                		movw	!_gsmState, ax
 1527                             	.L59:
 413:../src/GSM.c  **** 
 414:../src/GSM.c  **** 	//sendData(procBuff,UART0);
 415:../src/GSM.c  **** 	//sendData("\r\n",UART0);
 416:../src/GSM.c  **** 	//else if(strncmp((char*)procBuff,"+SIM READY1",8)==0);		//unsolicited
 417:../src/GSM.c  **** }
 1528                             		.loc 1 417 0 is_stmt 1
 1529 0927 10 06                   		addw	sp, #6
 1530 0929 D7                      		ret
 1531                             	.LFE8:
 1533                             		.global	_Error
 1535                             	_Error:
 1536                             	.LFB9:
 418:../src/GSM.c  **** 
 419:../src/GSM.c  **** void Error(){
 1537                             		.loc 1 419 0
 420:../src/GSM.c  **** 	errorCounter++;
 1538                             		.loc 1 420 0
 1539 092a AF 00 00                		movw	ax, !_errorCounter
 1540 092d BD F0                   		movw	r8, ax
 1541 092f A6 F0                   		incw	r8
 1542 0931 AD F0                   		movw	ax, r8
 1543 0933 BF 00 00                		movw	!_errorCounter, ax
 421:../src/GSM.c  **** 	if (errorCounter >= 3){
 1544                             		.loc 1 421 0
 1545 0936 BD F0                   		movw	r8, ax
 1546 0938 44 02 00                		cmpw	ax, #2
 1547 093b 71 FF                   		 xor1	CY, a.7
 1548 093d 61 E3                   		 skh
 1549 093f EC 4D 09 00             		 br	!!.L72
 422:../src/GSM.c  **** 		errorCounter = 0;
 1550                             		.loc 1 422 0
 1551 0943 F6                      		clrw	ax
 1552 0944 BF 00 00                		movw	!_errorCounter, ax
 423:../src/GSM.c  **** 		gsmState = 20;
 1553                             		.loc 1 423 0
 1554 0947 30 14 00                		movw	ax, #20
 1555 094a BF 00 00                		movw	!_gsmState, ax
 1556                             	.L72:
 424:../src/GSM.c  **** 	}
 425:../src/GSM.c  **** }
 1557                             		.loc 1 425 0
 1558 094d D7                      		ret
 1559                             	.LFE9:
 1561                             		.section	.rodata
 1562                             	.LC45:
 1563 0267 20 2D 25 64 64 42 6D 00 		.string	" -%ddBm"
 1564                             	.text
 1565                             		.global	_getSignal
 1567                             	_getSignal:
 1568                             	.LFB10:
 426:../src/GSM.c  **** 
 427:../src/GSM.c  **** void getSignal(){
 1569                             		.loc 1 427 0
 1570                             		; start of function
 1571                             		; locals: 30 bytes
 1572                             		; outgoing: 10 bytes
 1573 094e 20 28                   		subw	sp, #40
 1574                             	.LCFI6:
 428:../src/GSM.c  **** 	myStrSection(procBuff, quality,3,' ',1);
 1575                             		.loc 1 428 0
 1576 0950 30 00 00                		movw	ax, #_procBuff
 1577 0953 B8 00                   		movw	[sp], ax
 1578 0955 30 00 00                		movw	ax, #_quality
 1579 0958 B8 02                   		movw	[sp+2], ax
 1580 095a 30 03 00                		movw	ax, #3
 1581 095d B8 04                   		movw	[sp+4], ax
 1582 095f 30 20 00                		movw	ax, #32
 1583 0962 B8 06                   		movw	[sp+6], ax
 1584 0964 E6                      		onew	ax
 1585 0965 B8 08                   		movw	[sp+8], ax
 1586 0967 FC 00 00 00             		call	!!%code(_myStrSection)
 429:../src/GSM.c  **** 	char temp1[25];
 430:../src/GSM.c  **** 	int temp2;
 431:../src/GSM.c  **** 	int temp3;
 432:../src/GSM.c  **** 	temp2 = atoi(quality);
 1587                             		.loc 1 432 0
 1588 096b 30 00 00                		movw	ax, #_quality
 1589 096e B8 00                   		movw	[sp], ax
 1590 0970 FC 00 00 00             		call	!!%code(_atoi)
 1591 0974 AD F0                   		movw	ax, r8
 1592 0976 B8 26                   		movw	[sp+38], ax
 433:../src/GSM.c  **** 	temp2 *= 2;
 1593                             		.loc 1 433 0
 1594 0978 01                      		addw	ax, ax
 1595 0979 B8 26                   		movw	[sp+38], ax
 434:../src/GSM.c  **** 	temp3 = 113 - temp2;
 1596                             		.loc 1 434 0
 1597 097b 12                      		movw	bc, ax
 1598 097c 30 71 00                		movw	ax, #113
 1599 097f 23                      		subw	ax, bc
 1600 0980 B8 24                   		movw	[sp+36], ax
 435:../src/GSM.c  **** 	sprintf (quality," -%ddBm", temp3);
 1601                             		.loc 1 435 0
 1602 0982 30 00 00                		movw	ax, #_quality
 1603 0985 B8 00                   		movw	[sp], ax
 1604 0987 30 67 02                		movw	ax, #.LC45
 1605 098a B8 02                   		movw	[sp+2], ax
 1606 098c A8 24                   		movw	ax, [sp+36]
 1607 098e BD F0                   		movw	r8, ax
 1608 0990 B8 04                   		movw	[sp+4], ax
 1609 0992 FC 00 00 00             		call	!!%code(_sprintf)
 436:../src/GSM.c  **** 	//sendData("Signal ",UART0);
 437:../src/GSM.c  **** 	//sendData(quality,UART0);
 438:../src/GSM.c  **** 	//sendData("\r\n",UART0);
 439:../src/GSM.c  **** 
 440:../src/GSM.c  **** 	//sendData("\r\nSignal-",UART0);
 441:../src/GSM.c  **** 	//sendData(quality,UART0);
 442:../src/GSM.c  **** 	//sendData("\r\n",UART0);
 443:../src/GSM.c  **** 	/*rtc temp;
 444:../src/GSM.c  **** 	temp = getUptime();
 445:../src/GSM.c  **** 
 446:../src/GSM.c  **** 	sprintf (temp1,"Uptime minutes: %.2dd %.2dh %.2dm", temp.days, temp.hours, temp.minutes);
 447:../src/GSM.c  **** 	sendData(temp1,UART0);
 448:../src/GSM.c  **** 	sendData("\r\n",UART0);*/
 449:../src/GSM.c  **** }
 1610                             		.loc 1 449 0
 1611 0996 10 28                   		addw	sp, #40
 1612 0998 D7                      		ret
 1613                             	.LFE10:
 1615                             		.section	.rodata
 1616                             	.LC46:
 1617 026f 50 72 6F 63 65 73 73 20 		.string	"Process SMS\r\n"
 1617      53 4D 53 0D 0A 00 
 1618                             	.LC47:
 1619 027d 69 6E 66 6F 00          		.string	"info"
 1620                             	.LC48:
 1621 0282 74 65 73 74 00          		.string	"test"
 1622                             	.text
 1623                             		.global	_procSMS
 1625                             	_procSMS:
 1626                             	.LFB11:
 450:../src/GSM.c  **** 
 451:../src/GSM.c  **** void procSMS(){
 1627                             		.loc 1 451 0
 1628                             		; start of function
 1629                             		; outgoing: 6 bytes
 1630 0999 20 06                   		subw	sp, #6
 1631                             	.LCFI7:
 452:../src/GSM.c  **** 	sendData("Process SMS\r\n",UART0);
 1632                             		.loc 1 452 0
 1633 099b 30 6F 02                		movw	ax, #.LC46
 1634 099e B8 00                   		movw	[sp], ax
 1635 09a0 F6                      		clrw	ax
 1636 09a1 B8 02                   		movw	[sp+2], ax
 1637 09a3 FC 00 00 00             		call	!!%code(_sendData)
 453:../src/GSM.c  **** 	//caps((char*)smsInfo.content1);		//convert to capital letters
 454:../src/GSM.c  **** 	if(strncmp((char*)smsInfo.content1,"info",4)==0){
 1638                             		.loc 1 454 0
 1639 09a7 30 00 00                		movw	ax, #_smsInfo+82
 1640 09aa B8 00                   		movw	[sp], ax
 1641 09ac 30 7D 02                		movw	ax, #.LC47
 1642 09af B8 02                   		movw	[sp+2], ax
 1643 09b1 30 04 00                		movw	ax, #4
 1644 09b4 B8 04                   		movw	[sp+4], ax
 1645 09b6 FC 00 00 00             		call	!!%code(_strncmp)
 1646 09ba AD F0                   		movw	ax, r8
 1647 09bc 44 00 00                		cmpw	ax, #0
 1648 09bf 61 E8                   		 skz
 1649 09c1 EC D5 09 00             		 br	!!.L76
 455:../src/GSM.c  **** 		buildInfo();
 1650                             		.loc 1 455 0
 1651 09c5 FC 00 00 00             		call	!!%code(_buildInfo)
 456:../src/GSM.c  **** 		RELAY = 1;
 1652                             		.loc 1 456 0
 1653 09c9 C9 F0 02 FF             		movw	r8, #-254
 1654 09cd AD F0                   		movw	ax, r8
 1655 09cf BD F2                   		movw	r10, ax
 1656 09d1 FA F2                   		movw	hl, r10
 1657 09d3 71 A2                   		set1	[hl].2 ;insvmisalignqi [hl],#1,#2,#1 {0}
 1658                             	.L76:
 457:../src/GSM.c  **** 	}
 458:../src/GSM.c  **** 	if(strncmp((char*)smsInfo.content1,"test",4)==0){
 1659                             		.loc 1 458 0
 1660 09d5 30 00 00                		movw	ax, #_smsInfo+82
 1661 09d8 B8 00                   		movw	[sp], ax
 1662 09da 30 82 02                		movw	ax, #.LC48
 1663 09dd B8 02                   		movw	[sp+2], ax
 1664 09df 30 04 00                		movw	ax, #4
 1665 09e2 B8 04                   		movw	[sp+4], ax
 1666 09e4 FC 00 00 00             		call	!!%code(_strncmp)
 1667 09e8 AD F0                   		movw	ax, r8
 1668 09ea 44 00 00                		cmpw	ax, #0
 1669 09ed 61 E8                   		 skz
 1670 09ef EC 03 0A 00             		 br	!!.L77
 459:../src/GSM.c  **** 		buildInfo();
 1671                             		.loc 1 459 0
 1672 09f3 FC 00 00 00             		call	!!%code(_buildInfo)
 460:../src/GSM.c  **** 		RELAY = 0;
 1673                             		.loc 1 460 0
 1674 09f7 C9 F0 02 FF             		movw	r8, #-254
 1675 09fb AD F0                   		movw	ax, r8
 1676 09fd BD F2                   		movw	r10, ax
 1677 09ff FA F2                   		movw	hl, r10
 1678 0a01 71 A3                   		clr1	[hl].2 ;insvmisalignqi [hl],#1,#2,#0 {0}
 1679                             	.L77:
 461:../src/GSM.c  **** 	}
 462:../src/GSM.c  **** 
 463:../src/GSM.c  **** 	gsmState = 12;			//del sms
 1680                             		.loc 1 463 0
 1681 0a03 30 0C 00                		movw	ax, #12
 1682 0a06 BF 00 00                		movw	!_gsmState, ax
 464:../src/GSM.c  **** }
 1683                             		.loc 1 464 0
 1684 0a09 10 06                   		addw	sp, #6
 1685 0a0b D7                      		ret
 1686                             	.LFE11:
 1688                             		.global	_caps
 1690                             	_caps:
 1691                             	.LFB12:
 465:../src/GSM.c  **** 
 466:../src/GSM.c  **** void caps(char* str){
 1692                             		.loc 1 466 0
 467:../src/GSM.c  **** 	while (*str != 0){
 1693                             		.loc 1 467 0
 1694 0a0c EC 48 0A 00             		br	!!.L79
 1695                             	.L80:
 468:../src/GSM.c  **** 		if ((*str >= 97) && (*str <= 122)){
 1696                             		.loc 1 468 0
 1697 0a10 A8 04                   		movw	ax, [sp+4]
 1698 0a12 BD F0                   		movw	r8, ax
 1699 0a14 BD F2                   		movw	r10, ax
 1700 0a16 FA F2                   		movw	hl, r10
 1701 0a18 8B                      		mov	a, [hl]
 1702 0a19 9D F0                   		mov	r8, a
 1703 0a1b 4A F0 60                		cmp	r8, #96
 1704 0a1e 61 E3                   		 skh
 1705 0a20 EC 48 0A 00             		 br	!!.L79
 1706                             		.loc 1 468 0 is_stmt 0 discriminator 1
 1707 0a24 A8 04                   		movw	ax, [sp+4]
 1708 0a26 BD F0                   		movw	r8, ax
 1709 0a28 BD F2                   		movw	r10, ax
 1710 0a2a FA F2                   		movw	hl, r10
 1711 0a2c 8B                      		mov	a, [hl]
 1712 0a2d 9D F0                   		mov	r8, a
 1713 0a2f 4A F0 7A                		cmp	r8, #122
 1714 0a32 61 F3                   		 sknh
 1715 0a34 EC 48 0A 00             		 br	!!.L79
 469:../src/GSM.c  **** 			*str =- 32;
 1716                             		.loc 1 469 0 is_stmt 1
 1717 0a38 A8 04                   		movw	ax, [sp+4]
 1718 0a3a BD F0                   		movw	r8, ax
 1719 0a3c BD F2                   		movw	r10, ax
 1720 0a3e EA F2                   		movw	de, r10
 1721 0a40 51 E0                   		mov	a, #-32
 1722 0a42 99                      		mov	[de], a
 470:../src/GSM.c  **** 			str++;
 1723                             		.loc 1 470 0
 1724 0a43 A8 04                   		movw	ax, [sp+4]
 1725 0a45 A1                      		incw	ax
 1726 0a46 B8 04                   		movw	[sp+4], ax
 1727                             	.L79:
 467:../src/GSM.c  **** 		if ((*str >= 97) && (*str <= 122)){
 1728                             		.loc 1 467 0
 1729 0a48 A8 04                   		movw	ax, [sp+4]
 1730 0a4a BD F0                   		movw	r8, ax
 1731 0a4c BD F2                   		movw	r10, ax
 1732 0a4e FA F2                   		movw	hl, r10
 1733 0a50 8B                      		mov	a, [hl]
 1734 0a51 9D F0                   		mov	r8, a
 1735 0a53 D4 F0                   		cmp0	r8
 1736 0a55 61 E8                   		 skz
 1737 0a57 EC 10 0A 00             		 br	!!.L80
 471:../src/GSM.c  **** 		}
 472:../src/GSM.c  **** 	}
 473:../src/GSM.c  **** }
 1738                             		.loc 1 473 0
 1739 0a5b D7                      		ret
 1740                             	.LFE12:
 1742                             		.section	.rodata
 1743                             	.LC49:
 1744 0287 42 75 69 6C 64 20 49 4E 		.string	"Build INFO SMS\r\n"
 1744      46 4F 20 53 4D 53 0D 0A 
 1744      00 
 1745                             	.LC50:
 1746 0298 55 6E 69 74 20 69 73 20 		.string	"Unit is active\n"
 1746      61 63 74 69 76 65 0A 00 
 1747                             	.LC51:
 1748 02a8 56 6F 6C 74 61 67 65 3A 		.string	"Voltage: %s\n"
 1748      20 25 73 0A 00 
 1749                             	.LC52:
 1750 02b5 49 50 3A 20 25 73 0A 00 		.string	"IP: %s\n"
 1751                             	.LC53:
 1752 02bd 52 65 73 74 61 72 74 73 		.string	"Restarts: %i\n"
 1752      3A 20 25 69 0A 00 
 1753                             	.LC54:
 1754 02cb 53 69 67 6E 61 6C 3A 25 		.string	"Signal:%s\n"
 1754      73 0A 00 
 1755                             	.LC55:
 1756 02d6 55 52 4C 3A 25 73 3A 25 		.string	"URL:%s:%s\n"
 1756      73 0A 00 
 1757                             	.LC56:
 1758 02e1 55 70 74 69 6D 65 3A 20 		.string	"Uptime: %.2dw %.2dd %.2dh %.2dm %.2ds\n"
 1758      25 2E 32 64 77 20 25 2E 
 1758      32 64 64 20 25 2E 32 64 
 1758      68 20 25 2E 32 64 6D 20 
 1758      25 2E 32 64 73 0A 00 
 1759                             	.LC57:
 1760 0308 0D 0A 53 4D 53 69 6E 66 		.string	"\r\nSMSinfo build:"
 1760      6F 20 62 75 69 6C 64 3A 
 1760      00 
 1761                             	.text
 1762                             		.global	_buildInfo
 1764                             	_buildInfo:
 1765                             	.LFB13:
 474:../src/GSM.c  **** 
 475:../src/GSM.c  **** void buildInfo(){
 1766                             		.loc 1 475 0
 1767                             		; start of function
 1768                             		; push 4: r16 r18
 1769                             		; locals: 74 bytes
 1770                             		; outgoing: 14 bytes
 1771 0a5c 61 EF                   		sel	rb2
 1772 0a5e C1                      		push	ax ; r16
 1773                             	.LCFI8:
 1774 0a5f C3                      		push	bc ; r18
 1775                             	.LCFI9:
 1776 0a60 61 CF                   		sel	rb0
 1777 0a62 20 58                   		subw	sp, #88
 1778                             	.LCFI10:
 476:../src/GSM.c  **** 	sendData("Build INFO SMS\r\n",UART0);
 1779                             		.loc 1 476 0
 1780 0a64 30 87 02                		movw	ax, #.LC49
 1781 0a67 B8 00                   		movw	[sp], ax
 1782 0a69 F6                      		clrw	ax
 1783 0a6a B8 02                   		movw	[sp+2], ax
 1784 0a6c FC 00 00 00             		call	!!%code(_sendData)
 477:../src/GSM.c  **** 	//strcpy(SMScontent,"Powerbox is active\n ");
 478:../src/GSM.c  **** 	strcpy(SMScontent,"Unit is active\n");
 1785                             		.loc 1 478 0
 1786 0a70 C9 F4 00 00             		movw	r12, #_SMScontent
 1787 0a74 C9 F2 98 02             		movw	r10, #.LC50
 1788 0a78 C9 F0 10 00             		movw	r8, #16
 1789 0a7c AD F4                   		movw	ax, r12
 1790 0a7e B8 00                   		movw	[sp], ax
 1791 0a80 AD F2                   		movw	ax, r10
 1792 0a82 B8 02                   		movw	[sp+2], ax
 1793 0a84 AD F0                   		movw	ax, r8
 1794 0a86 B8 04                   		movw	[sp+4], ax
 1795 0a88 FC 00 00 00             		call	!!%code(_memcpy)
 479:../src/GSM.c  **** 	//sendData(quality,UART0);
 480:../src/GSM.c  **** 	//sendData("\r\n",UART0);
 481:../src/GSM.c  **** 
 482:../src/GSM.c  **** 	char temps[20];
 483:../src/GSM.c  **** 	char adcv[10];
 484:../src/GSM.c  **** 	GetADC(adcv);
 1796                             		.loc 1 484 0
 1797 0a8c C9 F0 58 00             		movw	r8, #88
 1798 0a90 AE F8                   		movw	ax, sp
 1799 0a92 BD F0                   		movw	r8, ax
 1800 0a94 04 58 00                		addw	ax, #88
 1801 0a97 BD F0                   		movw	r8, ax
 1802 0a99 04 E2 FF                		addw	ax, #-30
 1803 0a9c B8 00                   		movw	[sp], ax
 1804 0a9e FC 00 00 00             		call	!!%code(_GetADC)
 485:../src/GSM.c  **** 	sprintf(temps,"Voltage: %s\n",adcv);
 1805                             		.loc 1 485 0
 1806 0aa2 C9 F2 58 00             		movw	r10, #88
 1807 0aa6 AE F8                   		movw	ax, sp
 1808 0aa8 BD F2                   		movw	r10, ax
 1809 0aaa 04 58 00                		addw	ax, #88
 1810 0aad BD F2                   		movw	r10, ax
 1811 0aaf 04 EC FF                		addw	ax, #-20
 1812 0ab2 B8 00                   		movw	[sp], ax
 1813 0ab4 30 A8 02                		movw	ax, #.LC51
 1814 0ab7 B8 02                   		movw	[sp+2], ax
 1815 0ab9 C9 EA 58 00             		movw	r18, #88
 1816 0abd AE F8                   		movw	ax, sp
 1817 0abf BD EA                   		movw	r18, ax
 1818 0ac1 04 58 00                		addw	ax, #88
 1819 0ac4 BD EA                   		movw	r18, ax
 1820 0ac6 04 E2 FF                		addw	ax, #-30
 1821 0ac9 B8 04                   		movw	[sp+4], ax
 1822 0acb FC 00 00 00             		call	!!%code(_sprintf)
 486:../src/GSM.c  **** 	strcat(SMScontent,temps);
 1823                             		.loc 1 486 0
 1824 0acf 30 00 00                		movw	ax, #_SMScontent
 1825 0ad2 B8 00                   		movw	[sp], ax
 1826 0ad4 C9 F0 58 00             		movw	r8, #88
 1827 0ad8 AE F8                   		movw	ax, sp
 1828 0ada BD F0                   		movw	r8, ax
 1829 0adc 04 58 00                		addw	ax, #88
 1830 0adf BD F0                   		movw	r8, ax
 1831 0ae1 04 EC FF                		addw	ax, #-20
 1832 0ae4 B8 02                   		movw	[sp+2], ax
 1833 0ae6 FC 00 00 00             		call	!!%code(_strcat)
 487:../src/GSM.c  **** 	sprintf(temps,"IP: %s\n",smsInfo.IP);
 1834                             		.loc 1 487 0
 1835 0aea C9 F2 58 00             		movw	r10, #88
 1836 0aee AE F8                   		movw	ax, sp
 1837 0af0 BD F2                   		movw	r10, ax
 1838 0af2 04 58 00                		addw	ax, #88
 1839 0af5 BD F2                   		movw	r10, ax
 1840 0af7 04 EC FF                		addw	ax, #-20
 1841 0afa B8 00                   		movw	[sp], ax
 1842 0afc 30 B5 02                		movw	ax, #.LC52
 1843 0aff B8 02                   		movw	[sp+2], ax
 1844 0b01 30 00 00                		movw	ax, #_smsInfo+142
 1845 0b04 B8 04                   		movw	[sp+4], ax
 1846 0b06 FC 00 00 00             		call	!!%code(_sprintf)
 488:../src/GSM.c  **** 	strcat(SMScontent,temps);
 1847                             		.loc 1 488 0
 1848 0b0a 30 00 00                		movw	ax, #_SMScontent
 1849 0b0d B8 00                   		movw	[sp], ax
 1850 0b0f C9 EA 58 00             		movw	r18, #88
 1851 0b13 AE F8                   		movw	ax, sp
 1852 0b15 BD EA                   		movw	r18, ax
 1853 0b17 04 58 00                		addw	ax, #88
 1854 0b1a BD EA                   		movw	r18, ax
 1855 0b1c 04 EC FF                		addw	ax, #-20
 1856 0b1f B8 02                   		movw	[sp+2], ax
 1857 0b21 FC 00 00 00             		call	!!%code(_strcat)
 489:../src/GSM.c  **** 	sprintf(temps,"Restarts: %i\n",smsFlags.restartCount);
 1858                             		.loc 1 489 0
 1859 0b25 AF 00 00                		movw	ax, !_smsFlags+20
 1860 0b28 BD F0                   		movw	r8, ax
 1861 0b2a C9 F2 58 00             		movw	r10, #88
 1862 0b2e AE F8                   		movw	ax, sp
 1863 0b30 BD F2                   		movw	r10, ax
 1864 0b32 04 58 00                		addw	ax, #88
 1865 0b35 BD F2                   		movw	r10, ax
 1866 0b37 04 EC FF                		addw	ax, #-20
 1867 0b3a B8 00                   		movw	[sp], ax
 1868 0b3c 30 BD 02                		movw	ax, #.LC53
 1869 0b3f B8 02                   		movw	[sp+2], ax
 1870 0b41 AD F0                   		movw	ax, r8
 1871 0b43 B8 04                   		movw	[sp+4], ax
 1872 0b45 FC 00 00 00             		call	!!%code(_sprintf)
 490:../src/GSM.c  **** 	strcat(SMScontent,temps);
 1873                             		.loc 1 490 0
 1874 0b49 30 00 00                		movw	ax, #_SMScontent
 1875 0b4c B8 00                   		movw	[sp], ax
 1876 0b4e C9 EA 58 00             		movw	r18, #88
 1877 0b52 AE F8                   		movw	ax, sp
 1878 0b54 BD EA                   		movw	r18, ax
 1879 0b56 04 58 00                		addw	ax, #88
 1880 0b59 BD EA                   		movw	r18, ax
 1881 0b5b 04 EC FF                		addw	ax, #-20
 1882 0b5e B8 02                   		movw	[sp+2], ax
 1883 0b60 FC 00 00 00             		call	!!%code(_strcat)
 491:../src/GSM.c  **** 	quality[0] = 0x20;
 1884                             		.loc 1 491 0
 1885 0b64 51 20                   		mov	a, #32
 1886 0b66 9F 00 00                		mov	!_quality, a
 492:../src/GSM.c  **** 	sprintf(temps,"Signal:%s\n",quality);
 1887                             		.loc 1 492 0
 1888 0b69 C9 F0 58 00             		movw	r8, #88
 1889 0b6d AE F8                   		movw	ax, sp
 1890 0b6f BD F0                   		movw	r8, ax
 1891 0b71 04 58 00                		addw	ax, #88
 1892 0b74 BD F0                   		movw	r8, ax
 1893 0b76 04 EC FF                		addw	ax, #-20
 1894 0b79 B8 00                   		movw	[sp], ax
 1895 0b7b 30 CB 02                		movw	ax, #.LC54
 1896 0b7e B8 02                   		movw	[sp+2], ax
 1897 0b80 30 00 00                		movw	ax, #_quality
 1898 0b83 B8 04                   		movw	[sp+4], ax
 1899 0b85 FC 00 00 00             		call	!!%code(_sprintf)
 493:../src/GSM.c  **** 	strcat(SMScontent,temps);
 1900                             		.loc 1 493 0
 1901 0b89 30 00 00                		movw	ax, #_SMScontent
 1902 0b8c B8 00                   		movw	[sp], ax
 1903 0b8e C9 F2 58 00             		movw	r10, #88
 1904 0b92 AE F8                   		movw	ax, sp
 1905 0b94 BD F2                   		movw	r10, ax
 1906 0b96 04 58 00                		addw	ax, #88
 1907 0b99 BD F2                   		movw	r10, ax
 1908 0b9b 04 EC FF                		addw	ax, #-20
 1909 0b9e B8 02                   		movw	[sp+2], ax
 1910 0ba0 FC 00 00 00             		call	!!%code(_strcat)
 494:../src/GSM.c  **** 	sprintf(temps,"URL:%s:%s\n",gsmInfo.url, gsmInfo.urlport);
 1911                             		.loc 1 494 0
 1912 0ba4 C9 EA 58 00             		movw	r18, #88
 1913 0ba8 AE F8                   		movw	ax, sp
 1914 0baa BD EA                   		movw	r18, ax
 1915 0bac 04 58 00                		addw	ax, #88
 1916 0baf BD EA                   		movw	r18, ax
 1917 0bb1 04 EC FF                		addw	ax, #-20
 1918 0bb4 B8 00                   		movw	[sp], ax
 1919 0bb6 30 D6 02                		movw	ax, #.LC55
 1920 0bb9 B8 02                   		movw	[sp+2], ax
 1921 0bbb 30 00 00                		movw	ax, #_gsmInfo
 1922 0bbe B8 04                   		movw	[sp+4], ax
 1923 0bc0 30 00 00                		movw	ax, #_gsmInfo+30
 1924 0bc3 B8 06                   		movw	[sp+6], ax
 1925 0bc5 FC 00 00 00             		call	!!%code(_sprintf)
 495:../src/GSM.c  **** 	strcat(SMScontent,temps);
 1926                             		.loc 1 495 0
 1927 0bc9 30 00 00                		movw	ax, #_SMScontent
 1928 0bcc B8 00                   		movw	[sp], ax
 1929 0bce C9 F0 58 00             		movw	r8, #88
 1930 0bd2 AE F8                   		movw	ax, sp
 1931 0bd4 BD F0                   		movw	r8, ax
 1932 0bd6 04 58 00                		addw	ax, #88
 1933 0bd9 BD F0                   		movw	r8, ax
 1934 0bdb 04 EC FF                		addw	ax, #-20
 1935 0bde B8 02                   		movw	[sp+2], ax
 1936 0be0 FC 00 00 00             		call	!!%code(_strcat)
 496:../src/GSM.c  **** 	//strcat(SMScontent,quality);
 497:../src/GSM.c  **** 	//strcat(SMScontent,"\n");
 498:../src/GSM.c  **** 	rtc time;
 499:../src/GSM.c  **** 	time = getUptime();
 1937                             		.loc 1 499 0
 1938 0be4 AE F8                   		movw	ax, sp
 1939 0be6 BD F2                   		movw	r10, ax
 1940 0be8 04 2C 00                		addw	ax, #44
 1941 0beb BD F0                   		movw	r8, ax
 1942 0bed B8 00                   		movw	[sp], ax
 1943 0bef FC 00 00 00             		call	!!%code(_getUptime)
 500:../src/GSM.c  **** 	char temp1[30];
 501:../src/GSM.c  **** 	sprintf (temp1,"Uptime: %.2dw %.2dd %.2dh %.2dm %.2ds\n", time.weeks, time.days, time.hours, time.
 1944                             		.loc 1 501 0
 1945 0bf3 A8 30                   		movw	ax, [sp+48]
 1946 0bf5 BD E8                   		movw	r16, ax
 1947 0bf7 A8 32                   		movw	ax, [sp+50]
 1948 0bf9 BD F6                   		movw	r14, ax
 1949 0bfb A8 34                   		movw	ax, [sp+52]
 1950 0bfd BD F4                   		movw	r12, ax
 1951 0bff A8 36                   		movw	ax, [sp+54]
 1952 0c01 BD F2                   		movw	r10, ax
 1953 0c03 A8 38                   		movw	ax, [sp+56]
 1954 0c05 BD F0                   		movw	r8, ax
 1955 0c07 C9 EA 58 00             		movw	r18, #88
 1956 0c0b AE F8                   		movw	ax, sp
 1957 0c0d BD EA                   		movw	r18, ax
 1958 0c0f 04 58 00                		addw	ax, #88
 1959 0c12 BD EA                   		movw	r18, ax
 1960 0c14 04 B6 FF                		addw	ax, #-74
 1961 0c17 B8 00                   		movw	[sp], ax
 1962 0c19 30 E1 02                		movw	ax, #.LC56
 1963 0c1c B8 02                   		movw	[sp+2], ax
 1964 0c1e AD E8                   		movw	ax, r16
 1965 0c20 B8 04                   		movw	[sp+4], ax
 1966 0c22 AD F6                   		movw	ax, r14
 1967 0c24 B8 06                   		movw	[sp+6], ax
 1968 0c26 AD F4                   		movw	ax, r12
 1969 0c28 B8 08                   		movw	[sp+8], ax
 1970 0c2a AD F2                   		movw	ax, r10
 1971 0c2c B8 0A                   		movw	[sp+10], ax
 1972 0c2e AD F0                   		movw	ax, r8
 1973 0c30 B8 0C                   		movw	[sp+12], ax
 1974 0c32 FC 00 00 00             		call	!!%code(_sprintf)
 502:../src/GSM.c  **** 	strcat(SMScontent,temp1);
 1975                             		.loc 1 502 0
 1976 0c36 30 00 00                		movw	ax, #_SMScontent
 1977 0c39 B8 00                   		movw	[sp], ax
 1978 0c3b C9 F0 58 00             		movw	r8, #88
 1979 0c3f AE F8                   		movw	ax, sp
 1980 0c41 BD F0                   		movw	r8, ax
 1981 0c43 04 58 00                		addw	ax, #88
 1982 0c46 BD F0                   		movw	r8, ax
 1983 0c48 04 B6 FF                		addw	ax, #-74
 1984 0c4b B8 02                   		movw	[sp+2], ax
 1985 0c4d FC 00 00 00             		call	!!%code(_strcat)
 503:../src/GSM.c  **** 	strcpy (smsInfo.build, SMScontent);
 1986                             		.loc 1 503 0
 1987 0c51 30 00 00                		movw	ax, #_smsInfo+174
 1988 0c54 B8 00                   		movw	[sp], ax
 1989 0c56 30 00 00                		movw	ax, #_SMScontent
 1990 0c59 B8 02                   		movw	[sp+2], ax
 1991 0c5b FC 00 00 00             		call	!!%code(_strcpy)
 504:../src/GSM.c  **** 	//sendData("\r\nSMS content:",UART0);
 505:../src/GSM.c  **** 	//sendData(SMScontent,UART0);
 506:../src/GSM.c  **** 	//sendData("\r\n",UART0);
 507:../src/GSM.c  **** 	sendData("\r\nSMSinfo build:",UART0);
 1992                             		.loc 1 507 0
 1993 0c5f 30 08 03                		movw	ax, #.LC57
 1994 0c62 B8 00                   		movw	[sp], ax
 1995 0c64 F6                      		clrw	ax
 1996 0c65 B8 02                   		movw	[sp+2], ax
 1997 0c67 FC 00 00 00             		call	!!%code(_sendData)
 508:../src/GSM.c  **** 	sendData(smsInfo.build,UART0);
 1998                             		.loc 1 508 0
 1999 0c6b 30 00 00                		movw	ax, #_smsInfo+174
 2000 0c6e B8 00                   		movw	[sp], ax
 2001 0c70 F6                      		clrw	ax
 2002 0c71 B8 02                   		movw	[sp+2], ax
 2003 0c73 FC 00 00 00             		call	!!%code(_sendData)
 509:../src/GSM.c  **** 	sendData("\r\n",UART0);
 2004                             		.loc 1 509 0
 2005 0c77 30 ED 00                		movw	ax, #.LC16
 2006 0c7a B8 00                   		movw	[sp], ax
 2007 0c7c F6                      		clrw	ax
 2008 0c7d B8 02                   		movw	[sp+2], ax
 2009 0c7f FC 00 00 00             		call	!!%code(_sendData)
 510:../src/GSM.c  **** 	smsFlags.reply = 1;			//generates reply sms
 2010                             		.loc 1 510 0
 2011 0c83 E6                      		onew	ax
 2012 0c84 BF 00 00                		movw	!_smsFlags+18, ax
 511:../src/GSM.c  **** 	strcpy(smsInfo.recMSISDN,"0720631005");	//debug for sms from rtc
 2013                             		.loc 1 511 0
 2014 0c87 30 30 37                		movw	ax, #14128
 2015 0c8a BF 00 00                		movw	!_smsInfo+4, ax
 2016 0c8d 30 32 30                		movw	ax, #12338
 2017 0c90 BF 00 00                		movw	!_smsInfo+6, ax
 2018 0c93 30 36 33                		movw	ax, #13110
 2019 0c96 BF 00 00                		movw	!_smsInfo+8, ax
 2020 0c99 30 31 30                		movw	ax, #12337
 2021 0c9c BF 00 00                		movw	!_smsInfo+10, ax
 2022 0c9f 30 30 35                		movw	ax, #13616
 2023 0ca2 BF 00 00                		movw	!_smsInfo+12, ax
 2024 0ca5 F5 00 00                		clrb	!_smsInfo+14
 512:../src/GSM.c  **** }
 2025                             		.loc 1 512 0
 2026 0ca8 10 58                   		addw	sp, #88
 2027 0caa 61 EF                   		sel	rb2
 2028 0cac C2                      		pop	bc ; r18
 2029 0cad C0                      		pop	ax ; r16
 2030 0cae 61 CF                   		sel	rb0
 2031 0cb0 D7                      		ret
 2032                             	.LFE13:
 2034                             		.section	.rodata
 2035                             	.LC58:
 2036 0319 30 2E 00                		.string	"0."
 2037                             	.text
 2038                             		.global	_checkGPRS
 2040                             	_checkGPRS:
 2041                             	.LFB14:
 513:../src/GSM.c  **** 
 514:../src/GSM.c  **** void checkGPRS(){
 2042                             		.loc 1 514 0
 2043                             		; start of function
 2044                             		; locals: 16 bytes
 2045                             		; outgoing: 10 bytes
 2046 0cb1 20 1A                   		subw	sp, #26
 2047                             	.LCFI11:
 515:../src/GSM.c  **** 	char section[15];
 516:../src/GSM.c  **** 	myStrSection(procBuff, smsInfo.IP,10,'"',5);
 2048                             		.loc 1 516 0
 2049 0cb3 30 00 00                		movw	ax, #_procBuff
 2050 0cb6 B8 00                   		movw	[sp], ax
 2051 0cb8 30 00 00                		movw	ax, #_smsInfo+142
 2052 0cbb B8 02                   		movw	[sp+2], ax
 2053 0cbd 30 0A 00                		movw	ax, #10
 2054 0cc0 B8 04                   		movw	[sp+4], ax
 2055 0cc2 30 22 00                		movw	ax, #34
 2056 0cc5 B8 06                   		movw	[sp+6], ax
 2057 0cc7 30 05 00                		movw	ax, #5
 2058 0cca B8 08                   		movw	[sp+8], ax
 2059 0ccc FC 00 00 00             		call	!!%code(_myStrSection)
 517:../src/GSM.c  **** 	if(strncmp((char*)procBuff,"0.",2)==0)smsFlags.gprsActive = 0;
 2060                             		.loc 1 517 0
 2061 0cd0 30 00 00                		movw	ax, #_procBuff
 2062 0cd3 B8 00                   		movw	[sp], ax
 2063 0cd5 30 19 03                		movw	ax, #.LC58
 2064 0cd8 B8 02                   		movw	[sp+2], ax
 2065 0cda 30 02 00                		movw	ax, #2
 2066 0cdd B8 04                   		movw	[sp+4], ax
 2067 0cdf FC 00 00 00             		call	!!%code(_strncmp)
 2068 0ce3 AD F0                   		movw	ax, r8
 2069 0ce5 44 00 00                		cmpw	ax, #0
 2070 0ce8 61 E8                   		 skz
 2071 0cea EC F6 0C 00             		 br	!!.L83
 2072                             		.loc 1 517 0 is_stmt 0 discriminator 1
 2073 0cee F6                      		clrw	ax
 2074 0cef BF 00 00                		movw	!_smsFlags+14, ax
 2075 0cf2 EC FA 0C 00             		br	!!.L82
 2076                             	.L83:
 518:../src/GSM.c  **** 	else smsFlags.gprsActive = 1;
 2077                             		.loc 1 518 0 is_stmt 1
 2078 0cf6 E6                      		onew	ax
 2079 0cf7 BF 00 00                		movw	!_smsFlags+14, ax
 2080                             	.L82:
 519:../src/GSM.c  **** 	/*if (strlen(smsInfo.IP) > 3){
 520:../src/GSM.c  **** 
 521:../src/GSM.c  **** 		smsFlags.gprsActive = 1;
 522:../src/GSM.c  **** 	}*/
 523:../src/GSM.c  **** }
 2081                             		.loc 1 523 0
 2082 0cfa 10 1A                   		addw	sp, #26
 2083 0cfc D7                      		ret
 2084                             	.LFE14:
 2086                             		.section	.rodata
 2087                             	.LC59:
 2088 031c 43 6F 6E 74 65 78 74 20 		.string	"Context opened\r\n"
 2088      6F 70 65 6E 65 64 0D 0A 
 2088      00 
 2089                             	.LC60:
 2090 032d 43 6F 6E 74 65 78 74 20 		.string	"Context closed\r\n"
 2090      63 6C 6F 73 65 64 0D 0A 
 2090      00 
 2091                             	.text
 2092                             		.global	_Context
 2094                             	_Context:
 2095                             	.LFB15:
 524:../src/GSM.c  **** 
 525:../src/GSM.c  **** void Context(){
 2096                             		.loc 1 525 0
 2097                             		; start of function
 2098                             		; locals: 16 bytes
 2099                             		; outgoing: 10 bytes
 2100 0cfd 20 1A                   		subw	sp, #26
 2101                             	.LCFI12:
 526:../src/GSM.c  **** 	char section[15];
 527:../src/GSM.c  **** 	myStrSection(procBuff, smsInfo.IP,15,' ',1);
 2102                             		.loc 1 527 0
 2103 0cff 30 00 00                		movw	ax, #_procBuff
 2104 0d02 B8 00                   		movw	[sp], ax
 2105 0d04 30 00 00                		movw	ax, #_smsInfo+142
 2106 0d07 B8 02                   		movw	[sp+2], ax
 2107 0d09 30 0F 00                		movw	ax, #15
 2108 0d0c B8 04                   		movw	[sp+4], ax
 2109 0d0e 30 20 00                		movw	ax, #32
 2110 0d11 B8 06                   		movw	[sp+6], ax
 2111 0d13 E6                      		onew	ax
 2112 0d14 B8 08                   		movw	[sp+8], ax
 2113 0d16 FC 00 00 00             		call	!!%code(_myStrSection)
 528:../src/GSM.c  **** 	if (strlen(smsInfo.IP) > 3){
 2114                             		.loc 1 528 0
 2115 0d1a 30 00 00                		movw	ax, #_smsInfo+142
 2116 0d1d B8 00                   		movw	[sp], ax
 2117 0d1f FC 00 00 00             		call	!!%code(_strlen)
 2118 0d23 AD F0                   		movw	ax, r8
 2119 0d25 44 03 00                		cmpw	ax, #3
 2120 0d28 61 E3                   		 skh
 2121 0d2a EC 64 0D 00             		 br	!!.L86
 529:../src/GSM.c  **** 		smsFlags.gprsActive = 1;		//if gotten IP
 2122                             		.loc 1 529 0
 2123 0d2e E6                      		onew	ax
 2124 0d2f BF 00 00                		movw	!_smsFlags+14, ax
 530:../src/GSM.c  **** 		smsFlags.gprsPending = 0;
 2125                             		.loc 1 530 0
 2126 0d32 F6                      		clrw	ax
 2127 0d33 BF 00 00                		movw	!_smsFlags+12, ax
 531:../src/GSM.c  **** 		gsmState = 10;
 2128                             		.loc 1 531 0
 2129 0d36 30 0A 00                		movw	ax, #10
 2130 0d39 BF 00 00                		movw	!_gsmState, ax
 532:../src/GSM.c  **** 		sendData(smsInfo.IP,UART0);
 2131                             		.loc 1 532 0
 2132 0d3c 30 00 00                		movw	ax, #_smsInfo+142
 2133 0d3f B8 00                   		movw	[sp], ax
 2134 0d41 F6                      		clrw	ax
 2135 0d42 B8 02                   		movw	[sp+2], ax
 2136 0d44 FC 00 00 00             		call	!!%code(_sendData)
 533:../src/GSM.c  **** 		sendData("\r\n",UART0);
 2137                             		.loc 1 533 0
 2138 0d48 30 ED 00                		movw	ax, #.LC16
 2139 0d4b B8 00                   		movw	[sp], ax
 2140 0d4d F6                      		clrw	ax
 2141 0d4e B8 02                   		movw	[sp+2], ax
 2142 0d50 FC 00 00 00             		call	!!%code(_sendData)
 534:../src/GSM.c  **** 		sendData("Context opened\r\n",UART0);
 2143                             		.loc 1 534 0
 2144 0d54 30 1C 03                		movw	ax, #.LC59
 2145 0d57 B8 00                   		movw	[sp], ax
 2146 0d59 F6                      		clrw	ax
 2147 0d5a B8 02                   		movw	[sp+2], ax
 2148 0d5c FC 00 00 00             		call	!!%code(_sendData)
 2149 0d60 EC 74 0D 00             		br	!!.L85
 2150                             	.L86:
 535:../src/GSM.c  **** 	}
 536:../src/GSM.c  **** 	else{
 537:../src/GSM.c  **** 		smsFlags.gprsActive = 0;
 2151                             		.loc 1 537 0
 2152 0d64 F6                      		clrw	ax
 2153 0d65 BF 00 00                		movw	!_smsFlags+14, ax
 538:../src/GSM.c  **** 		sendData("Context closed\r\n",UART0);
 2154                             		.loc 1 538 0
 2155 0d68 30 2D 03                		movw	ax, #.LC60
 2156 0d6b B8 00                   		movw	[sp], ax
 2157 0d6d F6                      		clrw	ax
 2158 0d6e B8 02                   		movw	[sp+2], ax
 2159 0d70 FC 00 00 00             		call	!!%code(_sendData)
 2160                             	.L85:
 539:../src/GSM.c  **** 	}
 540:../src/GSM.c  **** }
 2161                             		.loc 1 540 0
 2162 0d74 10 1A                   		addw	sp, #26
 2163 0d76 D7                      		ret
 2164                             	.LFE15:
 2166                             		.section	.rodata
 2167                             	.LC61:
 2168 033e 31 00                   		.string	"1"
 2169                             	.LC62:
 2170 0340 32 00                   		.string	"2"
 2171                             	.LC63:
 2172 0342 33 00                   		.string	"3"
 2173                             	.LC64:
 2174 0344 34 00                   		.string	"4"
 2175                             	.LC65:
 2176 0346 53 6F 63 6B 65 74 20 73 		.string	"Socket status: 1:%d 2:%d 3:%d 4:%d \r\n"
 2176      74 61 74 75 73 3A 20 31 
 2176      3A 25 64 20 32 3A 25 64 
 2176      20 33 3A 25 64 20 34 3A 
 2176      25 64 20 0D 0A 00 
 2177                             	.text
 2178                             		.global	_Socket1
 2180                             	_Socket1:
 2181                             	.LFB16:
 541:../src/GSM.c  **** 
 542:../src/GSM.c  **** /*void Socket(){
 543:../src/GSM.c  **** 	char temp[10];
 544:../src/GSM.c  **** 	char temp1[5];
 545:../src/GSM.c  **** 	int index = 0;
 546:../src/GSM.c  **** 	gsmInfo.socket1 = 1;
 547:../src/GSM.c  **** 	gsmInfo.socket2 = 1;
 548:../src/GSM.c  **** 	gsmInfo.socket3 = 1;
 549:../src/GSM.c  **** 	gsmInfo.socket4 = 1;
 550:../src/GSM.c  **** 	gsmInfo.socket = 0;
 551:../src/GSM.c  **** 	myStrSection(procBuff, temp ,15,' ',1);
 552:../src/GSM.c  **** 	for (index = 0; index < 4; index++){
 553:../src/GSM.c  **** 		myStrSection(temp, temp1 ,15,',',index);
 554:../src/GSM.c  **** 		if (strncmp((char*)temp1,"1",1)==0) gsmInfo.socket1 = 0;
 555:../src/GSM.c  **** 		if (strncmp((char*)temp1,"2",1)==0) gsmInfo.socket2 = 0;
 556:../src/GSM.c  **** 		if (strncmp((char*)temp1,"3",1)==0) gsmInfo.socket3 = 0;
 557:../src/GSM.c  **** 		if (strncmp((char*)temp1,"4",1)==0) gsmInfo.socket4 = 0;
 558:../src/GSM.c  **** 	}
 559:../src/GSM.c  **** 	char sock[20];
 560:../src/GSM.c  **** 	sprintf(sock,"Socket status: 1:%d 2:%d 3:%d 4:%d \r\n",gsmInfo.socket1, gsmInfo.socket2, gsmInfo.s
 561:../src/GSM.c  **** 	sendData(sock,UART0);
 562:../src/GSM.c  **** 	if ((gsmInfo.socket1 == 1)||(gsmInfo.socket2 == 1)||(gsmInfo.socket3 == 1)||(gsmInfo.socket4 == 1)
 563:../src/GSM.c  **** 		gsmInfo.socket = 1;
 564:../src/GSM.c  **** 		gsmState = 17;
 565:../src/GSM.c  **** 	}
 566:../src/GSM.c  **** 	else gsmInfo.socket = 0;
 567:../src/GSM.c  **** }*/
 568:../src/GSM.c  **** 
 569:../src/GSM.c  **** void Socket1(){
 2182                             		.loc 1 569 0
 2183                             		; start of function
 2184                             		; push 2: r16
 2185                             		; locals: 42 bytes
 2186                             		; outgoing: 12 bytes
 2187 0d77 61 EF                   		sel	rb2
 2188 0d79 C1                      		push	ax ; r16
 2189                             	.LCFI13:
 2190 0d7a 61 CF                   		sel	rb0
 2191 0d7c 20 36                   		subw	sp, #54
 2192                             	.LCFI14:
 570:../src/GSM.c  **** 	char temp[10];
 571:../src/GSM.c  **** 	char temp1[5];
 572:../src/GSM.c  **** 	char temp2[5];
 573:../src/GSM.c  **** 	int index = 0;
 2193                             		.loc 1 573 0
 2194 0d7e F6                      		clrw	ax
 2195 0d7f B8 34                   		movw	[sp+52], ax
 574:../src/GSM.c  **** 	gsmInfo.socket1 = 0;
 2196                             		.loc 1 574 0
 2197 0d81 F6                      		clrw	ax
 2198 0d82 BF 00 00                		movw	!_gsmInfo+34, ax
 575:../src/GSM.c  **** 	gsmInfo.socket2 = 0;
 2199                             		.loc 1 575 0
 2200 0d85 F6                      		clrw	ax
 2201 0d86 BF 00 00                		movw	!_gsmInfo+36, ax
 576:../src/GSM.c  **** 	gsmInfo.socket3 = 0;
 2202                             		.loc 1 576 0
 2203 0d89 F6                      		clrw	ax
 2204 0d8a BF 00 00                		movw	!_gsmInfo+38, ax
 577:../src/GSM.c  **** 	gsmInfo.socket4 = 0;
 2205                             		.loc 1 577 0
 2206 0d8d F6                      		clrw	ax
 2207 0d8e BF 00 00                		movw	!_gsmInfo+40, ax
 578:../src/GSM.c  **** 	gsmInfo.socket = 0;
 2208                             		.loc 1 578 0
 2209 0d91 F6                      		clrw	ax
 2210 0d92 BF 00 00                		movw	!_gsmInfo+42, ax
 579:../src/GSM.c  **** 	myStrSection(procBuff, temp ,15,' ',1);		//1,1
 2211                             		.loc 1 579 0
 2212 0d95 30 00 00                		movw	ax, #_procBuff
 2213 0d98 B8 00                   		movw	[sp], ax
 2214 0d9a C9 F0 36 00             		movw	r8, #54
 2215 0d9e AE F8                   		movw	ax, sp
 2216 0da0 BD F0                   		movw	r8, ax
 2217 0da2 04 36 00                		addw	ax, #54
 2218 0da5 BD F0                   		movw	r8, ax
 2219 0da7 04 F4 FF                		addw	ax, #-12
 2220 0daa B8 02                   		movw	[sp+2], ax
 2221 0dac 30 0F 00                		movw	ax, #15
 2222 0daf B8 04                   		movw	[sp+4], ax
 2223 0db1 30 20 00                		movw	ax, #32
 2224 0db4 B8 06                   		movw	[sp+6], ax
 2225 0db6 E6                      		onew	ax
 2226 0db7 B8 08                   		movw	[sp+8], ax
 2227 0db9 FC 00 00 00             		call	!!%code(_myStrSection)
 580:../src/GSM.c  **** 	myStrSection(temp, temp1 ,15,',',0);		//socket
 2228                             		.loc 1 580 0
 2229 0dbd C9 F2 36 00             		movw	r10, #54
 2230 0dc1 AE F8                   		movw	ax, sp
 2231 0dc3 BD F2                   		movw	r10, ax
 2232 0dc5 04 36 00                		addw	ax, #54
 2233 0dc8 BD F2                   		movw	r10, ax
 2234 0dca 04 F4 FF                		addw	ax, #-12
 2235 0dcd B8 00                   		movw	[sp], ax
 2236 0dcf C9 F4 36 00             		movw	r12, #54
 2237 0dd3 AE F8                   		movw	ax, sp
 2238 0dd5 BD F4                   		movw	r12, ax
 2239 0dd7 04 36 00                		addw	ax, #54
 2240 0dda BD F4                   		movw	r12, ax
 2241 0ddc 04 EF FF                		addw	ax, #-17
 2242 0ddf B8 02                   		movw	[sp+2], ax
 2243 0de1 30 0F 00                		movw	ax, #15
 2244 0de4 B8 04                   		movw	[sp+4], ax
 2245 0de6 30 2C 00                		movw	ax, #44
 2246 0de9 B8 06                   		movw	[sp+6], ax
 2247 0deb F6                      		clrw	ax
 2248 0dec B8 08                   		movw	[sp+8], ax
 2249 0dee FC 00 00 00             		call	!!%code(_myStrSection)
 581:../src/GSM.c  **** 	myStrSection(temp, temp2 ,15,',',1);		//socket status
 2250                             		.loc 1 581 0
 2251 0df2 C9 E8 36 00             		movw	r16, #54
 2252 0df6 AE F8                   		movw	ax, sp
 2253 0df8 BD E8                   		movw	r16, ax
 2254 0dfa 04 36 00                		addw	ax, #54
 2255 0dfd BD E8                   		movw	r16, ax
 2256 0dff 04 F4 FF                		addw	ax, #-12
 2257 0e02 B8 00                   		movw	[sp], ax
 2258 0e04 C9 F0 36 00             		movw	r8, #54
 2259 0e08 AE F8                   		movw	ax, sp
 2260 0e0a BD F0                   		movw	r8, ax
 2261 0e0c 04 36 00                		addw	ax, #54
 2262 0e0f BD F0                   		movw	r8, ax
 2263 0e11 04 EA FF                		addw	ax, #-22
 2264 0e14 B8 02                   		movw	[sp+2], ax
 2265 0e16 30 0F 00                		movw	ax, #15
 2266 0e19 B8 04                   		movw	[sp+4], ax
 2267 0e1b 30 2C 00                		movw	ax, #44
 2268 0e1e B8 06                   		movw	[sp+6], ax
 2269 0e20 E6                      		onew	ax
 2270 0e21 B8 08                   		movw	[sp+8], ax
 2271 0e23 FC 00 00 00             		call	!!%code(_myStrSection)
 582:../src/GSM.c  **** 	if (strncmp((char*)temp2,"1",1)==0){
 2272                             		.loc 1 582 0
 2273 0e27 AE F8                   		movw	ax, sp
 2274 0e29 BD F2                   		movw	r10, ax
 2275 0e2b 04 20 00                		addw	ax, #32
 2276 0e2e BD F0                   		movw	r8, ax
 2277 0e30 BD F4                   		movw	r12, ax
 2278 0e32 FA F4                   		movw	hl, r12
 2279 0e34 8B                      		mov	a, [hl]
 2280 0e35 9D F1                   		mov	r9, a
 2281 0e37 C9 F2 3E 03             		movw	r10, #.LC61
 2282 0e3b AD F2                   		movw	ax, r10
 2283 0e3d BD E8                   		movw	r16, ax
 2284 0e3f FA E8                   		movw	hl, r16
 2285 0e41 8B                      		mov	a, [hl]
 2286 0e42 9D F0                   		mov	r8, a
 2287 0e44 8D F1                   		mov	a, r9
 2288 0e46 4B F0                   		cmp	a, r8
 2289 0e48 61 E8                   		 skz
 2290 0e4a EC FA 0E 00             		 br	!!.L89
 583:../src/GSM.c  **** 		if (strncmp((char*)temp1,"1",1)==0) gsmInfo.socket1 = 1;
 2291                             		.loc 1 583 0
 2292 0e4e AE F8                   		movw	ax, sp
 2293 0e50 BD F2                   		movw	r10, ax
 2294 0e52 04 25 00                		addw	ax, #37
 2295 0e55 BD F0                   		movw	r8, ax
 2296 0e57 BD F4                   		movw	r12, ax
 2297 0e59 FA F4                   		movw	hl, r12
 2298 0e5b 8B                      		mov	a, [hl]
 2299 0e5c 9D F1                   		mov	r9, a
 2300 0e5e C9 F2 3E 03             		movw	r10, #.LC61
 2301 0e62 AD F2                   		movw	ax, r10
 2302 0e64 BD E8                   		movw	r16, ax
 2303 0e66 FA E8                   		movw	hl, r16
 2304 0e68 8B                      		mov	a, [hl]
 2305 0e69 9D F0                   		mov	r8, a
 2306 0e6b 8D F1                   		mov	a, r9
 2307 0e6d 4B F0                   		cmp	a, r8
 2308 0e6f 61 E8                   		 skz
 2309 0e71 EC 79 0E 00             		 br	!!.L90
 2310                             		.loc 1 583 0 is_stmt 0 discriminator 1
 2311 0e75 E6                      		onew	ax
 2312 0e76 BF 00 00                		movw	!_gsmInfo+34, ax
 2313                             	.L90:
 584:../src/GSM.c  **** 		if (strncmp((char*)temp1,"2",1)==0) gsmInfo.socket2 = 1;
 2314                             		.loc 1 584 0 is_stmt 1
 2315 0e79 AE F8                   		movw	ax, sp
 2316 0e7b BD F2                   		movw	r10, ax
 2317 0e7d 04 25 00                		addw	ax, #37
 2318 0e80 BD F0                   		movw	r8, ax
 2319 0e82 BD F4                   		movw	r12, ax
 2320 0e84 FA F4                   		movw	hl, r12
 2321 0e86 8B                      		mov	a, [hl]
 2322 0e87 9D F1                   		mov	r9, a
 2323 0e89 C9 F2 40 03             		movw	r10, #.LC62
 2324 0e8d AD F2                   		movw	ax, r10
 2325 0e8f BD E8                   		movw	r16, ax
 2326 0e91 FA E8                   		movw	hl, r16
 2327 0e93 8B                      		mov	a, [hl]
 2328 0e94 9D F0                   		mov	r8, a
 2329 0e96 8D F1                   		mov	a, r9
 2330 0e98 4B F0                   		cmp	a, r8
 2331 0e9a 61 E8                   		 skz
 2332 0e9c EC A4 0E 00             		 br	!!.L91
 2333                             		.loc 1 584 0 is_stmt 0 discriminator 1
 2334 0ea0 E6                      		onew	ax
 2335 0ea1 BF 00 00                		movw	!_gsmInfo+36, ax
 2336                             	.L91:
 585:../src/GSM.c  **** 		if (strncmp((char*)temp1,"3",1)==0) gsmInfo.socket3 = 1;
 2337                             		.loc 1 585 0 is_stmt 1
 2338 0ea4 AE F8                   		movw	ax, sp
 2339 0ea6 BD F2                   		movw	r10, ax
 2340 0ea8 04 25 00                		addw	ax, #37
 2341 0eab BD F0                   		movw	r8, ax
 2342 0ead BD F4                   		movw	r12, ax
 2343 0eaf FA F4                   		movw	hl, r12
 2344 0eb1 8B                      		mov	a, [hl]
 2345 0eb2 9D F1                   		mov	r9, a
 2346 0eb4 C9 F2 42 03             		movw	r10, #.LC63
 2347 0eb8 AD F2                   		movw	ax, r10
 2348 0eba BD E8                   		movw	r16, ax
 2349 0ebc FA E8                   		movw	hl, r16
 2350 0ebe 8B                      		mov	a, [hl]
 2351 0ebf 9D F0                   		mov	r8, a
 2352 0ec1 8D F1                   		mov	a, r9
 2353 0ec3 4B F0                   		cmp	a, r8
 2354 0ec5 61 E8                   		 skz
 2355 0ec7 EC CF 0E 00             		 br	!!.L92
 2356                             		.loc 1 585 0 is_stmt 0 discriminator 1
 2357 0ecb E6                      		onew	ax
 2358 0ecc BF 00 00                		movw	!_gsmInfo+38, ax
 2359                             	.L92:
 586:../src/GSM.c  **** 		if (strncmp((char*)temp1,"4",1)==0) gsmInfo.socket4 = 1;
 2360                             		.loc 1 586 0 is_stmt 1
 2361 0ecf AE F8                   		movw	ax, sp
 2362 0ed1 BD F2                   		movw	r10, ax
 2363 0ed3 04 25 00                		addw	ax, #37
 2364 0ed6 BD F0                   		movw	r8, ax
 2365 0ed8 BD F4                   		movw	r12, ax
 2366 0eda FA F4                   		movw	hl, r12
 2367 0edc 8B                      		mov	a, [hl]
 2368 0edd 9D F1                   		mov	r9, a
 2369 0edf C9 F2 44 03             		movw	r10, #.LC64
 2370 0ee3 AD F2                   		movw	ax, r10
 2371 0ee5 BD E8                   		movw	r16, ax
 2372 0ee7 FA E8                   		movw	hl, r16
 2373 0ee9 8B                      		mov	a, [hl]
 2374 0eea 9D F0                   		mov	r8, a
 2375 0eec 8D F1                   		mov	a, r9
 2376 0eee 4B F0                   		cmp	a, r8
 2377 0ef0 61 E8                   		 skz
 2378 0ef2 EC FA 0E 00             		 br	!!.L89
 2379                             		.loc 1 586 0 is_stmt 0 discriminator 1
 2380 0ef6 E6                      		onew	ax
 2381 0ef7 BF 00 00                		movw	!_gsmInfo+40, ax
 2382                             	.L89:
 587:../src/GSM.c  **** 	}
 588:../src/GSM.c  **** 	char sock[20];
 589:../src/GSM.c  **** 	sprintf(sock,"Socket status: 1:%d 2:%d 3:%d 4:%d \r\n",gsmInfo.socket1, gsmInfo.socket2, gsmInfo.s
 2383                             		.loc 1 589 0 is_stmt 1
 2384 0efa AF 00 00                		movw	ax, !_gsmInfo+34
 2385 0efd BD F6                   		movw	r14, ax
 2386 0eff AF 00 00                		movw	ax, !_gsmInfo+36
 2387 0f02 BD F4                   		movw	r12, ax
 2388 0f04 AF 00 00                		movw	ax, !_gsmInfo+38
 2389 0f07 BD F2                   		movw	r10, ax
 2390 0f09 AF 00 00                		movw	ax, !_gsmInfo+40
 2391 0f0c BD F0                   		movw	r8, ax
 2392 0f0e C9 E8 36 00             		movw	r16, #54
 2393 0f12 AE F8                   		movw	ax, sp
 2394 0f14 BD E8                   		movw	r16, ax
 2395 0f16 04 36 00                		addw	ax, #54
 2396 0f19 BD E8                   		movw	r16, ax
 2397 0f1b 04 D6 FF                		addw	ax, #-42
 2398 0f1e B8 00                   		movw	[sp], ax
 2399 0f20 30 46 03                		movw	ax, #.LC65
 2400 0f23 B8 02                   		movw	[sp+2], ax
 2401 0f25 AD F6                   		movw	ax, r14
 2402 0f27 B8 04                   		movw	[sp+4], ax
 2403 0f29 AD F4                   		movw	ax, r12
 2404 0f2b B8 06                   		movw	[sp+6], ax
 2405 0f2d AD F2                   		movw	ax, r10
 2406 0f2f B8 08                   		movw	[sp+8], ax
 2407 0f31 AD F0                   		movw	ax, r8
 2408 0f33 B8 0A                   		movw	[sp+10], ax
 2409 0f35 FC 00 00 00             		call	!!%code(_sprintf)
 590:../src/GSM.c  **** 	sendData(sock,UART0);
 2410                             		.loc 1 590 0
 2411 0f39 C9 F0 36 00             		movw	r8, #54
 2412 0f3d AE F8                   		movw	ax, sp
 2413 0f3f BD F0                   		movw	r8, ax
 2414 0f41 04 36 00                		addw	ax, #54
 2415 0f44 BD F0                   		movw	r8, ax
 2416 0f46 04 D6 FF                		addw	ax, #-42
 2417 0f49 B8 00                   		movw	[sp], ax
 2418 0f4b F6                      		clrw	ax
 2419 0f4c B8 02                   		movw	[sp+2], ax
 2420 0f4e FC 00 00 00             		call	!!%code(_sendData)
 591:../src/GSM.c  **** 	if ((gsmInfo.socket1 == 1)||(gsmInfo.socket2 == 1)||(gsmInfo.socket3 == 1)||(gsmInfo.socket4 == 1)
 2421                             		.loc 1 591 0
 2422 0f52 AF 00 00                		movw	ax, !_gsmInfo+34
 2423 0f55 BD F0                   		movw	r8, ax
 2424 0f57 44 01 00                		cmpw	ax, #1
 2425 0f5a 61 F8                   		 sknz
 2426 0f5c EC 8A 0F 00             		 br	!!.L93
 2427                             		.loc 1 591 0 is_stmt 0 discriminator 1
 2428 0f60 AF 00 00                		movw	ax, !_gsmInfo+36
 2429 0f63 BD F0                   		movw	r8, ax
 2430 0f65 44 01 00                		cmpw	ax, #1
 2431 0f68 61 F8                   		 sknz
 2432 0f6a EC 8A 0F 00             		 br	!!.L93
 2433                             		.loc 1 591 0 discriminator 2
 2434 0f6e AF 00 00                		movw	ax, !_gsmInfo+38
 2435 0f71 BD F0                   		movw	r8, ax
 2436 0f73 44 01 00                		cmpw	ax, #1
 2437 0f76 61 F8                   		 sknz
 2438 0f78 EC 8A 0F 00             		 br	!!.L93
 2439                             		.loc 1 591 0 discriminator 3
 2440 0f7c AF 00 00                		movw	ax, !_gsmInfo+40
 2441 0f7f BD F0                   		movw	r8, ax
 2442 0f81 44 01 00                		cmpw	ax, #1
 2443 0f84 61 E8                   		 skz
 2444 0f86 EC 98 0F 00             		 br	!!.L94
 2445                             	.L93:
 592:../src/GSM.c  **** 		gsmInfo.socket = 1;
 2446                             		.loc 1 592 0 is_stmt 1
 2447 0f8a E6                      		onew	ax
 2448 0f8b BF 00 00                		movw	!_gsmInfo+42, ax
 593:../src/GSM.c  **** 		gsmState = 17;			//send data
 2449                             		.loc 1 593 0
 2450 0f8e 30 11 00                		movw	ax, #17
 2451 0f91 BF 00 00                		movw	!_gsmState, ax
 2452 0f94 EC 9C 0F 00             		br	!!.L88
 2453                             	.L94:
 594:../src/GSM.c  **** 	}
 595:../src/GSM.c  **** 	else gsmInfo.socket = 0;
 2454                             		.loc 1 595 0
 2455 0f98 F6                      		clrw	ax
 2456 0f99 BF 00 00                		movw	!_gsmInfo+42, ax
 2457                             	.L88:
 596:../src/GSM.c  **** }
 2458                             		.loc 1 596 0
 2459 0f9c 10 36                   		addw	sp, #54
 2460 0f9e 61 EF                   		sel	rb2
 2461 0fa0 C0                      		pop	ax ; r16
 2462 0fa1 61 CF                   		sel	rb0
 2463 0fa3 D7                      		ret
 2464                             	.LFE16:
 2466                             		.global	_GotSMS
 2468                             	_GotSMS:
 2469                             	.LFB17:
 597:../src/GSM.c  **** 
 598:../src/GSM.c  **** void GotSMS(){
 2470                             		.loc 1 598 0
 2471                             		; start of function
 2472                             		; locals: 106 bytes
 2473                             		; outgoing: 10 bytes
 2474 0fa4 20 74                   		subw	sp, #116
 2475                             	.LCFI15:
 599:../src/GSM.c  **** 	char section[15];
 600:../src/GSM.c  **** 	char tempData[90];
 601:../src/GSM.c  **** 	strcpy(tempData,procBuff);
 2476                             		.loc 1 601 0
 2477 0fa6 C9 F0 74 00             		movw	r8, #116
 2478 0faa AE F8                   		movw	ax, sp
 2479 0fac BD F0                   		movw	r8, ax
 2480 0fae 04 74 00                		addw	ax, #116
 2481 0fb1 BD F0                   		movw	r8, ax
 2482 0fb3 04 97 FF                		addw	ax, #-105
 2483 0fb6 B8 00                   		movw	[sp], ax
 2484 0fb8 30 00 00                		movw	ax, #_procBuff
 2485 0fbb B8 02                   		movw	[sp+2], ax
 2486 0fbd FC 00 00 00             		call	!!%code(_strcpy)
 602:../src/GSM.c  **** 	//sendData("SMS info:\r\n",UART0);
 603:../src/GSM.c  **** 	myStrSection(procBuff, section,10,',',0);
 2487                             		.loc 1 603 0
 2488 0fc1 30 00 00                		movw	ax, #_procBuff
 2489 0fc4 B8 00                   		movw	[sp], ax
 2490 0fc6 C9 F0 74 00             		movw	r8, #116
 2491 0fca AE F8                   		movw	ax, sp
 2492 0fcc BD F0                   		movw	r8, ax
 2493 0fce 04 74 00                		addw	ax, #116
 2494 0fd1 BD F0                   		movw	r8, ax
 2495 0fd3 04 F1 FF                		addw	ax, #-15
 2496 0fd6 B8 02                   		movw	[sp+2], ax
 2497 0fd8 30 0A 00                		movw	ax, #10
 2498 0fdb B8 04                   		movw	[sp+4], ax
 2499 0fdd 30 2C 00                		movw	ax, #44
 2500 0fe0 B8 06                   		movw	[sp+6], ax
 2501 0fe2 F6                      		clrw	ax
 2502 0fe3 B8 08                   		movw	[sp+8], ax
 2503 0fe5 FC 00 00 00             		call	!!%code(_myStrSection)
 604:../src/GSM.c  **** 	myStrSection(section, smsInfo.index,3,' ',1);
 2504                             		.loc 1 604 0
 2505 0fe9 C9 F0 74 00             		movw	r8, #116
 2506 0fed AE F8                   		movw	ax, sp
 2507 0fef BD F0                   		movw	r8, ax
 2508 0ff1 04 74 00                		addw	ax, #116
 2509 0ff4 BD F0                   		movw	r8, ax
 2510 0ff6 04 F1 FF                		addw	ax, #-15
 2511 0ff9 B8 00                   		movw	[sp], ax
 2512 0ffb 30 00 00                		movw	ax, #_smsInfo
 2513 0ffe B8 02                   		movw	[sp+2], ax
 2514 1000 30 03 00                		movw	ax, #3
 2515 1003 B8 04                   		movw	[sp+4], ax
 2516 1005 30 20 00                		movw	ax, #32
 2517 1008 B8 06                   		movw	[sp+6], ax
 2518 100a E6                      		onew	ax
 2519 100b B8 08                   		movw	[sp+8], ax
 2520 100d FC 00 00 00             		call	!!%code(_myStrSection)
 605:../src/GSM.c  **** 	myStrSection(procBuff, smsInfo.recMSISDN,20,'"',3);
 2521                             		.loc 1 605 0
 2522 1011 30 00 00                		movw	ax, #_procBuff
 2523 1014 B8 00                   		movw	[sp], ax
 2524 1016 30 00 00                		movw	ax, #_smsInfo+4
 2525 1019 B8 02                   		movw	[sp+2], ax
 2526 101b 30 14 00                		movw	ax, #20
 2527 101e B8 04                   		movw	[sp+4], ax
 2528 1020 30 22 00                		movw	ax, #34
 2529 1023 B8 06                   		movw	[sp+6], ax
 2530 1025 30 03 00                		movw	ax, #3
 2531 1028 B8 08                   		movw	[sp+8], ax
 2532 102a FC 00 00 00             		call	!!%code(_myStrSection)
 606:../src/GSM.c  **** 	strcpy(smsInfo.recMSISDN,"0720631005");					//return SMS to default number
 2533                             		.loc 1 606 0
 2534 102e 30 30 37                		movw	ax, #14128
 2535 1031 BF 00 00                		movw	!_smsInfo+4, ax
 2536 1034 30 32 30                		movw	ax, #12338
 2537 1037 BF 00 00                		movw	!_smsInfo+6, ax
 2538 103a 30 36 33                		movw	ax, #13110
 2539 103d BF 00 00                		movw	!_smsInfo+8, ax
 2540 1040 30 31 30                		movw	ax, #12337
 2541 1043 BF 00 00                		movw	!_smsInfo+10, ax
 2542 1046 30 30 35                		movw	ax, #13616
 2543 1049 BF 00 00                		movw	!_smsInfo+12, ax
 2544 104c F5 00 00                		clrb	!_smsInfo+14
 607:../src/GSM.c  **** 	//sendData(smsInfo.recMSISDN,UART0);
 608:../src/GSM.c  **** 	sendData(smsInfo.index,UART0);
 2545                             		.loc 1 608 0
 2546 104f 30 00 00                		movw	ax, #_smsInfo
 2547 1052 B8 00                   		movw	[sp], ax
 2548 1054 F6                      		clrw	ax
 2549 1055 B8 02                   		movw	[sp+2], ax
 2550 1057 FC 00 00 00             		call	!!%code(_sendData)
 609:../src/GSM.c  **** 	sendData("\r\n",UART0);
 2551                             		.loc 1 609 0
 2552 105b 30 ED 00                		movw	ax, #.LC16
 2553 105e B8 00                   		movw	[sp], ax
 2554 1060 F6                      		clrw	ax
 2555 1061 B8 02                   		movw	[sp+2], ax
 2556 1063 FC 00 00 00             		call	!!%code(_sendData)
 610:../src/GSM.c  **** 	//sendData(smsInfo.index,UART0);
 611:../src/GSM.c  **** 	//sendData("\r\n",UART0);
 612:../src/GSM.c  **** 	smsFlags.content = 1;
 2557                             		.loc 1 612 0
 2558 1067 E6                      		onew	ax
 2559 1068 BF 00 00                		movw	!_smsFlags+8, ax
 613:../src/GSM.c  **** }
 2560                             		.loc 1 613 0
 2561 106b 10 74                   		addw	sp, #116
 2562 106d D7                      		ret
 2563                             	.LFE17:
 2565                             		.section	.rodata
 2566                             	.LC66:
 2567 036c 47 6F 74 20 4F 4B 0D 0A 		.string	"Got OK\r\n"
 2567      00 
 2568                             	.LC67:
 2569 0375 53 65 6E 64 20 4F 4B 0D 		.string	"Send OK\r\n"
 2569      0A 00 
 2570                             	.text
 2571                             		.global	_OK
 2573                             	_OK:
 2574                             	.LFB18:
 614:../src/GSM.c  **** 
 615:../src/GSM.c  **** void OK(){
 2575                             		.loc 1 615 0
 2576                             		; start of function
 2577                             		; locals: 20 bytes
 2578                             		; outgoing: 4 bytes
 2579 106e 20 18                   		subw	sp, #24
 2580                             	.LCFI16:
 616:../src/GSM.c  **** 	char count[20];
 617:../src/GSM.c  **** 	sendData("Got OK\r\n",UART0);
 2581                             		.loc 1 617 0
 2582 1070 30 6C 03                		movw	ax, #.LC66
 2583 1073 B8 00                   		movw	[sp], ax
 2584 1075 F6                      		clrw	ax
 2585 1076 B8 02                   		movw	[sp+2], ax
 2586 1078 FC 00 00 00             		call	!!%code(_sendData)
 618:../src/GSM.c  **** 	errorTimer = 0;
 2587                             		.loc 1 618 0
 2588 107c F6                      		clrw	ax
 2589 107d BF 00 00                		movw	!_errorTimer, ax
 619:../src/GSM.c  **** 	if (smsFlags.reply == 1){
 2590                             		.loc 1 619 0
 2591 1080 AF 00 00                		movw	ax, !_smsFlags+18
 2592 1083 BD F0                   		movw	r8, ax
 2593 1085 44 01 00                		cmpw	ax, #1
 2594 1088 61 E8                   		 skz
 2595 108a EC AE 10 00             		 br	!!.L98
 620:../src/GSM.c  **** 	//if (smsFlags.send == 1){
 621:../src/GSM.c  **** 		if (smsFlags.config == 1) gsmState = 6;
 2596                             		.loc 1 621 0
 2597 108e AF 00 00                		movw	ax, !_smsFlags+2
 2598 1091 BD F0                   		movw	r8, ax
 2599 1093 44 01 00                		cmpw	ax, #1
 2600 1096 61 E8                   		 skz
 2601 1098 EC A2 10 00             		 br	!!.L99
 2602                             		.loc 1 621 0 is_stmt 0 discriminator 1
 2603 109c 30 06 00                		movw	ax, #6
 2604 109f BF 00 00                		movw	!_gsmState, ax
 2605                             	.L99:
 622:../src/GSM.c  **** 		sendData("Send OK\r\n",UART0);
 2606                             		.loc 1 622 0 is_stmt 1
 2607 10a2 30 75 03                		movw	ax, #.LC67
 2608 10a5 B8 00                   		movw	[sp], ax
 2609 10a7 F6                      		clrw	ax
 2610 10a8 B8 02                   		movw	[sp+2], ax
 2611 10aa FC 00 00 00             		call	!!%code(_sendData)
 2612                             	.L98:
 623:../src/GSM.c  **** 	}
 624:../src/GSM.c  **** 	if (gsmState == 5) smsFlags.context = 1;
 2613                             		.loc 1 624 0
 2614 10ae AF 00 00                		movw	ax, !_gsmState
 2615 10b1 BD F0                   		movw	r8, ax
 2616 10b3 44 05 00                		cmpw	ax, #5
 2617 10b6 61 E8                   		 skz
 2618 10b8 EC C0 10 00             		 br	!!.L100
 2619                             		.loc 1 624 0 is_stmt 0 discriminator 1
 2620 10bc E6                      		onew	ax
 2621 10bd BF 00 00                		movw	!_smsFlags+10, ax
 2622                             	.L100:
 625:../src/GSM.c  **** 	if (smsFlags.del == 1) gsmState = 12;
 2623                             		.loc 1 625 0 is_stmt 1
 2624 10c0 AF 00 00                		movw	ax, !_smsFlags+16
 2625 10c3 BD F0                   		movw	r8, ax
 2626 10c5 44 01 00                		cmpw	ax, #1
 2627 10c8 61 E8                   		 skz
 2628 10ca EC D4 10 00             		 br	!!.L97
 2629                             		.loc 1 625 0 is_stmt 0 discriminator 1
 2630 10ce 30 0C 00                		movw	ax, #12
 2631 10d1 BF 00 00                		movw	!_gsmState, ax
 2632                             	.L97:
 626:../src/GSM.c  **** 	//if (gsmState == 12) gsmState = 6;
 627:../src/GSM.c  **** 	//sprintf(count, "GSM state=%d", gsmState);
 628:../src/GSM.c  **** 	//sendData(count,UART0);
 629:../src/GSM.c  **** 	//sendData("\r\n",UART0);
 630:../src/GSM.c  **** }
 2633                             		.loc 1 630 0 is_stmt 1
 2634 10d4 10 18                   		addw	sp, #24
 2635 10d6 D7                      		ret
 2636                             	.LFE18:
 2638                             		.section	.rodata
 2639                             	.LC68:
 2640 037f 4C 65 6E 3A 20 25 64 0D 		.string	"Len: %d\r\n"
 2640      0A 00 
 2641                             	.LC69:
 2642 0389 30 41 30 44 00          		.string	"0A0D"
 2643                             	.text
 2644                             		.global	_GPRS_Send
 2646                             	_GPRS_Send:
 2647                             	.LFB19:
 631:../src/GSM.c  **** 
 632:../src/GSM.c  **** void GPRS_Send(char* gprs){
 2648                             		.loc 1 632 0
 2649                             		; start of function
 2650                             		; locals: 40 bytes
 2651                             		; outgoing: 6 bytes
 2652 10d7 20 2E                   		subw	sp, #46
 2653                             	.LCFI17:
 633:../src/GSM.c  **** 	int len;
 634:../src/GSM.c  **** 	len = strlen(gprs);
 2654                             		.loc 1 634 0
 2655 10d9 A8 32                   		movw	ax, [sp+50]
 2656 10db BD F0                   		movw	r8, ax
 2657 10dd B8 00                   		movw	[sp], ax
 2658 10df FC 00 00 00             		call	!!%code(_strlen)
 2659 10e3 AD F0                   		movw	ax, r8
 2660 10e5 B8 2C                   		movw	[sp+44], ax
 635:../src/GSM.c  **** 	char temp[30];
 636:../src/GSM.c  **** 	sprintf (temp,"Len: %d\r\n", len);
 2661                             		.loc 1 636 0
 2662 10e7 C9 F0 2E 00             		movw	r8, #46
 2663 10eb AE F8                   		movw	ax, sp
 2664 10ed BD F0                   		movw	r8, ax
 2665 10ef 04 2E 00                		addw	ax, #46
 2666 10f2 BD F0                   		movw	r8, ax
 2667 10f4 04 DE FF                		addw	ax, #-34
 2668 10f7 B8 00                   		movw	[sp], ax
 2669 10f9 30 7F 03                		movw	ax, #.LC68
 2670 10fc B8 02                   		movw	[sp+2], ax
 2671 10fe A8 2C                   		movw	ax, [sp+44]
 2672 1100 BD F0                   		movw	r8, ax
 2673 1102 B8 04                   		movw	[sp+4], ax
 2674 1104 FC 00 00 00             		call	!!%code(_sprintf)
 637:../src/GSM.c  **** 	sendData(temp,UART0);
 2675                             		.loc 1 637 0
 2676 1108 C9 F2 2E 00             		movw	r10, #46
 2677 110c AE F8                   		movw	ax, sp
 2678 110e BD F2                   		movw	r10, ax
 2679 1110 04 2E 00                		addw	ax, #46
 2680 1113 BD F2                   		movw	r10, ax
 2681 1115 04 DE FF                		addw	ax, #-34
 2682 1118 B8 00                   		movw	[sp], ax
 2683 111a F6                      		clrw	ax
 2684 111b B8 02                   		movw	[sp+2], ax
 2685 111d FC 00 00 00             		call	!!%code(_sendData)
 638:../src/GSM.c  **** 	int ind = 0;
 2686                             		.loc 1 638 0
 2687 1121 F6                      		clrw	ax
 2688 1122 B8 2A                   		movw	[sp+42], ax
 639:../src/GSM.c  **** 
 640:../src/GSM.c  **** 	uint8_t byt[5];
 641:../src/GSM.c  **** 	strcpy((char*)GPRSresult,"");
 2689                             		.loc 1 641 0
 2690 1124 F4 F0                   		clrb	r8
 2691 1126 8D F0                   		mov	a, r8
 2692 1128 9F 00 00                		mov	!_GPRSresult, a
 642:../src/GSM.c  **** 	while (len > 0){
 2693                             		.loc 1 642 0
 2694 112b EC 7E 11 00             		br	!!.L103
 2695                             	.L104:
 2696                             	.LBB4:
 643:../src/GSM.c  **** 		pec_Update(byt,*gprs);
 2697                             		.loc 1 643 0
 2698 112f A8 32                   		movw	ax, [sp+50]
 2699 1131 BD F0                   		movw	r8, ax
 2700 1133 BD F2                   		movw	r10, ax
 2701 1135 FA F2                   		movw	hl, r10
 2702 1137 8B                      		mov	a, [hl]
 2703 1138 9D F0                   		mov	r8, a
 2704 113a C9 F2 2E 00             		movw	r10, #46
 2705 113e AE F8                   		movw	ax, sp
 2706 1140 BD F2                   		movw	r10, ax
 2707 1142 04 2E 00                		addw	ax, #46
 2708 1145 BD F2                   		movw	r10, ax
 2709 1147 04 D9 FF                		addw	ax, #-39
 2710 114a B8 00                   		movw	[sp], ax
 2711 114c 8D F0                   		mov	a, r8
 2712 114e 98 02                   		mov	[sp+2], a
 2713 1150 FC 00 00 00             		call	!!%code(_pec_Update)
 644:../src/GSM.c  **** 		gprs++;
 2714                             		.loc 1 644 0
 2715 1154 A8 32                   		movw	ax, [sp+50]
 2716 1156 A1                      		incw	ax
 2717 1157 B8 32                   		movw	[sp+50], ax
 645:../src/GSM.c  **** 		strcat(GPRSresult,byt);
 2718                             		.loc 1 645 0
 2719 1159 30 00 00                		movw	ax, #_GPRSresult
 2720 115c B8 00                   		movw	[sp], ax
 2721 115e C9 F0 2E 00             		movw	r8, #46
 2722 1162 AE F8                   		movw	ax, sp
 2723 1164 BD F0                   		movw	r8, ax
 2724 1166 04 2E 00                		addw	ax, #46
 2725 1169 BD F0                   		movw	r8, ax
 2726 116b 04 D9 FF                		addw	ax, #-39
 2727 116e B8 02                   		movw	[sp+2], ax
 2728 1170 FC 00 00 00             		call	!!%code(_strcat)
 646:../src/GSM.c  **** 		len--;
 2729                             		.loc 1 646 0
 2730 1174 A8 2C                   		movw	ax, [sp+44]
 2731 1176 B1                      		decw	ax
 2732 1177 B8 2C                   		movw	[sp+44], ax
 647:../src/GSM.c  **** 		ind++;
 2733                             		.loc 1 647 0
 2734 1179 A8 2A                   		movw	ax, [sp+42]
 2735 117b A1                      		incw	ax
 2736 117c B8 2A                   		movw	[sp+42], ax
 2737                             	.L103:
 2738                             	.LBE4:
 642:../src/GSM.c  **** 		pec_Update(byt,*gprs);
 2739                             		.loc 1 642 0
 2740 117e A8 2C                   		movw	ax, [sp+44]
 2741 1180 44 00 00                		cmpw	ax, #0
 2742 1183 71 FF                   		 xor1	CY, a.7
 2743 1185 61 F3                   		 sknh
 2744 1187 EC 2F 11 00             		 br	!!.L104
 648:../src/GSM.c  **** 	}
 649:../src/GSM.c  **** 	strcat(GPRSresult,"0A0D");
 2745                             		.loc 1 649 0
 2746 118b 30 00 00                		movw	ax, #_GPRSresult
 2747 118e B8 00                   		movw	[sp], ax
 2748 1190 FC 00 00 00             		call	!!%code(_strlen)
 2749 1194 AD F0                   		movw	ax, r8
 2750 1196 04 00 00                		addw	ax, #_GPRSresult
 2751 1199 BD F0                   		movw	r8, ax
 2752 119b C9 F4 89 03             		movw	r12, #.LC69
 2753 119f C9 F2 05 00             		movw	r10, #5
 2754 11a3 B8 00                   		movw	[sp], ax
 2755 11a5 AD F4                   		movw	ax, r12
 2756 11a7 B8 02                   		movw	[sp+2], ax
 2757 11a9 AD F2                   		movw	ax, r10
 2758 11ab B8 04                   		movw	[sp+4], ax
 2759 11ad FC 00 00 00             		call	!!%code(_memcpy)
 650:../src/GSM.c  **** 	sendData(GPRSresult,UART1);
 2760                             		.loc 1 650 0
 2761 11b1 30 00 00                		movw	ax, #_GPRSresult
 2762 11b4 B8 00                   		movw	[sp], ax
 2763 11b6 E6                      		onew	ax
 2764 11b7 B8 02                   		movw	[sp+2], ax
 2765 11b9 FC 00 00 00             		call	!!%code(_sendData)
 651:../src/GSM.c  **** 	//sendData("\r\n",UART1);
 652:../src/GSM.c  **** 	sendData(GPRSresult,UART0);
 2766                             		.loc 1 652 0
 2767 11bd 30 00 00                		movw	ax, #_GPRSresult
 2768 11c0 B8 00                   		movw	[sp], ax
 2769 11c2 F6                      		clrw	ax
 2770 11c3 B8 02                   		movw	[sp+2], ax
 2771 11c5 FC 00 00 00             		call	!!%code(_sendData)
 653:../src/GSM.c  **** 	sendData("\r\n",UART0);
 2772                             		.loc 1 653 0
 2773 11c9 30 ED 00                		movw	ax, #.LC16
 2774 11cc B8 00                   		movw	[sp], ax
 2775 11ce F6                      		clrw	ax
 2776 11cf B8 02                   		movw	[sp+2], ax
 2777 11d1 FC 00 00 00             		call	!!%code(_sendData)
 654:../src/GSM.c  **** 	GPRSresult[0] = 0;
 2778                             		.loc 1 654 0
 2779 11d5 F5 00 00                		clrb	!_GPRSresult
 655:../src/GSM.c  **** }
 2780                             		.loc 1 655 0
 2781 11d8 10 2E                   		addw	sp, #46
 2782 11da D7                      		ret
 2783                             	.LFE19:
 2785                             		.section	.rodata
 2786                             	.LC70:
 2787 038e 30 00                   		.string	"0"
 2788                             	.LC71:
 2789 0390 41 43 4B 20 69 6E 64 69 		.string	"ACK indication\r\n"
 2789      63 61 74 69 6F 6E 0D 0A 
 2789      00 
 2790                             	.LC72:
 2791 03a1 42 72 6F 6B 65 6E 20 70 		.string	"Broken protocol stack\r\n"
 2791      72 6F 74 6F 63 6F 6C 20 
 2791      73 74 61 63 6B 0D 0A 00 
 2792                             	.text
 2793                             		.global	_DataStatus
 2795                             	_DataStatus:
 2796                             	.LFB20:
 656:../src/GSM.c  **** 
 657:../src/GSM.c  **** void DataStatus(){
 2797                             		.loc 1 657 0
 2798                             		; start of function
 2799                             		; locals: 20 bytes
 2800                             		; outgoing: 10 bytes
 2801 11db 20 1E                   		subw	sp, #30
 2802                             	.LCFI18:
 658:../src/GSM.c  **** 	char temp[10];
 659:../src/GSM.c  **** 	char temp1[5];
 660:../src/GSM.c  **** 	char temp2[5];
 661:../src/GSM.c  **** 	myStrSection(procBuff, temp ,15,' ',1);		//1,1
 2803                             		.loc 1 661 0
 2804 11dd 30 00 00                		movw	ax, #_procBuff
 2805 11e0 B8 00                   		movw	[sp], ax
 2806 11e2 C9 F0 1E 00             		movw	r8, #30
 2807 11e6 AE F8                   		movw	ax, sp
 2808 11e8 BD F0                   		movw	r8, ax
 2809 11ea 04 1E 00                		addw	ax, #30
 2810 11ed BD F0                   		movw	r8, ax
 2811 11ef 04 F6 FF                		addw	ax, #-10
 2812 11f2 B8 02                   		movw	[sp+2], ax
 2813 11f4 30 0F 00                		movw	ax, #15
 2814 11f7 B8 04                   		movw	[sp+4], ax
 2815 11f9 30 20 00                		movw	ax, #32
 2816 11fc B8 06                   		movw	[sp+6], ax
 2817 11fe E6                      		onew	ax
 2818 11ff B8 08                   		movw	[sp+8], ax
 2819 1201 FC 00 00 00             		call	!!%code(_myStrSection)
 662:../src/GSM.c  **** 	myStrSection(temp, temp1 ,15,',',0);		//socket
 2820                             		.loc 1 662 0
 2821 1205 C9 F2 1E 00             		movw	r10, #30
 2822 1209 AE F8                   		movw	ax, sp
 2823 120b BD F2                   		movw	r10, ax
 2824 120d 04 1E 00                		addw	ax, #30
 2825 1210 BD F2                   		movw	r10, ax
 2826 1212 04 F6 FF                		addw	ax, #-10
 2827 1215 B8 00                   		movw	[sp], ax
 2828 1217 C9 F4 1E 00             		movw	r12, #30
 2829 121b AE F8                   		movw	ax, sp
 2830 121d BD F4                   		movw	r12, ax
 2831 121f 04 1E 00                		addw	ax, #30
 2832 1222 BD F4                   		movw	r12, ax
 2833 1224 04 F1 FF                		addw	ax, #-15
 2834 1227 B8 02                   		movw	[sp+2], ax
 2835 1229 30 0F 00                		movw	ax, #15
 2836 122c B8 04                   		movw	[sp+4], ax
 2837 122e 30 2C 00                		movw	ax, #44
 2838 1231 B8 06                   		movw	[sp+6], ax
 2839 1233 F6                      		clrw	ax
 2840 1234 B8 08                   		movw	[sp+8], ax
 2841 1236 FC 00 00 00             		call	!!%code(_myStrSection)
 663:../src/GSM.c  **** 	myStrSection(temp, temp2 ,15,',',1);		//socket data status
 2842                             		.loc 1 663 0
 2843 123a C9 F0 1E 00             		movw	r8, #30
 2844 123e AE F8                   		movw	ax, sp
 2845 1240 BD F0                   		movw	r8, ax
 2846 1242 04 1E 00                		addw	ax, #30
 2847 1245 BD F0                   		movw	r8, ax
 2848 1247 04 F6 FF                		addw	ax, #-10
 2849 124a B8 00                   		movw	[sp], ax
 2850 124c C9 F2 1E 00             		movw	r10, #30
 2851 1250 AE F8                   		movw	ax, sp
 2852 1252 BD F2                   		movw	r10, ax
 2853 1254 04 1E 00                		addw	ax, #30
 2854 1257 BD F2                   		movw	r10, ax
 2855 1259 04 EC FF                		addw	ax, #-20
 2856 125c B8 02                   		movw	[sp+2], ax
 2857 125e 30 0F 00                		movw	ax, #15
 2858 1261 B8 04                   		movw	[sp+4], ax
 2859 1263 30 2C 00                		movw	ax, #44
 2860 1266 B8 06                   		movw	[sp+6], ax
 2861 1268 E6                      		onew	ax
 2862 1269 B8 08                   		movw	[sp+8], ax
 2863 126b FC 00 00 00             		call	!!%code(_myStrSection)
 664:../src/GSM.c  **** 	if (strncmp((char*)temp2,"0",1)==0){
 2864                             		.loc 1 664 0
 2865 126f AE F8                   		movw	ax, sp
 2866 1271 BD F4                   		movw	r12, ax
 2867 1273 04 0A 00                		addw	ax, #10
 2868 1276 BD F0                   		movw	r8, ax
 2869 1278 BD F2                   		movw	r10, ax
 2870 127a FA F2                   		movw	hl, r10
 2871 127c 8B                      		mov	a, [hl]
 2872 127d 9D F1                   		mov	r9, a
 2873 127f C9 F2 8E 03             		movw	r10, #.LC70
 2874 1283 AD F2                   		movw	ax, r10
 2875 1285 BD F4                   		movw	r12, ax
 2876 1287 FA F4                   		movw	hl, r12
 2877 1289 8B                      		mov	a, [hl]
 2878 128a 9D F0                   		mov	r8, a
 2879 128c 8D F1                   		mov	a, r9
 2880 128e 4B F0                   		cmp	a, r8
 2881 1290 61 E8                   		 skz
 2882 1292 EC A2 12 00             		 br	!!.L106
 665:../src/GSM.c  **** 
 666:../src/GSM.c  **** 			sendData("ACK indication\r\n",UART0);
 2883                             		.loc 1 666 0
 2884 1296 30 90 03                		movw	ax, #.LC71
 2885 1299 B8 00                   		movw	[sp], ax
 2886 129b F6                      		clrw	ax
 2887 129c B8 02                   		movw	[sp+2], ax
 2888 129e FC 00 00 00             		call	!!%code(_sendData)
 2889                             	.L106:
 667:../src/GSM.c  **** 		}
 668:../src/GSM.c  **** 	if (strncmp((char*)temp2,"1",1)==0){
 2890                             		.loc 1 668 0
 2891 12a2 AE F8                   		movw	ax, sp
 2892 12a4 BD F2                   		movw	r10, ax
 2893 12a6 04 0A 00                		addw	ax, #10
 2894 12a9 BD F0                   		movw	r8, ax
 2895 12ab BD F4                   		movw	r12, ax
 2896 12ad FA F4                   		movw	hl, r12
 2897 12af 8B                      		mov	a, [hl]
 2898 12b0 9D F1                   		mov	r9, a
 2899 12b2 C9 F2 3E 03             		movw	r10, #.LC61
 2900 12b6 AD F2                   		movw	ax, r10
 2901 12b8 BD F4                   		movw	r12, ax
 2902 12ba FA F4                   		movw	hl, r12
 2903 12bc 8B                      		mov	a, [hl]
 2904 12bd 9D F0                   		mov	r8, a
 2905 12bf 8D F1                   		mov	a, r9
 2906 12c1 4B F0                   		cmp	a, r8
 2907 12c3 61 E8                   		 skz
 2908 12c5 EC DF 12 00             		 br	!!.L105
 669:../src/GSM.c  **** 		gsmInfo.socket = 0;
 2909                             		.loc 1 669 0
 2910 12c9 F6                      		clrw	ax
 2911 12ca BF 00 00                		movw	!_gsmInfo+42, ax
 670:../src/GSM.c  **** 		sendData("Broken protocol stack\r\n",UART0);
 2912                             		.loc 1 670 0
 2913 12cd 30 A1 03                		movw	ax, #.LC72
 2914 12d0 B8 00                   		movw	[sp], ax
 2915 12d2 F6                      		clrw	ax
 2916 12d3 B8 02                   		movw	[sp+2], ax
 2917 12d5 FC 00 00 00             		call	!!%code(_sendData)
 671:../src/GSM.c  **** 		gsmState = 11;  		//close socket
 2918                             		.loc 1 671 0
 2919 12d9 30 0B 00                		movw	ax, #11
 2920 12dc BF 00 00                		movw	!_gsmState, ax
 2921                             	.L105:
 672:../src/GSM.c  **** 	}
 673:../src/GSM.c  **** }
 2922                             		.loc 1 673 0
 2923 12df 10 1E                   		addw	sp, #30
 2924 12e1 D7                      		ret
 2925                             	.LFE20:
 2927                             		.global	_DataDecrypt
 2929                             	_DataDecrypt:
 2930                             	.LFB21:
 674:../src/GSM.c  **** 
 675:../src/GSM.c  **** void DataDecrypt(){
 2931                             		.loc 1 675 0
 2932                             		; start of function
 2933                             		; locals: 96 bytes
 2934                             		; outgoing: 4 bytes
 2935 12e2 20 64                   		subw	sp, #100
 2936                             	.LCFI19:
 676:../src/GSM.c  **** 	//procBuff
 677:../src/GSM.c  **** 	int value;
 678:../src/GSM.c  **** 	char test[20];
 679:../src/GSM.c  **** 	char test1[10];
 680:../src/GSM.c  **** 	//strcpy(procBuff,"696E672F");
 681:../src/GSM.c  **** 	int len;
 682:../src/GSM.c  **** 	int index = 0;
 2937                             		.loc 1 682 0
 2938 12e4 F6                      		clrw	ax
 2939 12e5 B8 62                   		movw	[sp+98], ax
 683:../src/GSM.c  **** 	char hex[4];
 684:../src/GSM.c  **** 	int hexIndex = 0;
 2940                             		.loc 1 684 0
 2941 12e7 F6                      		clrw	ax
 2942 12e8 B8 60                   		movw	[sp+96], ax
 685:../src/GSM.c  **** 	int count = 0;
 2943                             		.loc 1 685 0
 2944 12ea F6                      		clrw	ax
 2945 12eb B8 5C                   		movw	[sp+92], ax
 686:../src/GSM.c  **** 	len = strlen(procBuff);
 2946                             		.loc 1 686 0
 2947 12ed 30 00 00                		movw	ax, #_procBuff
 2948 12f0 B8 00                   		movw	[sp], ax
 2949 12f2 FC 00 00 00             		call	!!%code(_strlen)
 2950 12f6 AD F0                   		movw	ax, r8
 2951 12f8 B8 5A                   		movw	[sp+90], ax
 687:../src/GSM.c  **** 	//len = strlen(test);
 688:../src/GSM.c  **** 	char receive[50];
 689:../src/GSM.c  **** 	int recIndex = 0;
 2952                             		.loc 1 689 0
 2953 12fa F6                      		clrw	ax
 2954 12fb B8 5E                   		movw	[sp+94], ax
 690:../src/GSM.c  **** 	while (index < len){
 2955                             		.loc 1 690 0
 2956 12fd EC FB 13 00             		br	!!.L109
 2957                             	.L113:
 691:../src/GSM.c  **** 		/*sendData("D\r\n",UART0);
 692:../src/GSM.c  **** 		sprintf(test1, "i:%d\r\n", index);
 693:../src/GSM.c  **** 		sendData(test1,UART0);
 694:../src/GSM.c  **** 		sprintf(test1, "h:%d\r\n", hexIndex);
 695:../src/GSM.c  **** 		sendData(test1,UART0);*/
 696:../src/GSM.c  **** 
 697:../src/GSM.c  **** 		if (hexIndex < 2){
 2958                             		.loc 1 697 0
 2959 1301 A8 60                   		movw	ax, [sp+96]
 2960 1303 44 01 00                		cmpw	ax, #1
 2961 1306 71 FF                   		 xor1	CY, a.7
 2962 1308 61 F3                   		 sknh
 2963 130a EC 3B 13 00             		 br	!!.L110
 698:../src/GSM.c  **** 			//hex[hexIndex] = test[index];
 699:../src/GSM.c  **** 			hex[hexIndex] = procBuff[index];
 2964                             		.loc 1 699 0
 2965 130e A8 62                   		movw	ax, [sp+98]
 2966 1310 04 00 00                		addw	ax, #_procBuff
 2967 1313 BD F0                   		movw	r8, ax
 2968 1315 BD F4                   		movw	r12, ax
 2969 1317 FA F4                   		movw	hl, r12
 2970 1319 8B                      		mov	a, [hl]
 2971 131a 9D F2                   		mov	r10, a
 2972 131c AE F8                   		movw	ax, sp
 2973 131e BD F4                   		movw	r12, ax
 2974 1320 04 36 00                		addw	ax, #54
 2975 1323 BD F0                   		movw	r8, ax
 2976 1325 A8 60                   		movw	ax, [sp+96]
 2977 1327 06 F0                   		addw	ax, r8
 2978 1329 BD F0                   		movw	r8, ax
 2979 132b BD F4                   		movw	r12, ax
 2980 132d EA F4                   		movw	de, r12
 2981 132f 8D F2                   		mov	a, r10
 2982 1331 99                      		mov	[de], a
 700:../src/GSM.c  **** 			hexIndex++;
 2983                             		.loc 1 700 0
 2984 1332 A8 60                   		movw	ax, [sp+96]
 2985 1334 A1                      		incw	ax
 2986 1335 B8 60                   		movw	[sp+96], ax
 2987 1337 EC A9 13 00             		br	!!.L111
 2988                             	.L110:
 701:../src/GSM.c  **** 
 702:../src/GSM.c  **** 		}
 703:../src/GSM.c  **** 		else {			//hex index == 2
 704:../src/GSM.c  **** 			hexIndex = 0;
 2989                             		.loc 1 704 0
 2990 133b F6                      		clrw	ax
 2991 133c B8 60                   		movw	[sp+96], ax
 705:../src/GSM.c  **** 			hex[2] = 0;
 2992                             		.loc 1 705 0
 2993 133e F1                      		clrb	a
 2994 133f 98 38                   		mov	[sp+56], a
 706:../src/GSM.c  **** 			/*sendData("2\r\n",UART0);
 707:../src/GSM.c  **** 			sendByte(hex[0], UART0);
 708:../src/GSM.c  **** 			sendByte(hex[1], UART0);*/
 709:../src/GSM.c  **** 			value = Getvalue(hex[0]) * 16;
 2995                             		.loc 1 709 0
 2996 1341 88 36                   		mov	a, [sp+54]
 2997 1343 9D F0                   		mov	r8, a
 2998 1345 98 00                   		mov	[sp], a
 2999 1347 FC 00 00 00             		call	!!%code(_Getvalue)
 3000 134b AD F0                   		movw	ax, r8
 3001 134d 31 4D                   		shlw	ax, 4
 3002 134f B8 58                   		movw	[sp+88], ax
 710:../src/GSM.c  **** 			value += Getvalue(hex[1]);
 3003                             		.loc 1 710 0
 3004 1351 88 37                   		mov	a, [sp+55]
 3005 1353 9D F0                   		mov	r8, a
 3006 1355 98 00                   		mov	[sp], a
 3007 1357 FC 00 00 00             		call	!!%code(_Getvalue)
 3008 135b A8 58                   		movw	ax, [sp+88]
 3009 135d 06 F0                   		addw	ax, r8
 3010 135f B8 58                   		movw	[sp+88], ax
 711:../src/GSM.c  **** 			receive[recIndex] = value;
 3011                             		.loc 1 711 0
 3012 1361 88 58                   		mov	a, [sp+88]
 3013 1363 9D F2                   		mov	r10, a
 3014 1365 AE F8                   		movw	ax, sp
 3015 1367 BD F4                   		movw	r12, ax
 3016 1369 04 04 00                		addw	ax, #4
 3017 136c BD F0                   		movw	r8, ax
 3018 136e A8 5E                   		movw	ax, [sp+94]
 3019 1370 06 F0                   		addw	ax, r8
 3020 1372 BD F0                   		movw	r8, ax
 3021 1374 BD F4                   		movw	r12, ax
 3022 1376 EA F4                   		movw	de, r12
 3023 1378 8D F2                   		mov	a, r10
 3024 137a 99                      		mov	[de], a
 712:../src/GSM.c  **** 			recIndex++;
 3025                             		.loc 1 712 0
 3026 137b A8 5E                   		movw	ax, [sp+94]
 3027 137d A1                      		incw	ax
 3028 137e B8 5E                   		movw	[sp+94], ax
 713:../src/GSM.c  **** 			//sprintf(test1, "VALUE:%d\r\n", value);
 714:../src/GSM.c  **** 			//sendData(test1,UART0);
 715:../src/GSM.c  **** 			//if (value == 105) sendData("First byte 105\r\n",UART0);
 716:../src/GSM.c  **** 			//hex[hexIndex] = test[index];
 717:../src/GSM.c  **** 			hex[hexIndex] = procBuff[index];
 3029                             		.loc 1 717 0
 3030 1380 A8 62                   		movw	ax, [sp+98]
 3031 1382 04 00 00                		addw	ax, #_procBuff
 3032 1385 BD F0                   		movw	r8, ax
 3033 1387 BD F4                   		movw	r12, ax
 3034 1389 FA F4                   		movw	hl, r12
 3035 138b 8B                      		mov	a, [hl]
 3036 138c 9D F2                   		mov	r10, a
 3037 138e AE F8                   		movw	ax, sp
 3038 1390 BD F4                   		movw	r12, ax
 3039 1392 04 36 00                		addw	ax, #54
 3040 1395 BD F0                   		movw	r8, ax
 3041 1397 A8 60                   		movw	ax, [sp+96]
 3042 1399 06 F0                   		addw	ax, r8
 3043 139b BD F0                   		movw	r8, ax
 3044 139d BD F4                   		movw	r12, ax
 3045 139f EA F4                   		movw	de, r12
 3046 13a1 8D F2                   		mov	a, r10
 3047 13a3 99                      		mov	[de], a
 718:../src/GSM.c  **** 			hexIndex++;
 3048                             		.loc 1 718 0
 3049 13a4 A8 60                   		movw	ax, [sp+96]
 3050 13a6 A1                      		incw	ax
 3051 13a7 B8 60                   		movw	[sp+96], ax
 3052                             	.L111:
 719:../src/GSM.c  **** 		}
 720:../src/GSM.c  **** 		if (index == 7){
 3053                             		.loc 1 720 0
 3054 13a9 A8 62                   		movw	ax, [sp+98]
 3055 13ab 44 07 00                		cmpw	ax, #7
 3056 13ae 61 E8                   		 skz
 3057 13b0 EC F6 13 00             		 br	!!.L112
 721:../src/GSM.c  **** 			hex[2] = 0;
 3058                             		.loc 1 721 0
 3059 13b4 F1                      		clrb	a
 3060 13b5 98 38                   		mov	[sp+56], a
 722:../src/GSM.c  **** 			/*sendData("3\r\n",UART0);
 723:../src/GSM.c  **** 			sendByte(hex[0], UART0);
 724:../src/GSM.c  **** 			sendByte(hex[1], UART0);*/
 725:../src/GSM.c  **** 			value = Getvalue(hex[0]) * 16;
 3061                             		.loc 1 725 0
 3062 13b7 88 36                   		mov	a, [sp+54]
 3063 13b9 9D F0                   		mov	r8, a
 3064 13bb 98 00                   		mov	[sp], a
 3065 13bd FC 00 00 00             		call	!!%code(_Getvalue)
 3066 13c1 AD F0                   		movw	ax, r8
 3067 13c3 31 4D                   		shlw	ax, 4
 3068 13c5 B8 58                   		movw	[sp+88], ax
 726:../src/GSM.c  **** 			value += Getvalue(hex[1]);
 3069                             		.loc 1 726 0
 3070 13c7 88 37                   		mov	a, [sp+55]
 3071 13c9 9D F0                   		mov	r8, a
 3072 13cb 98 00                   		mov	[sp], a
 3073 13cd FC 00 00 00             		call	!!%code(_Getvalue)
 3074 13d1 A8 58                   		movw	ax, [sp+88]
 3075 13d3 06 F0                   		addw	ax, r8
 3076 13d5 B8 58                   		movw	[sp+88], ax
 727:../src/GSM.c  **** 			receive[recIndex] = value;
 3077                             		.loc 1 727 0
 3078 13d7 88 58                   		mov	a, [sp+88]
 3079 13d9 9D F2                   		mov	r10, a
 3080 13db AE F8                   		movw	ax, sp
 3081 13dd BD F4                   		movw	r12, ax
 3082 13df 04 04 00                		addw	ax, #4
 3083 13e2 BD F0                   		movw	r8, ax
 3084 13e4 A8 5E                   		movw	ax, [sp+94]
 3085 13e6 06 F0                   		addw	ax, r8
 3086 13e8 BD F0                   		movw	r8, ax
 3087 13ea BD F4                   		movw	r12, ax
 3088 13ec EA F4                   		movw	de, r12
 3089 13ee 8D F2                   		mov	a, r10
 3090 13f0 99                      		mov	[de], a
 728:../src/GSM.c  **** 			recIndex++;
 3091                             		.loc 1 728 0
 3092 13f1 A8 5E                   		movw	ax, [sp+94]
 3093 13f3 A1                      		incw	ax
 3094 13f4 B8 5E                   		movw	[sp+94], ax
 3095                             	.L112:
 729:../src/GSM.c  **** 			//if (strncmp((char*)hex,"6",1)==0) sendData("First nibble 6\r\n",UART0);
 730:../src/GSM.c  **** 		}
 731:../src/GSM.c  **** 		index++;
 3096                             		.loc 1 731 0
 3097 13f6 A8 62                   		movw	ax, [sp+98]
 3098 13f8 A1                      		incw	ax
 3099 13f9 B8 62                   		movw	[sp+98], ax
 3100                             	.L109:
 690:../src/GSM.c  **** 		/*sendData("D\r\n",UART0);
 3101                             		.loc 1 690 0
 3102 13fb A8 5A                   		movw	ax, [sp+90]
 3103 13fd BD F0                   		movw	r8, ax
 3104 13ff A8 62                   		movw	ax, [sp+98]
 3105 1401 46 F0                   		cmpw	ax, r8
 3106 1403 71 FF                   		 xor1	CY, a.7
 3107 1405 71 77 F1                		 xor1	CY, r9.7
 3108 1408 61 D8                   		 sknc
 3109 140a EC 01 13 00             		 br	!!.L113
 732:../src/GSM.c  **** 	}
 733:../src/GSM.c  **** 	recIndex++;
 3110                             		.loc 1 733 0
 3111 140e A8 5E                   		movw	ax, [sp+94]
 3112 1410 A1                      		incw	ax
 3113 1411 B8 5E                   		movw	[sp+94], ax
 734:../src/GSM.c  **** 	receive[recIndex] = 0;
 3114                             		.loc 1 734 0
 3115 1413 AE F8                   		movw	ax, sp
 3116 1415 BD F2                   		movw	r10, ax
 3117 1417 04 04 00                		addw	ax, #4
 3118 141a BD F0                   		movw	r8, ax
 3119 141c A8 5E                   		movw	ax, [sp+94]
 3120 141e 06 F0                   		addw	ax, r8
 3121 1420 BD F0                   		movw	r8, ax
 3122 1422 BD F4                   		movw	r12, ax
 3123 1424 EA F4                   		movw	de, r12
 3124 1426 F1                      		clrb	a
 3125 1427 99                      		mov	[de], a
 735:../src/GSM.c  **** 	sendData(receive,UART0);
 3126                             		.loc 1 735 0
 3127 1428 C9 F0 64 00             		movw	r8, #100
 3128 142c AE F8                   		movw	ax, sp
 3129 142e BD F0                   		movw	r8, ax
 3130 1430 04 64 00                		addw	ax, #100
 3131 1433 BD F0                   		movw	r8, ax
 3132 1435 04 A0 FF                		addw	ax, #-96
 3133 1438 B8 00                   		movw	[sp], ax
 3134 143a F6                      		clrw	ax
 3135 143b B8 02                   		movw	[sp+2], ax
 3136 143d FC 00 00 00             		call	!!%code(_sendData)
 736:../src/GSM.c  **** 	sendData("\r\n",UART0);
 3137                             		.loc 1 736 0
 3138 1441 30 ED 00                		movw	ax, #.LC16
 3139 1444 B8 00                   		movw	[sp], ax
 3140 1446 F6                      		clrw	ax
 3141 1447 B8 02                   		movw	[sp+2], ax
 3142 1449 FC 00 00 00             		call	!!%code(_sendData)
 737:../src/GSM.c  **** }
 3143                             		.loc 1 737 0
 3144 144d 10 64                   		addw	sp, #100
 3145 144f D7                      		ret
 3146                             	.LFE21:
 3148                             		.global	_Getvalue
 3150                             	_Getvalue:
 3151                             	.LFB22:
 738:../src/GSM.c  **** 
 739:../src/GSM.c  **** int Getvalue(char in){
 3152                             		.loc 1 739 0
 3153                             		; start of function
 3154                             		; locals: 4 bytes
 3155 1450 20 04                   		subw	sp, #4
 3156                             	.LCFI20:
 740:../src/GSM.c  **** 	int count = 0;
 3157                             		.loc 1 740 0
 3158 1452 F6                      		clrw	ax
 3159 1453 B8 02                   		movw	[sp+2], ax
 741:../src/GSM.c  **** 
 742:../src/GSM.c  **** 	int compare = 0x30;
 3160                             		.loc 1 742 0
 3161 1455 30 30 00                		movw	ax, #48
 3162 1458 B8 00                   		movw	[sp], ax
 743:../src/GSM.c  **** 	compare = 0x30;
 3163                             		.loc 1 743 0
 3164 145a 30 30 00                		movw	ax, #48
 3165 145d B8 00                   		movw	[sp], ax
 744:../src/GSM.c  **** 	if ((in >= 0x30) && (in <= 0x39)){
 3166                             		.loc 1 744 0
 3167 145f 88 08                   		mov	a, [sp+8]
 3168 1461 4C 2F                   		cmp	a, #47
 3169 1463 61 E3                   		 skh
 3170 1465 EC 95 14 00             		 br	!!.L115
 3171                             		.loc 1 744 0 is_stmt 0 discriminator 1
 3172 1469 88 08                   		mov	a, [sp+8]
 3173 146b 4C 39                   		cmp	a, #57
 3174 146d 61 F3                   		 sknh
 3175 146f EC 95 14 00             		 br	!!.L115
 745:../src/GSM.c  **** 		 //sendData("Number\r\n",UART0);
 746:../src/GSM.c  **** 		 while(compare != in){
 3176                             		.loc 1 746 0 is_stmt 1
 3177 1473 EC 81 14 00             		br	!!.L116
 3178                             	.L117:
 747:../src/GSM.c  **** 			 //sendByte(compare, UART0);
 748:../src/GSM.c  **** 			 compare++;
 3179                             		.loc 1 748 0
 3180 1477 A8 00                   		movw	ax, [sp]
 3181 1479 A1                      		incw	ax
 3182 147a B8 00                   		movw	[sp], ax
 749:../src/GSM.c  **** 			 count++;
 3183                             		.loc 1 749 0
 3184 147c A8 02                   		movw	ax, [sp+2]
 3185 147e A1                      		incw	ax
 3186 147f B8 02                   		movw	[sp+2], ax
 3187                             	.L116:
 746:../src/GSM.c  **** 			 //sendByte(compare, UART0);
 3188                             		.loc 1 746 0
 3189 1481 88 08                   		mov	a, [sp+8]
 3190 1483 31 8E                   		shrw	ax, 8
 3191 1485 BD F2                   		movw	r10, ax
 3192 1487 A8 00                   		movw	ax, [sp]
 3193 1489 BD F0                   		movw	r8, ax
 3194 148b AD F2                   		movw	ax, r10
 3195 148d 46 F0                   		cmpw	ax, r8
 3196 148f 61 E8                   		 skz
 3197 1491 EC 77 14 00             		 br	!!.L117
 3198                             	.L115:
 750:../src/GSM.c  **** 		 }
 751:../src/GSM.c  **** 	 }
 752:../src/GSM.c  **** 	compare = 0x41;
 3199                             		.loc 1 752 0
 3200 1495 30 41 00                		movw	ax, #65
 3201 1498 B8 00                   		movw	[sp], ax
 753:../src/GSM.c  **** 	 if ((in >= 0x41) && (in <= 0x46)){
 3202                             		.loc 1 753 0
 3203 149a 88 08                   		mov	a, [sp+8]
 3204 149c 4C 40                   		cmp	a, #64
 3205 149e 61 E3                   		 skh
 3206 14a0 EC D7 14 00             		 br	!!.L118
 3207                             		.loc 1 753 0 is_stmt 0 discriminator 1
 3208 14a4 88 08                   		mov	a, [sp+8]
 3209 14a6 4C 46                   		cmp	a, #70
 3210 14a8 61 F3                   		 sknh
 3211 14aa EC D7 14 00             		 br	!!.L118
 754:../src/GSM.c  **** 		 //sendData("Letter\r\n",UART0);
 755:../src/GSM.c  **** 		 while(compare != in){
 3212                             		.loc 1 755 0 is_stmt 1
 3213 14ae EC BC 14 00             		br	!!.L119
 3214                             	.L120:
 756:../src/GSM.c  **** 			 //sendByte(compare, UART0);
 757:../src/GSM.c  **** 			 compare++;
 3215                             		.loc 1 757 0
 3216 14b2 A8 00                   		movw	ax, [sp]
 3217 14b4 A1                      		incw	ax
 3218 14b5 B8 00                   		movw	[sp], ax
 758:../src/GSM.c  **** 			 count++;
 3219                             		.loc 1 758 0
 3220 14b7 A8 02                   		movw	ax, [sp+2]
 3221 14b9 A1                      		incw	ax
 3222 14ba B8 02                   		movw	[sp+2], ax
 3223                             	.L119:
 755:../src/GSM.c  **** 			 //sendByte(compare, UART0);
 3224                             		.loc 1 755 0
 3225 14bc 88 08                   		mov	a, [sp+8]
 3226 14be 31 8E                   		shrw	ax, 8
 3227 14c0 BD F2                   		movw	r10, ax
 3228 14c2 A8 00                   		movw	ax, [sp]
 3229 14c4 BD F0                   		movw	r8, ax
 3230 14c6 AD F2                   		movw	ax, r10
 3231 14c8 46 F0                   		cmpw	ax, r8
 3232 14ca 61 E8                   		 skz
 3233 14cc EC B2 14 00             		 br	!!.L120
 759:../src/GSM.c  **** 		 }
 760:../src/GSM.c  **** 		 count += 10;
 3234                             		.loc 1 760 0
 3235 14d0 A8 02                   		movw	ax, [sp+2]
 3236 14d2 04 0A 00                		addw	ax, #10
 3237 14d5 B8 02                   		movw	[sp+2], ax
 3238                             	.L118:
 761:../src/GSM.c  **** 	 }
 762:../src/GSM.c  **** 	 //char testS[5];
 763:../src/GSM.c  **** 	 //sprintf(testS, "c:%d\r\n", count);
 764:../src/GSM.c  **** 	 //sendData(testS,UART0);
 765:../src/GSM.c  **** 	return count;
 3239                             		.loc 1 765 0
 3240 14d7 A8 02                   		movw	ax, [sp+2]
 3241 14d9 BD F0                   		movw	r8, ax
 766:../src/GSM.c  **** }
 3242                             		.loc 1 766 0
 3243 14db 10 04                   		addw	sp, #4
 3244 14dd D7                      		ret
 3245                             	.LFE22:
 3247                             		.global	_recByte
 3249                             	_recByte:
 3250                             	.LFB23:
 767:../src/GSM.c  **** 
 768:../src/GSM.c  **** 
 769:../src/GSM.c  **** void recByte(char data){
 3251                             		.loc 1 769 0
 770:../src/GSM.c  **** 	recBuff[recBuffPointerWrite] = data;
 3252                             		.loc 1 770 0
 3253 14de AF 00 00                		movw	ax, !_recBuffPointerWrite
 3254 14e1 BD F0                   		movw	r8, ax
 3255 14e3 88 04                   		mov	a, [sp+4]
 3256 14e5 9D F2                   		mov	r10, a
 3257 14e7 DA F0                   		movw	bc, r8
 3258 14e9 48 00 00                		mov	_recBuff[bc], a
 771:../src/GSM.c  **** 	recBuffPointerWrite++;
 3259                             		.loc 1 771 0
 3260 14ec AF 00 00                		movw	ax, !_recBuffPointerWrite
 3261 14ef BD F0                   		movw	r8, ax
 3262 14f1 A6 F0                   		incw	r8
 3263 14f3 AD F0                   		movw	ax, r8
 3264 14f5 BF 00 00                		movw	!_recBuffPointerWrite, ax
 772:../src/GSM.c  **** 	if (recBuffPointerWrite > recBuffSize) recBuffPointerWrite = 0;
 3265                             		.loc 1 772 0
 3266 14f8 BD F0                   		movw	r8, ax
 3267 14fa 44 FA 00                		cmpw	ax, #250
 3268 14fd 71 FF                   		 xor1	CY, a.7
 3269 14ff 61 E3                   		 skh
 3270 1501 EC 09 15 00             		 br	!!.L122
 3271                             		.loc 1 772 0 is_stmt 0 discriminator 1
 3272 1505 F6                      		clrw	ax
 3273 1506 BF 00 00                		movw	!_recBuffPointerWrite, ax
 3274                             	.L122:
 773:../src/GSM.c  **** 	//sendByte(data, UART0);
 774:../src/GSM.c  **** }
 3275                             		.loc 1 774 0 is_stmt 1
 3276 1509 D7                      		ret
 3277                             	.LFE23:
 3279                             		.section	.rodata
 3282                             	_lookup.1902:
 3283 03b9 32 31 00                		.string	"21"
 3284 03bc 32 32 00                		.string	"22"
 3285 03bf 32 33 00                		.string	"23"
 3286 03c2 32 34 00                		.string	"24"
 3287 03c5 32 35 00                		.string	"25"
 3288 03c8 32 36 00                		.string	"26"
 3289 03cb 32 37 00                		.string	"27"
 3290 03ce 32 38 00                		.string	"28"
 3291 03d1 32 39 00                		.string	"29"
 3292 03d4 32 41 00                		.string	"2A"
 3293 03d7 32 42 00                		.string	"2B"
 3294 03da 32 43 00                		.string	"2C"
 3295 03dd 32 44 00                		.string	"2D"
 3296 03e0 32 45 00                		.string	"2E"
 3297 03e3 32 46 00                		.string	"2F"
 3298 03e6 33 30 00                		.string	"30"
 3299 03e9 33 31 00                		.string	"31"
 3300 03ec 33 32 00                		.string	"32"
 3301 03ef 33 33 00                		.string	"33"
 3302 03f2 33 34 00                		.string	"34"
 3303 03f5 33 35 00                		.string	"35"
 3304 03f8 33 36 00                		.string	"36"
 3305 03fb 33 37 00                		.string	"37"
 3306 03fe 33 38 00                		.string	"38"
 3307 0401 33 39 00                		.string	"39"
 3308 0404 33 41 00                		.string	"3A"
 3309 0407 33 42 00                		.string	"3B"
 3310 040a 33 43 00                		.string	"3C"
 3311 040d 33 44 00                		.string	"3D"
 3312 0410 33 45 00                		.string	"3E"
 3313 0413 33 46 00                		.string	"3F"
 3314 0416 34 30 00                		.string	"40"
 3315 0419 34 31 00                		.string	"41"
 3316 041c 34 32 00                		.string	"42"
 3317 041f 34 33 00                		.string	"43"
 3318 0422 34 34 00                		.string	"44"
 3319 0425 34 35 00                		.string	"45"
 3320 0428 34 36 00                		.string	"46"
 3321 042b 34 37 00                		.string	"47"
 3322 042e 34 38 00                		.string	"48"
 3323 0431 34 39 00                		.string	"49"
 3324 0434 34 41 00                		.string	"4A"
 3325 0437 34 42 00                		.string	"4B"
 3326 043a 34 43 00                		.string	"4C"
 3327 043d 34 44 00                		.string	"4D"
 3328 0440 34 45 00                		.string	"4E"
 3329 0443 34 46 00                		.string	"4F"
 3330 0446 35 30 00                		.string	"50"
 3331 0449 35 31 00                		.string	"51"
 3332 044c 35 32 00                		.string	"52"
 3333 044f 35 33 00                		.string	"53"
 3334 0452 35 34 00                		.string	"54"
 3335 0455 35 35 00                		.string	"55"
 3336 0458 35 36 00                		.string	"56"
 3337 045b 35 37 00                		.string	"57"
 3338 045e 35 38 00                		.string	"58"
 3339 0461 35 39 00                		.string	"59"
 3340 0464 35 41 00                		.string	"5A"
 3341 0467 35 42 00                		.string	"5B"
 3342 046a 35 43 00                		.string	"5C"
 3343 046d 35 44 00                		.string	"5D"
 3344 0470 35 45 00                		.string	"5E"
 3345 0473 35 46 00                		.string	"5F"
 3346 0476 36 30 00                		.string	"60"
 3347 0479 36 31 00                		.string	"61"
 3348 047c 36 32 00                		.string	"62"
 3349 047f 36 33 00                		.string	"63"
 3350 0482 36 34 00                		.string	"64"
 3351 0485 36 35 00                		.string	"65"
 3352 0488 36 36 00                		.string	"66"
 3353 048b 36 37 00                		.string	"67"
 3354 048e 36 38 00                		.string	"68"
 3355 0491 36 39 00                		.string	"69"
 3356 0494 36 41 00                		.string	"6A"
 3357 0497 36 42 00                		.string	"6B"
 3358 049a 36 43 00                		.string	"6C"
 3359 049d 36 44 00                		.string	"6D"
 3360 04a0 36 45 00                		.string	"6E"
 3361 04a3 36 46 00                		.string	"6F"
 3362 04a6 37 30 00                		.string	"70"
 3363 04a9 37 31 00                		.string	"71"
 3364 04ac 37 32 00                		.string	"72"
 3365 04af 37 33 00                		.string	"73"
 3366 04b2 37 34 00                		.string	"74"
 3367 04b5 37 35 00                		.string	"75"
 3368 04b8 37 36 00                		.string	"76"
 3369 04bb 37 37 00                		.string	"77"
 3370 04be 37 38 00                		.string	"78"
 3371 04c1 37 39 00                		.string	"79"
 3372 04c4 37 41 00                		.string	"7A"
 3373 04c7 37 42 00                		.string	"7B"
 3374 04ca 37 43 00                		.string	"7C"
 3375 04cd 37 44 00                		.string	"7D"
 3376 04d0 37 45 00                		.string	"7E"
 3377 04d3 37 46 00                		.string	"7F"
 3378 04d6 00 00 00 00 00 00 00 00 		.zero	483
 3378      00 00 00 00 00 00 00 00 
 3378      00 00 00 00 00 00 00 00 
 3378      00 00 00 00 00 00 00 00 
 3378      00 00 00 00 00 00 00 00 
 3679                             	.Letext0:
 3680                             		.file 2 "../src/iodefine.h"
 3681                             		.file 3 "../src/r_cg_macrodriver.h"
 3682                             		.file 4 "../src/GSM.h"
 3683                             		.file 5 "../src/RTC.h"
 3684                             		.file 6 "<built-in>"
