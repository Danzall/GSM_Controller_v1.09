   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	MDUC	=	0xf00e8
  26                             	MDAL	=	0xffff0
  27                             	MDAH	=	0xffff2
  28                             	MDBL	=	0xffff6
  29                             	MDBH	=	0xffff4
  30                             	MDCL	=	0xf00e0
  31                             	MDCH	=	0xf00e2
  32                             	.text
  33                             	.Ltext0:
  34                             		.comm	_adc,6,2
  35                             		.comm	_adc1,2,2
  36                             		.comm	_adcv,2,2
  37                             		.comm	_adca,10,2
  38                             		.comm	_adcaIndex,1,1
  39                             		.comm	_adcResult,2,2
  40                             		.comm	_result,10,1
  41                             		.global	___floatunsisf
  42                             		.global	___mulsf3
  43                             		.global	___fixunssfsi
  44                             		.section	.rodata
  45                             	.LC0:
  46 0000 25 64 0A 00             		.string	"%d\n"
  47                             	.text
  48                             		.global	_ADC_Service
  50                             	_ADC_Service:
  51                             	.LFB0:
  52                             		.file 1 "../src/ADC.c"
   1:../src/ADC.c  **** /*
   2:../src/ADC.c  ****  * ADC.c
   3:../src/ADC.c  ****  *
   4:../src/ADC.c  ****  *  Created on: Aug 7, 2018
   5:../src/ADC.c  ****  *      Author: Jeefo
   6:../src/ADC.c  ****  */
   7:../src/ADC.c  **** #include "r_cg_macrodriver.h"
   8:../src/ADC.c  **** #include "r_cg_cgc.h"
   9:../src/ADC.c  **** #include "r_cg_port.h"
  10:../src/ADC.c  **** #include "r_cg_serial.h"
  11:../src/ADC.c  **** #include "r_cg_adc.h"
  12:../src/ADC.c  **** #include "r_cg_timer.h"
  13:../src/ADC.c  **** /* Start user code for include. Do not edit comment generated here */
  14:../src/ADC.c  **** #include "GSM.h"
  15:../src/ADC.c  **** #include "RTC.h"
  16:../src/ADC.c  **** #include "board.h"
  17:../src/ADC.c  **** #include "stdio.h"
  18:../src/ADC.c  **** #include "ADC.h"
  19:../src/ADC.c  **** /* End user code. Do not edit comment generated here */
  20:../src/ADC.c  **** #include "r_cg_userdefine.h"
  21:../src/ADC.c  **** 
  22:../src/ADC.c  **** #define aveBuffSize 5
  23:../src/ADC.c  **** 
  24:../src/ADC.c  **** uint16_t adc[3];
  25:../src/ADC.c  **** uint16_t adc1;
  26:../src/ADC.c  **** uint16_t adcv;
  27:../src/ADC.c  **** uint16_t adca[aveBuffSize];
  28:../src/ADC.c  **** char adcaIndex;
  29:../src/ADC.c  **** uint16_t adcResult;
  30:../src/ADC.c  **** char result[10];
  31:../src/ADC.c  **** 
  32:../src/ADC.c  **** void ADC_Service(){
  53                             		.loc 1 32 0
  54                             		; start of function
  55                             		; push 4: r16 r18
  56                             		; locals: 160 bytes
  57                             		; outgoing: 8 bytes
  58 0000 61 EF                   		sel	rb2
  59 0002 C1                      		push	ax ; r16
  60                             	.LCFI0:
  61 0003 C3                      		push	bc ; r18
  62                             	.LCFI1:
  63 0004 61 CF                   		sel	rb0
  64 0006 20 A8                   		subw	sp, #168
  65                             	.LCFI2:
  33:../src/ADC.c  **** 	//R_ADC_Set_OperationOn();
  34:../src/ADC.c  **** 	char temp[60];
  35:../src/ADC.c  **** 	char tempv[60];
  36:../src/ADC.c  **** 	int len;
  37:../src/ADC.c  **** 	R_ADC_Get_Result(adc);
  66                             		.loc 1 37 0
  67 0008 30 00 00                		movw	ax, #_adc
  68 000b B8 00                   		movw	[sp], ax
  69 000d FC 00 00 00             		call	!!%code(_R_ADC_Get_Result)
  38:../src/ADC.c  **** 	adc1 = adc[0];
  70                             		.loc 1 38 0
  71 0011 AF 00 00                		movw	ax, !_adc
  72 0014 BD F0                   		movw	r8, ax
  73 0016 BF 00 00                		movw	!_adc1, ax
  39:../src/ADC.c  **** 	adcv = adc1*3.57;
  74                             		.loc 1 39 0
  75 0019 BD F0                   		movw	r8, ax
  76 001b BD E8                   		movw	r16, ax
  77 001d F4 EA                   		clrb	r18
  78 001f F4 EB                   		clrb	r19
  79 0021 B8 00                   		movw	[sp], ax
  80 0023 AD EA                   		movw	ax, r18
  81 0025 B8 02                   		movw	[sp+2], ax
  82 0027 FC 00 00 00             		call	!!___floatunsisf
  83 002b AD F0                   		movw	ax, r8
  84 002d B8 28                   		movw	[sp+40], ax
  85 002f AD F2                   		movw	ax, r10
  86 0031 B8 2A                   		movw	[sp+42], ax
  87 0033 A8 28                   		movw	ax, [sp+40]
  88 0035 BD F0                   		movw	r8, ax
  89 0037 B8 00                   		movw	[sp], ax
  90 0039 A8 2A                   		movw	ax, [sp+42]
  91 003b BD F2                   		movw	r10, ax
  92 003d B8 02                   		movw	[sp+2], ax
  93 003f 30 E1 7A                		movw	ax, #31457
  94 0042 B8 04                   		movw	[sp+4], ax
  95 0044 30 64 40                		movw	ax, #16484
  96 0047 B8 06                   		movw	[sp+6], ax
  97 0049 FC 00 00 00             		call	!!___mulsf3
  98 004d AD F0                   		movw	ax, r8
  99 004f B8 18                   		movw	[sp+24], ax
 100 0051 AD F2                   		movw	ax, r10
 101 0053 B8 1A                   		movw	[sp+26], ax
 102 0055 A8 18                   		movw	ax, [sp+24]
 103 0057 BD F4                   		movw	r12, ax
 104 0059 B8 24                   		movw	[sp+36], ax
 105 005b A8 1A                   		movw	ax, [sp+26]
 106 005d BD F0                   		movw	r8, ax
 107 005f B8 26                   		movw	[sp+38], ax
 108 0061 A8 24                   		movw	ax, [sp+36]
 109 0063 BD F2                   		movw	r10, ax
 110 0065 B8 00                   		movw	[sp], ax
 111 0067 A8 26                   		movw	ax, [sp+38]
 112 0069 BD F4                   		movw	r12, ax
 113 006b B8 02                   		movw	[sp+2], ax
 114 006d FC 00 00 00             		call	!!___fixunssfsi
 115 0071 AD F0                   		movw	ax, r8
 116 0073 B8 14                   		movw	[sp+20], ax
 117 0075 AD F2                   		movw	ax, r10
 118 0077 B8 16                   		movw	[sp+22], ax
 119 0079 A8 14                   		movw	ax, [sp+20]
 120 007b BD F0                   		movw	r8, ax
 121 007d BF 00 00                		movw	!_adcv, ax
  40:../src/ADC.c  **** 	//adc1 = 3;
  41:../src/ADC.c  **** 	//sprintf (temp,"ADC val: %d\r\n", adc1);
  42:../src/ADC.c  **** 	//sendData(temp,UART0);
  43:../src/ADC.c  **** 	//sprintf (temp,"ADC voltage: %d\r\n", adcv);
  44:../src/ADC.c  **** 	//sendData(temp,UART0);
  45:../src/ADC.c  **** 	adcv *= 11.01;
 122                             		.loc 1 45 0
 123 0080 BD F0                   		movw	r8, ax
 124 0082 B8 10                   		movw	[sp+16], ax
 125 0084 F1                      		clrb	a
 126 0085 98 12                   		mov	[sp+18], a
 127 0087 F1                      		clrb	a
 128 0088 98 13                   		mov	[sp+19], a
 129 008a A8 10                   		movw	ax, [sp+16]
 130 008c BD F0                   		movw	r8, ax
 131 008e B8 00                   		movw	[sp], ax
 132 0090 A8 12                   		movw	ax, [sp+18]
 133 0092 BD F2                   		movw	r10, ax
 134 0094 B8 02                   		movw	[sp+2], ax
 135 0096 FC 00 00 00             		call	!!___floatunsisf
 136 009a AD F0                   		movw	ax, r8
 137 009c B8 20                   		movw	[sp+32], ax
 138 009e AD F2                   		movw	ax, r10
 139 00a0 B8 22                   		movw	[sp+34], ax
 140 00a2 A8 20                   		movw	ax, [sp+32]
 141 00a4 BD F4                   		movw	r12, ax
 142 00a6 B8 00                   		movw	[sp], ax
 143 00a8 A8 22                   		movw	ax, [sp+34]
 144 00aa BD F0                   		movw	r8, ax
 145 00ac B8 02                   		movw	[sp+2], ax
 146 00ae 30 F6 28                		movw	ax, #10486
 147 00b1 B8 04                   		movw	[sp+4], ax
 148 00b3 30 30 41                		movw	ax, #16688
 149 00b6 B8 06                   		movw	[sp+6], ax
 150 00b8 FC 00 00 00             		call	!!___mulsf3
 151 00bc AD F0                   		movw	ax, r8
 152 00be B8 0C                   		movw	[sp+12], ax
 153 00c0 AD F2                   		movw	ax, r10
 154 00c2 B8 0E                   		movw	[sp+14], ax
 155 00c4 A8 0C                   		movw	ax, [sp+12]
 156 00c6 BD F2                   		movw	r10, ax
 157 00c8 B8 1C                   		movw	[sp+28], ax
 158 00ca A8 0E                   		movw	ax, [sp+14]
 159 00cc BD F4                   		movw	r12, ax
 160 00ce B8 1E                   		movw	[sp+30], ax
 161 00d0 A8 1C                   		movw	ax, [sp+28]
 162 00d2 BD F0                   		movw	r8, ax
 163 00d4 B8 00                   		movw	[sp], ax
 164 00d6 A8 1E                   		movw	ax, [sp+30]
 165 00d8 BD F2                   		movw	r10, ax
 166 00da B8 02                   		movw	[sp+2], ax
 167 00dc FC 00 00 00             		call	!!___fixunssfsi
 168 00e0 AD F0                   		movw	ax, r8
 169 00e2 B8 08                   		movw	[sp+8], ax
 170 00e4 AD F2                   		movw	ax, r10
 171 00e6 B8 0A                   		movw	[sp+10], ax
 172 00e8 A8 08                   		movw	ax, [sp+8]
 173 00ea BD F0                   		movw	r8, ax
 174 00ec BF 00 00                		movw	!_adcv, ax
  46:../src/ADC.c  **** 	ADC_Ave();
 175                             		.loc 1 46 0
 176 00ef FC 00 00 00             		call	!!%code(_ADC_Ave)
  47:../src/ADC.c  **** 	//adcv *= 51.7;
  48:../src/ADC.c  **** 	//adcv /= 4.7;
  49:../src/ADC.c  **** 	//sprintf (temp,"Input voltage: %d\r\n", adcv);
  50:../src/ADC.c  **** 	//sendData(temp,UART0);
  51:../src/ADC.c  **** 	//sprintf (temp,"Average Input voltage: %d\r\n", adcResult);
  52:../src/ADC.c  **** 	//sendData(temp,UART0);
  53:../src/ADC.c  **** 	sprintf (tempv,"%d\n", adcResult);
 177                             		.loc 1 53 0
 178 00f3 AF 00 00                		movw	ax, !_adcResult
 179 00f6 BD F0                   		movw	r8, ax
 180 00f8 C9 F4 A8 00             		movw	r12, #168
 181 00fc AE F8                   		movw	ax, sp
 182 00fe BD F4                   		movw	r12, ax
 183 0100 04 A8 00                		addw	ax, #168
 184 0103 BD F4                   		movw	r12, ax
 185 0105 04 84 FF                		addw	ax, #-124
 186 0108 B8 00                   		movw	[sp], ax
 187 010a 30 00 00                		movw	ax, #.LC0
 188 010d B8 02                   		movw	[sp+2], ax
 189 010f AD F0                   		movw	ax, r8
 190 0111 B8 04                   		movw	[sp+4], ax
 191 0113 FC 00 00 00             		call	!!%code(_sprintf)
  54:../src/ADC.c  **** 	//sendData(tempv,UART0);
  55:../src/ADC.c  **** 	len = strlen(tempv);
 192                             		.loc 1 55 0
 193 0117 C9 F0 A8 00             		movw	r8, #168
 194 011b AE F8                   		movw	ax, sp
 195 011d BD F0                   		movw	r8, ax
 196 011f 04 A8 00                		addw	ax, #168
 197 0122 BD F0                   		movw	r8, ax
 198 0124 04 84 FF                		addw	ax, #-124
 199 0127 B8 00                   		movw	[sp], ax
 200 0129 FC 00 00 00             		call	!!%code(_strlen)
 201 012d AD F0                   		movw	ax, r8
 202 012f B8 A4                   		movw	[sp+164], ax
  56:../src/ADC.c  **** 	//sprintf (temp,"ADC string length:%d\n", len);
  57:../src/ADC.c  **** 	//sendData(temp,UART0);
  58:../src/ADC.c  **** 	int temp1;
  59:../src/ADC.c  **** 
  60:../src/ADC.c  **** 	for (temp1 = len; temp1 >= 0; temp1--){
 203                             		.loc 1 60 0
 204 0131 BD F0                   		movw	r8, ax
 205 0133 B8 A6                   		movw	[sp+166], ax
 206 0135 EC AC 01 00             		br	!!.L2
 207                             	.L6:
  61:../src/ADC.c  **** 		if (temp1 >= 2) result[temp1 + 1] = tempv[temp1];
 208                             		.loc 1 61 0
 209 0139 A8 A6                   		movw	ax, [sp+166]
 210 013b 44 01 00                		cmpw	ax, #1
 211 013e 71 FF                   		 xor1	CY, a.7
 212 0140 61 E3                   		 skh
 213 0142 EC 6A 01 00             		 br	!!.L3
 214                             		.loc 1 61 0 is_stmt 0 discriminator 1
 215 0146 A8 A6                   		movw	ax, [sp+166]
 216 0148 A1                      		incw	ax
 217 0149 BD F0                   		movw	r8, ax
 218 014b AE F8                   		movw	ax, sp
 219 014d BD F4                   		movw	r12, ax
 220 014f 04 2C 00                		addw	ax, #44
 221 0152 BD F2                   		movw	r10, ax
 222 0154 A8 A6                   		movw	ax, [sp+166]
 223 0156 06 F2                   		addw	ax, r10
 224 0158 BD F2                   		movw	r10, ax
 225 015a BD F4                   		movw	r12, ax
 226 015c FA F4                   		movw	hl, r12
 227 015e 8B                      		mov	a, [hl]
 228 015f 9D F2                   		mov	r10, a
 229 0161 DA F0                   		movw	bc, r8
 230 0163 48 00 00                		mov	_result[bc], a
 231 0166 EC 8E 01 00             		br	!!.L4
 232                             	.L3:
  62:../src/ADC.c  **** 		else result[temp1] = tempv[temp1];
 233                             		.loc 1 62 0 is_stmt 1
 234 016a AE F8                   		movw	ax, sp
 235 016c BD F2                   		movw	r10, ax
 236 016e 04 2C 00                		addw	ax, #44
 237 0171 BD F0                   		movw	r8, ax
 238 0173 A8 A6                   		movw	ax, [sp+166]
 239 0175 06 F0                   		addw	ax, r8
 240 0177 BD F0                   		movw	r8, ax
 241 0179 BD F4                   		movw	r12, ax
 242 017b FA F4                   		movw	hl, r12
 243 017d 8B                      		mov	a, [hl]
 244 017e 9D F2                   		mov	r10, a
 245 0180 A8 A6                   		movw	ax, [sp+166]
 246 0182 04 00 00                		addw	ax, #_result
 247 0185 BD F0                   		movw	r8, ax
 248 0187 BD F4                   		movw	r12, ax
 249 0189 EA F4                   		movw	de, r12
 250 018b 8D F2                   		mov	a, r10
 251 018d 99                      		mov	[de], a
 252                             	.L4:
  63:../src/ADC.c  **** 		if (temp1 == 2) result[temp1] = ',';		//insert char
 253                             		.loc 1 63 0
 254 018e A8 A6                   		movw	ax, [sp+166]
 255 0190 44 02 00                		cmpw	ax, #2
 256 0193 61 E8                   		 skz
 257 0195 EC A7 01 00             		 br	!!.L5
 258                             		.loc 1 63 0 is_stmt 0 discriminator 1
 259 0199 A8 A6                   		movw	ax, [sp+166]
 260 019b 04 00 00                		addw	ax, #_result
 261 019e BD F0                   		movw	r8, ax
 262 01a0 BD F2                   		movw	r10, ax
 263 01a2 EA F2                   		movw	de, r10
 264 01a4 51 2C                   		mov	a, #44
 265 01a6 99                      		mov	[de], a
 266                             	.L5:
  60:../src/ADC.c  **** 		if (temp1 >= 2) result[temp1 + 1] = tempv[temp1];
 267                             		.loc 1 60 0 is_stmt 1 discriminator 2
 268 01a7 A8 A6                   		movw	ax, [sp+166]
 269 01a9 B1                      		decw	ax
 270 01aa B8 A6                   		movw	[sp+166], ax
 271                             	.L2:
  60:../src/ADC.c  **** 		if (temp1 >= 2) result[temp1 + 1] = tempv[temp1];
 272                             		.loc 1 60 0 is_stmt 0 discriminator 1
 273 01ac A8 A6                   		movw	ax, [sp+166]
 274 01ae 44 00 00                		cmpw	ax, #0
 275 01b1 71 FF                   		 xor1	CY, a.7
 276 01b3 61 C8                   		 skc
 277 01b5 EC 39 01 00             		 br	!!.L6
  64:../src/ADC.c  **** 
  65:../src/ADC.c  **** 	}
  66:../src/ADC.c  **** 	result[5] = 'V';
 278                             		.loc 1 66 0 is_stmt 1
 279 01b9 51 56                   		mov	a, #86
 280 01bb 9F 00 00                		mov	!_result+5, a
  67:../src/ADC.c  **** 	result[6] = 0;	//terminating char
 281                             		.loc 1 67 0
 282 01be F5 00 00                		clrb	!_result+6
  68:../src/ADC.c  **** 	//sendData(result,UART0);
  69:../src/ADC.c  **** 	//sendData(temp,UART0);
  70:../src/ADC.c  **** }
 283                             		.loc 1 70 0
 284 01c1 10 A8                   		addw	sp, #168
 285 01c3 61 EF                   		sel	rb2
 286 01c5 C2                      		pop	bc ; r18
 287 01c6 C0                      		pop	ax ; r16
 288 01c7 61 CF                   		sel	rb0
 289 01c9 D7                      		ret
 290                             	.LFE0:
 292                             		.global	_GetADC
 294                             	_GetADC:
 295                             	.LFB1:
  71:../src/ADC.c  **** 
  72:../src/ADC.c  **** void GetADC(char* data){
 296                             		.loc 1 72 0
 297                             		; start of function
 298                             		; push 4: r16 r18
 299                             		; locals: 6 bytes
 300                             		; outgoing: 4 bytes
 301 01ca 61 EF                   		sel	rb2
 302 01cc C1                      		push	ax ; r16
 303                             	.LCFI3:
 304 01cd C3                      		push	bc ; r18
 305                             	.LCFI4:
 306 01ce 61 CF                   		sel	rb0
 307 01d0 20 0A                   		subw	sp, #10
 308                             	.LCFI5:
  73:../src/ADC.c  **** 	float temp;
  74:../src/ADC.c  **** 	temp = adcResult / 1000;
 309                             		.loc 1 74 0
 310 01d2 AF 00 00                		movw	ax, !_adcResult
 311 01d5 BD F4                   		movw	r12, ax
 312 01d7 31 3E                   		shrw	ax, 3
 313 01d9 BD F4                   		movw	r12, ax
 314 01db CF E8 00 00             		mov	!0xf00e8, #0
 315 01df AD F4                   		movw	ax, r12
 316 01e1 BE F0                   		movw	0xffff0, ax
 317 01e3 30 C5 20                		movw	ax, #8389
 318 01e6 BE F2                   		movw	0xffff2, ax
 319 01e8 00                      		nop
 320 01e9 AE F4                   		movw	ax, 0xffff4 ;umulhi3_highpart_g13 ax,r12,#8389
 321 01eb BD F4                   		movw	r12, ax
 322 01ed 31 4E                   		shrw	ax, 4
 323 01ef BD F4                   		movw	r12, ax
 324 01f1 BD F0                   		movw	r8, ax
 325 01f3 F4 F2                   		clrb	r10
 326 01f5 F4 F3                   		clrb	r11
 327 01f7 B8 00                   		movw	[sp], ax
 328 01f9 AD F2                   		movw	ax, r10
 329 01fb B8 02                   		movw	[sp+2], ax
 330 01fd FC 00 00 00             		call	!!___floatunsisf
 331 0201 AD F0                   		movw	ax, r8
 332 0203 BD E8                   		movw	r16, ax
 333 0205 AD F2                   		movw	ax, r10
 334 0207 BD EA                   		movw	r18, ax
 335 0209 AD E8                   		movw	ax, r16
 336 020b B8 04                   		movw	[sp+4], ax
 337 020d AD EA                   		movw	ax, r18
 338 020f B8 06                   		movw	[sp+6], ax
  75:../src/ADC.c  **** 	//strcpy(data,result);
  76:../src/ADC.c  **** 	int index = 0;
 339                             		.loc 1 76 0
 340 0211 F6                      		clrw	ax
 341 0212 B8 08                   		movw	[sp+8], ax
  77:../src/ADC.c  **** 	while (index < 7){
 342                             		.loc 1 77 0
 343 0214 EC 3E 02 00             		br	!!.L8
 344                             	.L9:
  78:../src/ADC.c  **** 		data[index] = result[index];
 345                             		.loc 1 78 0
 346 0218 A8 08                   		movw	ax, [sp+8]
 347 021a BD F0                   		movw	r8, ax
 348 021c A8 12                   		movw	ax, [sp+18]
 349 021e 06 F0                   		addw	ax, r8
 350 0220 BD F0                   		movw	r8, ax
 351 0222 A8 08                   		movw	ax, [sp+8]
 352 0224 04 00 00                		addw	ax, #_result
 353 0227 BD F2                   		movw	r10, ax
 354 0229 BD F4                   		movw	r12, ax
 355 022b FA F4                   		movw	hl, r12
 356 022d 8B                      		mov	a, [hl]
 357 022e 9D F2                   		mov	r10, a
 358 0230 AD F0                   		movw	ax, r8
 359 0232 BD F4                   		movw	r12, ax
 360 0234 EA F4                   		movw	de, r12
 361 0236 8D F2                   		mov	a, r10
 362 0238 99                      		mov	[de], a
  79:../src/ADC.c  **** 		index++;
 363                             		.loc 1 79 0
 364 0239 A8 08                   		movw	ax, [sp+8]
 365 023b A1                      		incw	ax
 366 023c B8 08                   		movw	[sp+8], ax
 367                             	.L8:
  77:../src/ADC.c  **** 	while (index < 7){
 368                             		.loc 1 77 0
 369 023e A8 08                   		movw	ax, [sp+8]
 370 0240 44 06 00                		cmpw	ax, #6
 371 0243 71 FF                   		 xor1	CY, a.7
 372 0245 61 E3                   		 skh
 373 0247 EC 18 02 00             		 br	!!.L9
  80:../src/ADC.c  **** 	}
  81:../src/ADC.c  **** 	//return result;
  82:../src/ADC.c  **** }
 374                             		.loc 1 82 0
 375 024b 10 0A                   		addw	sp, #10
 376 024d 61 EF                   		sel	rb2
 377 024f C2                      		pop	bc ; r18
 378 0250 C0                      		pop	ax ; r16
 379 0251 61 CF                   		sel	rb0
 380 0253 D7                      		ret
 381                             	.LFE1:
 383                             		.global	_ADC_Ave
 385                             	_ADC_Ave:
 386                             	.LFB2:
  83:../src/ADC.c  **** 
  84:../src/ADC.c  **** void ADC_Ave(){
 387                             		.loc 1 84 0
 388                             		; start of function
 389                             		; locals: 2 bytes
 390 0254 20 02                   		subw	sp, #2
 391                             	.LCFI6:
  85:../src/ADC.c  **** 	adcResult = 0;
 392                             		.loc 1 85 0
 393 0256 F6                      		clrw	ax
 394 0257 BF 00 00                		movw	!_adcResult, ax
  86:../src/ADC.c  **** 	adca[adcaIndex] = adcv;
 395                             		.loc 1 86 0
 396 025a 8F 00 00                		mov	a, !_adcaIndex
 397 025d 9D F0                   		mov	r8, a
 398 025f 31 8E                   		shrw	ax, 8
 399 0261 BD F2                   		movw	r10, ax
 400 0263 AF 00 00                		movw	ax, !_adcv
 401 0266 BD F0                   		movw	r8, ax
 402 0268 AD F2                   		movw	ax, r10
 403 026a 01                      		addw	ax, ax
 404 026b BD F2                   		movw	r10, ax
 405 026d 04 00 00                		addw	ax, #_adca
 406 0270 BD F2                   		movw	r10, ax
 407 0272 BD F4                   		movw	r12, ax
 408 0274 EA F4                   		movw	de, r12
 409 0276 AD F0                   		movw	ax, r8
 410 0278 B9                      		movw	[de], ax
  87:../src/ADC.c  **** 	adcaIndex++;
 411                             		.loc 1 87 0
 412 0279 8F 00 00                		mov	a, !_adcaIndex
 413 027c 9D F0                   		mov	r8, a
 414 027e A4 F0                   		inc	r8
 415 0280 8D F0                   		mov	a, r8
 416 0282 9F 00 00                		mov	!_adcaIndex, a
  88:../src/ADC.c  **** 	if (adcaIndex >= aveBuffSize) adcaIndex = 0;
 417                             		.loc 1 88 0
 418 0285 9D F0                   		mov	r8, a
 419 0287 4A F0 04                		cmp	r8, #4
 420 028a 61 E3                   		 skh
 421 028c EC 93 02 00             		 br	!!.L11
 422                             		.loc 1 88 0 is_stmt 0 discriminator 1
 423 0290 F5 00 00                		clrb	!_adcaIndex
 424                             	.L11:
  89:../src/ADC.c  **** 	char temp;
  90:../src/ADC.c  **** 	for (temp = 0; temp < aveBuffSize; temp++){
 425                             		.loc 1 90 0 is_stmt 1
 426 0293 F1                      		clrb	a
 427 0294 98 01                   		mov	[sp+1], a
 428 0296 EC C4 02 00             		br	!!.L12
 429                             	.L13:
  91:../src/ADC.c  **** 		adcResult += adca[temp];
 430                             		.loc 1 91 0 discriminator 3
 431 029a 88 01                   		mov	a, [sp+1]
 432 029c 31 8E                   		shrw	ax, 8
 433 029e BD F0                   		movw	r8, ax
 434 02a0 01                      		addw	ax, ax
 435 02a1 BD F0                   		movw	r8, ax
 436 02a3 04 00 00                		addw	ax, #_adca
 437 02a6 BD F0                   		movw	r8, ax
 438 02a8 BD F4                   		movw	r12, ax
 439 02aa FA F4                   		movw	hl, r12
 440 02ac AB                      		movw	ax, [hl]
 441 02ad BD F2                   		movw	r10, ax
 442 02af AF 00 00                		movw	ax, !_adcResult
 443 02b2 BD F0                   		movw	r8, ax
 444 02b4 AD F2                   		movw	ax, r10
 445 02b6 06 F0                   		addw	ax, r8
 446 02b8 BD F0                   		movw	r8, ax
 447 02ba BF 00 00                		movw	!_adcResult, ax
  90:../src/ADC.c  **** 		adcResult += adca[temp];
 448                             		.loc 1 90 0 discriminator 3
 449 02bd 88 01                   		mov	a, [sp+1]
 450 02bf 9D F0                   		mov	r8, a
 451 02c1 81                      		inc	a
 452 02c2 98 01                   		mov	[sp+1], a
 453                             	.L12:
  90:../src/ADC.c  **** 		adcResult += adca[temp];
 454                             		.loc 1 90 0 is_stmt 0 discriminator 1
 455 02c4 88 01                   		mov	a, [sp+1]
 456 02c6 4C 04                   		cmp	a, #4
 457 02c8 61 E3                   		 skh
 458 02ca EC 9A 02 00             		 br	!!.L13
  92:../src/ADC.c  **** 	}
  93:../src/ADC.c  **** 	adcResult /= aveBuffSize;
 459                             		.loc 1 93 0 is_stmt 1
 460 02ce AF 00 00                		movw	ax, !_adcResult
 461 02d1 BD F0                   		movw	r8, ax
 462 02d3 CF E8 00 00             		mov	!0xf00e8, #0
 463 02d7 AD F0                   		movw	ax, r8
 464 02d9 BE F0                   		movw	0xffff0, ax
 465 02db 30 CD CC                		movw	ax, #52429
 466 02de BE F2                   		movw	0xffff2, ax
 467 02e0 00                      		nop
 468 02e1 AE F4                   		movw	ax, 0xffff4 ;umulhi3_highpart_g13 ax,r8,#-13107
 469 02e3 BD F0                   		movw	r8, ax
 470 02e5 31 2E                   		shrw	ax, 2
 471 02e7 BD F0                   		movw	r8, ax
 472 02e9 BF 00 00                		movw	!_adcResult, ax
  94:../src/ADC.c  **** }
 473                             		.loc 1 94 0
 474 02ec 10 02                   		addw	sp, #2
 475 02ee D7                      		ret
 476                             	.LFE2:
 556                             	.Letext0:
 557                             		.file 2 "../src/r_cg_macrodriver.h"
 558                             		.file 3 "<built-in>"
