   1                             	r8	=	0xffef0
   2                             	r16	=	0xffee8
   3                             	r24	=	0xffee0
   4                             	r9	=	0xffef1
   5                             	r17	=	0xffee9
   6                             	r25	=	0xffee1
   7                             	r10	=	0xffef2
   8                             	r18	=	0xffeea
   9                             	r26	=	0xffee2
  10                             	r11	=	0xffef3
  11                             	r19	=	0xffeeb
  12                             	r27	=	0xffee3
  13                             	r12	=	0xffef4
  14                             	r20	=	0xffeec
  15                             	r28	=	0xffee4
  16                             	r13	=	0xffef5
  17                             	r21	=	0xffeed
  18                             	r29	=	0xffee5
  19                             	r14	=	0xffef6
  20                             	r22	=	0xffeee
  21                             	r30	=	0xffee6
  22                             	r15	=	0xffef7
  23                             	r23	=	0xffeef
  24                             	r31	=	0xffee7
  25                             	MDUC	=	0xf00e8
  26                             	MDAL	=	0xffff0
  27                             	MDAH	=	0xffff2
  28                             	MDBL	=	0xffff6
  29                             	MDBH	=	0xffff4
  30                             	MDCL	=	0xf00e0
  31                             	MDCH	=	0xf00e2
  32                             	.text
  33                             	.Ltext0:
  34                             		.global	_R_ADC_Create
  36                             	_R_ADC_Create:
  37                             	.LFB0:
  38                             		.file 1 "../src/r_cg_adc.c"
   1:../src/r_cg_adc.c **** /**************************************************************************************************
   2:../src/r_cg_adc.c **** * DISCLAIMER
   3:../src/r_cg_adc.c **** * This software is supplied by Renesas Electronics Corporation and is only intended for use with Re
   4:../src/r_cg_adc.c **** * No other uses are authorized. This software is owned by Renesas Electronics Corporation and is pr
   5:../src/r_cg_adc.c **** * applicable laws, including copyright laws. 
   6:../src/r_cg_adc.c **** * THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIESREGARDING THIS SOFTWARE, WHETHER
   7:../src/r_cg_adc.c **** * OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULA
   8:../src/r_cg_adc.c **** * NON-INFRINGEMENT.  ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED.TO THE MAXIMUM EXTENT PERMITTED N
   9:../src/r_cg_adc.c **** * LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES SHALL BE LIABLE 
  10:../src/r_cg_adc.c **** * INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS SOFTWARE, E
  11:../src/r_cg_adc.c **** * ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
  12:../src/r_cg_adc.c **** * Renesas reserves the right, without notice, to make changes to this software and to discontinue t
  13:../src/r_cg_adc.c **** * of this software. By using this software, you agree to the additional terms and conditions found 
  14:../src/r_cg_adc.c **** * following link:
  15:../src/r_cg_adc.c **** * http://www.renesas.com/disclaimer
  16:../src/r_cg_adc.c **** *
  17:../src/r_cg_adc.c **** * Copyright (C) 2011, 2016 Renesas Electronics Corporation. All rights reserved.
  18:../src/r_cg_adc.c **** ***************************************************************************************************
  19:../src/r_cg_adc.c **** 
  20:../src/r_cg_adc.c **** /**************************************************************************************************
  21:../src/r_cg_adc.c **** * File Name    : r_cg_adc.c
  22:../src/r_cg_adc.c **** * Version      : CodeGenerator for RL78/G13 V2.03.04.01 [11 Nov 2016]
  23:../src/r_cg_adc.c **** * Device(s)    : R5F1006C
  24:../src/r_cg_adc.c **** * Tool-Chain   : GCCRL78
  25:../src/r_cg_adc.c **** * Description  : This file implements device driver for ADC module.
  26:../src/r_cg_adc.c **** * Creation Date: 8/7/2018
  27:../src/r_cg_adc.c **** ***************************************************************************************************
  28:../src/r_cg_adc.c **** 
  29:../src/r_cg_adc.c **** /**************************************************************************************************
  30:../src/r_cg_adc.c **** Includes
  31:../src/r_cg_adc.c **** ***************************************************************************************************
  32:../src/r_cg_adc.c **** #include "r_cg_macrodriver.h"
  33:../src/r_cg_adc.c **** #include "r_cg_adc.h"
  34:../src/r_cg_adc.c **** /* Start user code for include. Do not edit comment generated here */
  35:../src/r_cg_adc.c **** /* End user code. Do not edit comment generated here */
  36:../src/r_cg_adc.c **** #include "r_cg_userdefine.h"
  37:../src/r_cg_adc.c **** 
  38:../src/r_cg_adc.c **** /**************************************************************************************************
  39:../src/r_cg_adc.c **** Global variables and functions
  40:../src/r_cg_adc.c **** ***************************************************************************************************
  41:../src/r_cg_adc.c **** /* Start user code for global. Do not edit comment generated here */
  42:../src/r_cg_adc.c **** /* End user code. Do not edit comment generated here */
  43:../src/r_cg_adc.c **** 
  44:../src/r_cg_adc.c **** /**************************************************************************************************
  45:../src/r_cg_adc.c **** * Function Name: R_ADC_Create
  46:../src/r_cg_adc.c **** * Description  : This function initializes the AD converter.
  47:../src/r_cg_adc.c **** * Arguments    : None
  48:../src/r_cg_adc.c **** * Return Value : None
  49:../src/r_cg_adc.c **** ***************************************************************************************************
  50:../src/r_cg_adc.c **** void R_ADC_Create(void)
  51:../src/r_cg_adc.c **** {    
  39                             		.loc 1 51 0
  52:../src/r_cg_adc.c ****     ADCEN = 1U;  /* supply AD clock */
  40                             		.loc 1 52 0
  41 0000 C9 F0 F0 00             		movw	r8, #240
  42 0004 AD F0                   		movw	ax, r8
  43 0006 BD F2                   		movw	r10, ax
  44 0008 FA F2                   		movw	hl, r10
  45 000a 71 D2                   		set1	[hl].5 ;insvmisalignqi [hl],#1,#5,#1 {0}
  53:../src/r_cg_adc.c ****     ADM0 = _00_AD_ADM0_INITIALVALUE;  /* disable AD conversion and clear ADM0 register */
  46                             		.loc 1 53 0
  47 000c C9 F0 30 FF             		movw	r8, #-208
  48 0010 AD F0                   		movw	ax, r8
  49 0012 BD F4                   		movw	r12, ax
  50 0014 EA F4                   		movw	de, r12
  51 0016 F1                      		clrb	a
  52 0017 99                      		mov	[de], a
  54:../src/r_cg_adc.c ****     ADMK = 1U;  /* disable INTAD interrupt */
  53                             		.loc 1 54 0
  54 0018 C9 F0 E7 FF             		movw	r8, #-25
  55 001c AD F0                   		movw	ax, r8
  56 001e BD F2                   		movw	r10, ax
  57 0020 FA F2                   		movw	hl, r10
  58 0022 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
  55:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
  59                             		.loc 1 55 0
  60 0024 C9 F0 E3 FF             		movw	r8, #-29
  61 0028 AD F0                   		movw	ax, r8
  62 002a BD F4                   		movw	r12, ax
  63 002c FA F4                   		movw	hl, r12
  64 002e 71 83                   		clr1	[hl].0 ;insvmisalignqi [hl],#1,#0,#0 {0}
  56:../src/r_cg_adc.c ****     /* Set INTAD low priority */
  57:../src/r_cg_adc.c ****     ADPR1 = 1U;
  65                             		.loc 1 57 0
  66 0030 C9 F0 EF FF             		movw	r8, #-17
  67 0034 AD F0                   		movw	ax, r8
  68 0036 BD F2                   		movw	r10, ax
  69 0038 FA F2                   		movw	hl, r10
  70 003a 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
  58:../src/r_cg_adc.c ****     ADPR0 = 1U;
  71                             		.loc 1 58 0
  72 003c C9 F0 EB FF             		movw	r8, #-21
  73 0040 AD F0                   		movw	ax, r8
  74 0042 BD F4                   		movw	r12, ax
  75 0044 FA F4                   		movw	hl, r12
  76 0046 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
  59:../src/r_cg_adc.c ****     /* The reset status of ADPC is analog input, so it's unnecessary to set. */
  60:../src/r_cg_adc.c ****     /* Set ANI0 pin as analog input */
  61:../src/r_cg_adc.c ****     PM2 |= 0x01U;
  77                             		.loc 1 61 0
  78 0048 C9 F2 22 FF             		movw	r10, #-222
  79 004c C9 F0 22 FF             		movw	r8, #-222
  80 0050 AD F0                   		movw	ax, r8
  81 0052 BD F4                   		movw	r12, ax
  82 0054 FA F4                   		movw	hl, r12
  83 0056 8B                      		mov	a, [hl]
  84 0057 9D F0                   		mov	r8, a
  85 0059 6A F0 01                		or	r8, #1
  86 005c AD F2                   		movw	ax, r10
  87 005e BD F4                   		movw	r12, ax
  88 0060 EA F4                   		movw	de, r12
  89 0062 8D F0                   		mov	a, r8
  90 0064 99                      		mov	[de], a
  62:../src/r_cg_adc.c ****     ADM0 = _00_AD_CONVERSION_CLOCK_64 | _00_AD_TIME_MODE_NORMAL_1 | _00_AD_OPERMODE_SELECT;
  91                             		.loc 1 62 0
  92 0065 C9 F0 30 FF             		movw	r8, #-208
  93 0069 AD F0                   		movw	ax, r8
  94 006b BD F2                   		movw	r10, ax
  95 006d EA F2                   		movw	de, r10
  96 006f F1                      		clrb	a
  97 0070 99                      		mov	[de], a
  63:../src/r_cg_adc.c ****     ADM1 = _00_AD_TRIGGER_SOFTWARE | _00_AD_CONVMODE_CONSELECT;
  98                             		.loc 1 63 0
  99 0071 C9 F0 32 FF             		movw	r8, #-206
 100 0075 AD F0                   		movw	ax, r8
 101 0077 BD F4                   		movw	r12, ax
 102 0079 EA F4                   		movw	de, r12
 103 007b F1                      		clrb	a
 104 007c 99                      		mov	[de], a
  64:../src/r_cg_adc.c ****     ADM2 = _00_AD_POSITIVE_VDD | _00_AD_NEGATIVE_VSS | _00_AD_AREA_MODE_1 | _00_AD_RESOLUTION_10BIT
 105                             		.loc 1 64 0
 106 007d C9 F0 10 00             		movw	r8, #16
 107 0081 AD F0                   		movw	ax, r8
 108 0083 BD F2                   		movw	r10, ax
 109 0085 EA F2                   		movw	de, r10
 110 0087 F1                      		clrb	a
 111 0088 99                      		mov	[de], a
  65:../src/r_cg_adc.c ****     ADUL = _FF_AD_ADUL_VALUE;
 112                             		.loc 1 65 0
 113 0089 C9 F0 11 00             		movw	r8, #17
 114 008d AD F0                   		movw	ax, r8
 115 008f BD F4                   		movw	r12, ax
 116 0091 EA F4                   		movw	de, r12
 117 0093 51 FF                   		mov	a, #-1
 118 0095 99                      		mov	[de], a
  66:../src/r_cg_adc.c ****     ADLL = _00_AD_ADLL_VALUE;
 119                             		.loc 1 66 0
 120 0096 C9 F0 12 00             		movw	r8, #18
 121 009a AD F0                   		movw	ax, r8
 122 009c BD F2                   		movw	r10, ax
 123 009e EA F2                   		movw	de, r10
 124 00a0 F1                      		clrb	a
 125 00a1 99                      		mov	[de], a
  67:../src/r_cg_adc.c ****     ADS = _00_AD_INPUT_CHANNEL_0;
 126                             		.loc 1 67 0
 127 00a2 C9 F0 31 FF             		movw	r8, #-207
 128 00a6 AD F0                   		movw	ax, r8
 129 00a8 BD F4                   		movw	r12, ax
 130 00aa EA F4                   		movw	de, r12
 131 00ac F1                      		clrb	a
 132 00ad 99                      		mov	[de], a
  68:../src/r_cg_adc.c ****     ADCE = 1U;  /* enable AD comparator */
 133                             		.loc 1 68 0
 134 00ae C9 F0 30 FF             		movw	r8, #-208
 135 00b2 AD F0                   		movw	ax, r8
 136 00b4 BD F2                   		movw	r10, ax
 137 00b6 FA F2                   		movw	hl, r10
 138 00b8 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
  69:../src/r_cg_adc.c **** }
 139                             		.loc 1 69 0
 140 00ba D7                      		ret
 141                             	.LFE0:
 143                             		.global	_R_ADC_Start
 145                             	_R_ADC_Start:
 146                             	.LFB1:
  70:../src/r_cg_adc.c **** 
  71:../src/r_cg_adc.c **** /**************************************************************************************************
  72:../src/r_cg_adc.c **** * Function Name: R_ADC_Start
  73:../src/r_cg_adc.c **** * Description  : This function starts the AD converter.
  74:../src/r_cg_adc.c **** * Arguments    : None
  75:../src/r_cg_adc.c **** * Return Value : None
  76:../src/r_cg_adc.c **** ***************************************************************************************************
  77:../src/r_cg_adc.c **** void R_ADC_Start(void)
  78:../src/r_cg_adc.c **** {
 147                             		.loc 1 78 0
  79:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
 148                             		.loc 1 79 0
 149 00bb C9 F0 E3 FF             		movw	r8, #-29
 150 00bf AD F0                   		movw	ax, r8
 151 00c1 BD F2                   		movw	r10, ax
 152 00c3 FA F2                   		movw	hl, r10
 153 00c5 71 83                   		clr1	[hl].0 ;insvmisalignqi [hl],#1,#0,#0 {0}
  80:../src/r_cg_adc.c ****     ADMK = 0U;  /* enable INTAD interrupt */
 154                             		.loc 1 80 0
 155 00c7 C9 F0 E7 FF             		movw	r8, #-25
 156 00cb AD F0                   		movw	ax, r8
 157 00cd BD F2                   		movw	r10, ax
 158 00cf FA F2                   		movw	hl, r10
 159 00d1 71 83                   		clr1	[hl].0 ;insvmisalignqi [hl],#1,#0,#0 {0}
  81:../src/r_cg_adc.c ****     ADCS = 1U;  /* enable AD conversion */
 160                             		.loc 1 81 0
 161 00d3 C9 F0 30 FF             		movw	r8, #-208
 162 00d7 AD F0                   		movw	ax, r8
 163 00d9 BD F2                   		movw	r10, ax
 164 00db FA F2                   		movw	hl, r10
 165 00dd 71 F2                   		set1	[hl].7 ;insvmisalignqi [hl],#1,#7,#1 {0}
  82:../src/r_cg_adc.c **** }
 166                             		.loc 1 82 0
 167 00df D7                      		ret
 168                             	.LFE1:
 170                             		.global	_R_ADC_Stop
 172                             	_R_ADC_Stop:
 173                             	.LFB2:
  83:../src/r_cg_adc.c **** 
  84:../src/r_cg_adc.c **** /**************************************************************************************************
  85:../src/r_cg_adc.c **** * Function Name: R_ADC_Stop
  86:../src/r_cg_adc.c **** * Description  : This function stops the AD converter.
  87:../src/r_cg_adc.c **** * Arguments    : None
  88:../src/r_cg_adc.c **** * Return Value : None
  89:../src/r_cg_adc.c **** ***************************************************************************************************
  90:../src/r_cg_adc.c **** void R_ADC_Stop(void)
  91:../src/r_cg_adc.c **** {
 174                             		.loc 1 91 0
  92:../src/r_cg_adc.c ****     ADCS = 0U;  /* disable AD conversion */
 175                             		.loc 1 92 0
 176 00e0 C9 F0 30 FF             		movw	r8, #-208
 177 00e4 AD F0                   		movw	ax, r8
 178 00e6 BD F2                   		movw	r10, ax
 179 00e8 FA F2                   		movw	hl, r10
 180 00ea 71 F3                   		clr1	[hl].7 ;insvmisalignqi [hl],#1,#7,#0 {0}
  93:../src/r_cg_adc.c ****     ADMK = 1U;  /* disable INTAD interrupt */
 181                             		.loc 1 93 0
 182 00ec C9 F0 E7 FF             		movw	r8, #-25
 183 00f0 AD F0                   		movw	ax, r8
 184 00f2 BD F2                   		movw	r10, ax
 185 00f4 FA F2                   		movw	hl, r10
 186 00f6 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
  94:../src/r_cg_adc.c ****     ADIF = 0U;  /* clear INTAD interrupt flag */
 187                             		.loc 1 94 0
 188 00f8 C9 F0 E3 FF             		movw	r8, #-29
 189 00fc AD F0                   		movw	ax, r8
 190 00fe BD F2                   		movw	r10, ax
 191 0100 FA F2                   		movw	hl, r10
 192 0102 71 83                   		clr1	[hl].0 ;insvmisalignqi [hl],#1,#0,#0 {0}
  95:../src/r_cg_adc.c **** }
 193                             		.loc 1 95 0
 194 0104 D7                      		ret
 195                             	.LFE2:
 197                             		.global	_R_ADC_Set_OperationOn
 199                             	_R_ADC_Set_OperationOn:
 200                             	.LFB3:
  96:../src/r_cg_adc.c **** 
  97:../src/r_cg_adc.c **** /**************************************************************************************************
  98:../src/r_cg_adc.c **** * Function Name: R_ADC_Set_OperationOn
  99:../src/r_cg_adc.c **** * Description  : This function enables comparator operation.
 100:../src/r_cg_adc.c **** * Arguments    : None
 101:../src/r_cg_adc.c **** * Return Value : None
 102:../src/r_cg_adc.c **** ***************************************************************************************************
 103:../src/r_cg_adc.c **** void R_ADC_Set_OperationOn(void)
 104:../src/r_cg_adc.c **** {
 201                             		.loc 1 104 0
 105:../src/r_cg_adc.c ****     ADCE = 1U;  /* enable AD comparator */
 202                             		.loc 1 105 0
 203 0105 C9 F0 30 FF             		movw	r8, #-208
 204 0109 AD F0                   		movw	ax, r8
 205 010b BD F2                   		movw	r10, ax
 206 010d FA F2                   		movw	hl, r10
 207 010f 71 82                   		set1	[hl].0 ;insvmisalignqi [hl],#1,#0,#1 {0}
 106:../src/r_cg_adc.c **** }
 208                             		.loc 1 106 0
 209 0111 D7                      		ret
 210                             	.LFE3:
 212                             		.global	_R_ADC_Set_OperationOff
 214                             	_R_ADC_Set_OperationOff:
 215                             	.LFB4:
 107:../src/r_cg_adc.c **** 
 108:../src/r_cg_adc.c **** /**************************************************************************************************
 109:../src/r_cg_adc.c **** * Function Name: R_ADC_Set_OperationOff
 110:../src/r_cg_adc.c **** * Description  : This function stops comparator operation.
 111:../src/r_cg_adc.c **** * Arguments    : None
 112:../src/r_cg_adc.c **** * Return Value : None
 113:../src/r_cg_adc.c **** ***************************************************************************************************
 114:../src/r_cg_adc.c **** void R_ADC_Set_OperationOff(void)
 115:../src/r_cg_adc.c **** {
 216                             		.loc 1 115 0
 116:../src/r_cg_adc.c ****     ADCE = 0U;  /* disable AD comparator */
 217                             		.loc 1 116 0
 218 0112 C9 F0 30 FF             		movw	r8, #-208
 219 0116 AD F0                   		movw	ax, r8
 220 0118 BD F2                   		movw	r10, ax
 221 011a FA F2                   		movw	hl, r10
 222 011c 71 83                   		clr1	[hl].0 ;insvmisalignqi [hl],#1,#0,#0 {0}
 117:../src/r_cg_adc.c **** }
 223                             		.loc 1 117 0
 224 011e D7                      		ret
 225                             	.LFE4:
 227                             		.global	_R_ADC_Get_Result
 229                             	_R_ADC_Get_Result:
 230                             	.LFB5:
 118:../src/r_cg_adc.c **** 
 119:../src/r_cg_adc.c **** /**************************************************************************************************
 120:../src/r_cg_adc.c **** * Function Name: R_ADC_Get_Result
 121:../src/r_cg_adc.c **** * Description  : This function returns the conversion result in the buffer.
 122:../src/r_cg_adc.c **** * Arguments    : buffer -
 123:../src/r_cg_adc.c **** *                    the address where to write the conversion result
 124:../src/r_cg_adc.c **** * Return Value : None
 125:../src/r_cg_adc.c **** ***************************************************************************************************
 126:../src/r_cg_adc.c **** void R_ADC_Get_Result(uint16_t * const buffer)
 127:../src/r_cg_adc.c **** {
 231                             		.loc 1 127 0
 128:../src/r_cg_adc.c ****     *buffer = (uint16_t)(ADCR >> 6U);
 232                             		.loc 1 128 0
 233 011f C9 F0 1E FF             		movw	r8, #-226
 234 0123 AD F0                   		movw	ax, r8
 235 0125 BD F2                   		movw	r10, ax
 236 0127 FA F2                   		movw	hl, r10
 237 0129 AB                      		movw	ax, [hl]
 238 012a BD F0                   		movw	r8, ax
 239 012c 31 6E                   		shrw	ax, 6
 240 012e BD F2                   		movw	r10, ax
 241 0130 A8 04                   		movw	ax, [sp+4]
 242 0132 BD F0                   		movw	r8, ax
 243 0134 BD F4                   		movw	r12, ax
 244 0136 EA F4                   		movw	de, r12
 245 0138 AD F2                   		movw	ax, r10
 246 013a B9                      		movw	[de], ax
 129:../src/r_cg_adc.c **** }
 247                             		.loc 1 129 0
 248 013b D7                      		ret
 249                             	.LFE5:
 317                             	.Letext0:
 318                             		.file 2 "../src/iodefine.h"
 319                             		.file 3 "../src/iodefine_ext.h"
 320                             		.file 4 "../src/r_cg_macrodriver.h"
